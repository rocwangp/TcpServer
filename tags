!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANSWER_TABLE_NAME	http/HttpServer.cpp	/^static const string ANSWER_TABLE_NAME = "answer";$/;"	v	file:
ASCII	rapidjson/encodings.h	/^struct ASCII {$/;"	s
Accept	rapidjson/document.h	/^    bool Accept(Handler& handler) const {$/;"	f	class:GenericValue
AcceptEncodingList	http/HttpRequest.cpp	/^    typedef std::vector<string> AcceptEncodingList;$/;"	t	class:HttpRequest::Impl	file:
AcceptLanguageList	http/HttpRequest.cpp	/^    typedef std::vector<string> AcceptLanguageList;$/;"	t	class:HttpRequest::Impl	file:
Acceptor	Acceptor.cpp	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& addr) $/;"	f	class:Acceptor
Acceptor	Acceptor.h	/^class Acceptor : private noncopyable$/;"	c
AddChunk	rapidjson/allocators.h	/^    bool AddChunk(size_t capacity) {$/;"	f	class:MemoryPoolAllocator
AddConst	rapidjson/internal/meta.h	/^template <typename T> struct AddConst { typedef const T Type; };$/;"	s	namespace:internal
AddMember	rapidjson/document.h	/^    AddMember(GenericValue& name, T value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    AddMember(StringRefType name, T value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericObject AddMember(StringRefType name, StringRefType value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericObject AddMember(StringRefType name, ValueType& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericObject AddMember(StringRefType name, ValueType&& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericObject AddMember(ValueType& name, StringRefType value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericObject AddMember(ValueType& name, ValueType& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericObject AddMember(ValueType& name, ValueType&& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericObject AddMember(ValueType& name, std::basic_string<Ch>& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericObject AddMember(ValueType&& name, ValueType& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericObject AddMember(ValueType&& name, ValueType&& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(GenericValue& name, GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(GenericValue& name, GenericValue&& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(GenericValue& name, StringRefType value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(GenericValue& name, std::basic_string<Ch>& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(GenericValue&& name, GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(GenericValue&& name, GenericValue&& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(StringRefType name, GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(StringRefType name, GenericValue&& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    GenericValue& AddMember(StringRefType name, StringRefType value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (GenericObject)) AddMember(StringRefType name, T value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (ValueType&)) AddMember(ValueType& name, T value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddState	rapidjson/internal/regex.h	/^    bool AddState(Stack<Allocator>& l, SizeType index) {$/;"	f	class:internal::GenericRegexSearch
AddType	rapidjson/schema.h	/^    void AddType(const ValueType& type) {$/;"	f	class:internal::Schema
AddUniqueElement	rapidjson/schema.h	/^    void AddUniqueElement(V1& a, const V2& v) {$/;"	f	class:internal::Schema
AllocatorType	rapidjson/document.h	/^    typedef Allocator AllocatorType;                        \/\/!< Allocator type from template parameter.$/;"	t	class:GenericDocument
AllocatorType	rapidjson/document.h	/^    typedef Allocator AllocatorType;                \/\/!< Allocator type from template parameter.$/;"	t	class:GenericValue
AllocatorType	rapidjson/document.h	/^    typedef typename ValueType::AllocatorType AllocatorType;$/;"	t	class:GenericArray
AllocatorType	rapidjson/document.h	/^    typedef typename ValueType::AllocatorType AllocatorType;$/;"	t	class:GenericObject
AllocatorType	rapidjson/schema.h	/^    typedef Allocator AllocatorType;$/;"	t	class:GenericSchemaDocument
AllocatorType	rapidjson/schema.h	/^    typedef typename SchemaDocumentType::AllocatorType AllocatorType;$/;"	t	class:internal::Schema
AndExpr	rapidjson/internal/meta.h	/^template <typename C1, typename C2> struct AndExpr : AndExprCond<C1::Value, C2::Value>::Type {};$/;"	s	namespace:internal
AndExprCond	rapidjson/internal/meta.h	/^template <> struct AndExprCond<true, true> : TrueType {};$/;"	s	namespace:internal
AndExprCond	rapidjson/internal/meta.h	/^template <bool Cond1, bool Cond2> struct AndExprCond : FalseType {};$/;"	s	namespace:internal
AnswerServer	http/AnswerServer.h	/^class AnswerServer : noncopyable $/;"	c
Append	rapidjson/internal/regex.h	/^    SizeType Append(SizeType l1, SizeType l2) {$/;"	f	class:internal::GenericRegex
Append	rapidjson/pointer.h	/^    Append(T* name, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	rapidjson/pointer.h	/^    GenericPointer Append(SizeType index, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	rapidjson/pointer.h	/^    GenericPointer Append(const Ch* name, SizeType length, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	rapidjson/pointer.h	/^    GenericPointer Append(const Token& token, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	rapidjson/pointer.h	/^    GenericPointer Append(const ValueType& token, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	rapidjson/pointer.h	/^    GenericPointer Append(const std::basic_string<Ch>& name, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
AppendDecimal64	rapidjson/internal/biginteger.h	/^    void AppendDecimal64(const char* begin, const char* end) {$/;"	f	class:internal::BigInteger
AppendIndexToken	rapidjson/schema.h	/^    RAPIDJSON_FORCEINLINE static void AppendIndexToken(Stack& documentStack, SizeType index) {$/;"	f	struct:internal::TokenHelper
AppendToken	rapidjson/schema.h	/^    void AppendToken(const Ch* str, SizeType len) {$/;"	f	class:GenericSchemaValidator
Apply	rapidjson/internal/meta.h	/^template <> struct SelectIfImpl<false> { template <typename T1, typename T2> struct Apply { typedef T2 Type; }; };$/;"	s	struct:internal::SelectIfImpl
Apply	rapidjson/internal/meta.h	/^template <bool C> struct SelectIfImpl { template <typename T1, typename T2> struct Apply { typedef T1 Type; }; };$/;"	s	struct:internal::SelectIfImpl
ArgumentMap	http/HttpRequest.h	/^    typedef std::unordered_map<std::string, std::string> ArgumentMap;$/;"	t	class:HttpRequest
Array	rapidjson/document.h	/^    typedef GenericArray<false, ValueT> Array;$/;"	t	class:GenericArray
Array	rapidjson/document.h	/^    typedef GenericArray<false, ValueType> Array;$/;"	t	class:GenericValue
ArrayData	rapidjson/document.h	/^    struct ArrayData {$/;"	s	class:GenericValue
ArrayType	rapidjson/document.h	/^    typedef typename ValueType::Array ArrayType;$/;"	t	struct:internal::TypeHelper
ArrayType	rapidjson/document.h	/^    typedef typename ValueType::ConstArray ArrayType;$/;"	t	struct:internal::TypeHelper
AssignIfExist	rapidjson/schema.h	/^    static void AssignIfExist(SizeType& out, const ValueType& value, const ValueType& name) {$/;"	f	class:internal::Schema
AssignIfExist	rapidjson/schema.h	/^    static void AssignIfExist(bool& out, const ValueType& value, const ValueType& name) {$/;"	f	class:internal::Schema
AssignIfExist	rapidjson/schema.h	/^    void AssignIfExist(SchemaArray& out, SchemaDocumentType& schemaDocument, const PointerType& p, const ValueType& value, const ValueType& name, const ValueType& document) {$/;"	f	class:internal::Schema
AutoUTF	rapidjson/encodings.h	/^struct AutoUTF {$/;"	s
AutoUTFInputStream	rapidjson/encodedstream.h	/^    AutoUTFInputStream(InputByteStream& is, UTFType type = kUTF8) : is_(&is), type_(type), hasBOM_(false) {$/;"	f	class:AutoUTFInputStream
AutoUTFInputStream	rapidjson/encodedstream.h	/^class AutoUTFInputStream {$/;"	c
AutoUTFOutputStream	rapidjson/encodedstream.h	/^    AutoUTFOutputStream(OutputByteStream& os, UTFType type, bool putBOM) : os_(&os), type_(type) {$/;"	f	class:AutoUTFOutputStream
AutoUTFOutputStream	rapidjson/encodedstream.h	/^class AutoUTFOutputStream {$/;"	c
B	cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon16
BIN_TARGET	Makefile	/^BIN_TARGET = ${DIR_BIN}\/${TAR_SERVER} ${DIR_BIN}\/${TAR_CLIENT}$/;"	m
BIN_TARGET	database/Makefile	/^BIN_TARGET = ${DIR_BIN}\/${TAR_SERVER} ${DIR_BIN}\/${TAR_CLIENT}$/;"	m
BIN_TARGET	http/Makefile	/^BIN_TARGET = ${DIR_BIN}\/${TAR_SERVER} ${DIR_BIN}\/${TAR_CLIENT}$/;"	m
BIN_TAR_CLIENT	Makefile	/^BIN_TAR_CLIENT = ${DIR_BIN}\/${TAR_CLIENT}$/;"	m
BIN_TAR_CLIENT	database/Makefile	/^BIN_TAR_CLIENT = ${DIR_BIN}\/${TAR_CLIENT}$/;"	m
BIN_TAR_CLIENT	http/Makefile	/^BIN_TAR_CLIENT = ${DIR_BIN}\/${TAR_CLIENT}$/;"	m
BIN_TAR_SERVER	Makefile	/^BIN_TAR_SERVER = ${DIR_BIN}\/${TAR_SERVER}$/;"	m
BIN_TAR_SERVER	database/Makefile	/^BIN_TAR_SERVER = ${DIR_BIN}\/${TAR_SERVER}$/;"	m
BIN_TAR_SERVER	http/Makefile	/^BIN_TAR_SERVER = ${DIR_BIN}\/${TAR_SERVER}$/;"	m
Base	rapidjson/prettywriter.h	/^    typedef Writer<OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags> Base;$/;"	t	class:PrettyWriter
Base	rapidjson/reader.h	/^        typedef NumberStream<InputStream, false, false> Base;$/;"	t	class:GenericReader::NumberStream
Base	rapidjson/reader.h	/^        typedef NumberStream<InputStream, true, false> Base;$/;"	t	class:GenericReader::NumberStream
BaseReaderHandler	rapidjson/reader.h	/^struct BaseReaderHandler {$/;"	s
BaseType	rapidjson/document.h	/^    typedef std::iterator<std::random_access_iterator_tag,ValueType> BaseType;$/;"	t	class:GenericMemberIterator
BasicIStreamWrapper	rapidjson/istreamwrapper.h	/^    BasicIStreamWrapper(StreamType& stream) : stream_(stream), count_(), peekBuffer_() {}$/;"	f	class:BasicIStreamWrapper
BasicIStreamWrapper	rapidjson/istreamwrapper.h	/^class BasicIStreamWrapper {$/;"	c
BasicOStreamWrapper	rapidjson/ostreamwrapper.h	/^    BasicOStreamWrapper(StreamType& stream) : stream_(stream) {}$/;"	f	class:BasicOStreamWrapper
BasicOStreamWrapper	rapidjson/ostreamwrapper.h	/^class BasicOStreamWrapper {$/;"	c
Begin	rapidjson/document.h	/^    ConstValueIterator Begin() const { return const_cast<GenericValue&>(*this).Begin(); }$/;"	f	class:GenericValue
Begin	rapidjson/document.h	/^    ValueIterator Begin() const { return value_.Begin(); }$/;"	f	class:GenericArray
Begin	rapidjson/document.h	/^    ValueIterator Begin() { RAPIDJSON_ASSERT(IsArray()); return GetElementsPointer(); }$/;"	f	class:GenericValue
BeginValue	rapidjson/schema.h	/^    bool BeginValue() {$/;"	f	class:GenericSchemaValidator
BeginValue	rapidjson/schema.h	/^    bool BeginValue(Context& context) const {$/;"	f	class:internal::Schema
BigInteger	rapidjson/internal/biginteger.h	/^    BigInteger(const BigInteger& rhs) : count_(rhs.count_) {$/;"	f	class:internal::BigInteger
BigInteger	rapidjson/internal/biginteger.h	/^    BigInteger(const char* decimals, size_t length) : count_(1) {$/;"	f	class:internal::BigInteger
BigInteger	rapidjson/internal/biginteger.h	/^    explicit BigInteger(uint64_t u) : count_(1) {$/;"	f	class:internal::BigInteger
BigInteger	rapidjson/internal/biginteger.h	/^class BigInteger {$/;"	c	namespace:internal
Bool	rapidjson/document.h	/^    bool Bool(bool b) { new (stack_.template Push<ValueType>()) ValueType(b); return true; }$/;"	f	class:GenericDocument
Bool	rapidjson/prettywriter.h	/^    bool Bool(bool b)           { PrettyPrefix(b ? kTrueType : kFalseType); return Base::WriteBool(b); }$/;"	f	class:PrettyWriter
Bool	rapidjson/reader.h	/^    bool Bool(bool) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Bool	rapidjson/schema.h	/^    bool Bool(Context& context, bool) const { $/;"	f	class:internal::Schema
Bool	rapidjson/schema.h	/^    bool Bool(bool b)       { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Bool,   (CurrentContext(), b), (b)); }$/;"	f	class:GenericSchemaValidator
Bool	rapidjson/schema.h	/^    bool Bool(bool b) { return WriteType(b ? kTrueType : kFalseType); }$/;"	f	class:internal::Hasher
Bool	rapidjson/writer.h	/^    bool Bool(bool b)           { Prefix(b ? kTrueType : kFalseType); return EndValue(WriteBool(b)); }$/;"	f	class:Writer
BoolExpr	rapidjson/internal/meta.h	/^template <typename C> struct BoolExpr : SelectIf<C,TrueType,FalseType>::Type {};$/;"	s	namespace:internal
BoolType	rapidjson/internal/meta.h	/^template <bool Cond> struct BoolType {$/;"	s	namespace:internal
Bottom	rapidjson/internal/stack.h	/^    T* Bottom() { return reinterpret_cast<T*>(stack_); }$/;"	f	class:internal::Stack
Bottom	rapidjson/internal/stack.h	/^    const T* Bottom() const { return reinterpret_cast<T*>(stack_); }$/;"	f	class:internal::Stack
Buffer	Buffer.cpp	/^Buffer::Buffer()$/;"	f	class:Buffer
Buffer	Buffer.h	/^class Buffer : private noncopyable$/;"	c
C16	rapidjson/reader.h	350;"	d
C16	rapidjson/reader.h	352;"	d
C16	rapidjson/reader.h	386;"	d
C16	rapidjson/reader.h	388;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	database/Makefile	/^CC = gcc$/;"	m
CC	http/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -D_REENTRANT -Wall -std=c++11 -I${DIR_INC}$/;"	m
CFLAGS	database/Makefile	/^CFLAGS = -g -D_REENTRANT -Wall -std=c++11 -I${DIR_INC}$/;"	m
CFLAGS	http/Makefile	/^CFLAGS = -g -D_REENTRANT -Wall -std=c++11  -I${DIR_INC}$/;"	m
COMMIT_TABLE_NAME	http/HttpServer.cpp	/^static const string COMMIT_TABLE_NAME = "commit";$/;"	v	file:
COPY	rapidjson/encodings.h	147;"	d
COPY	rapidjson/encodings.h	173;"	d
COPY	rapidjson/encodings.h	180;"	d
COPY	rapidjson/encodings.h	199;"	d
CPPJIBEA_HMMSEGMENT_H	cppjieba/HMMSegment.hpp	2;"	d
CPPJIEAB_JIEBA_H	cppjieba/Jieba.hpp	2;"	d
CPPJIEBA_DICT_TRIE_HPP	cppjieba/DictTrie.hpp	2;"	d
CPPJIEBA_FULLSEGMENT_H	cppjieba/FullSegment.hpp	2;"	d
CPPJIEBA_HMMMODEL_H	cppjieba/HMMModel.hpp	2;"	d
CPPJIEBA_KEYWORD_EXTRACTOR_H	cppjieba/KeywordExtractor.hpp	2;"	d
CPPJIEBA_MIXSEGMENT_H	cppjieba/MixSegment.hpp	2;"	d
CPPJIEBA_MPSEGMENT_H	cppjieba/MPSegment.hpp	2;"	d
CPPJIEBA_POS_TAGGING_H	cppjieba/PosTagger.hpp	2;"	d
CPPJIEBA_PRE_FILTER_H	cppjieba/PreFilter.hpp	2;"	d
CPPJIEBA_QUERYSEGMENT_H	cppjieba/QuerySegment.hpp	2;"	d
CPPJIEBA_SEGMENTBASE_H	cppjieba/SegmentBase.hpp	2;"	d
CPPJIEBA_SEGMENTTAGGED_H	cppjieba/SegmentTagged.hpp	2;"	d
CPPJIEBA_TEXTRANK_EXTRACTOR_H	cppjieba/TextRankExtractor.hpp	2;"	d
CPPJIEBA_TRIE_HPP	cppjieba/Trie.hpp	2;"	d
CPPJIEBA_UNICODE_H	cppjieba/Unicode.hpp	2;"	d
CXX	Makefile	/^CXX = g++$/;"	m
CXX	database/Makefile	/^CXX = g++$/;"	m
CXX	http/Makefile	/^CXX = g++$/;"	m
CalcDP	cppjieba/MPSegment.hpp	/^  void CalcDP(vector<Dag>& dags) const {$/;"	f	class:cppjieba::MPSegment
CalcFreqSum	cppjieba/DictTrie.hpp	/^  double CalcFreqSum(const vector<DictUnit>& node_infos) const {$/;"	f	class:cppjieba::DictTrie
CalculateWeight	cppjieba/DictTrie.hpp	/^  void CalculateWeight(vector<DictUnit>& node_infos, double sum) const {$/;"	f	class:cppjieba::DictTrie
Capacity	rapidjson/allocators.h	/^    size_t Capacity() const {$/;"	f	class:MemoryPoolAllocator
Capacity	rapidjson/document.h	/^    SizeType Capacity() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.capacity; }$/;"	f	class:GenericValue
Capacity	rapidjson/document.h	/^    SizeType Capacity() const { return value_.Capacity(); }$/;"	f	class:GenericArray
Ch	rapidjson/cursorstreamwrapper.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:CursorStreamWrapper
Ch	rapidjson/document.h	/^    typedef CharType Ch; \/\/!< character type of the string$/;"	t	struct:GenericStringRef
Ch	rapidjson/document.h	/^    typedef typename Encoding::Ch Ch;                       \/\/!< Character type derived from Encoding.$/;"	t	class:GenericDocument
Ch	rapidjson/document.h	/^    typedef typename Encoding::Ch Ch;               \/\/!< Character type derived from Encoding.$/;"	t	class:GenericValue
Ch	rapidjson/document.h	/^    typedef typename ValueType::Ch Ch;$/;"	t	class:GenericObject
Ch	rapidjson/encodedstream.h	/^    typedef CharType Ch;$/;"	t	class:AutoUTFInputStream
Ch	rapidjson/encodedstream.h	/^    typedef CharType Ch;$/;"	t	class:AutoUTFOutputStream
Ch	rapidjson/encodedstream.h	/^    typedef UTF8<>::Ch Ch;$/;"	t	class:EncodedInputStream
Ch	rapidjson/encodedstream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:EncodedInputStream
Ch	rapidjson/encodedstream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:EncodedOutputStream
Ch	rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:ASCII
Ch	rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:AutoUTF
Ch	rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:UTF16
Ch	rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:UTF32
Ch	rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:UTF8
Ch	rapidjson/filereadstream.h	/^    typedef char Ch;    \/\/!< Character type (byte).$/;"	t	class:FileReadStream
Ch	rapidjson/filewritestream.h	/^    typedef char Ch;    \/\/!< Character type. Only support char.$/;"	t	class:FileWriteStream
Ch	rapidjson/internal/regex.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:internal::GenericRegex
Ch	rapidjson/internal/regex.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:internal::GenericRegexSearch
Ch	rapidjson/istreamwrapper.h	/^    typedef typename StreamType::char_type Ch;$/;"	t	class:BasicIStreamWrapper
Ch	rapidjson/memorybuffer.h	/^    typedef char Ch; \/\/ byte$/;"	t	struct:GenericMemoryBuffer
Ch	rapidjson/memorystream.h	/^    typedef char Ch; \/\/ byte$/;"	t	struct:MemoryStream
Ch	rapidjson/ostreamwrapper.h	/^    typedef typename StreamType::char_type Ch;$/;"	t	class:BasicOStreamWrapper
Ch	rapidjson/pointer.h	/^        typedef typename ValueType::Ch Ch;$/;"	t	class:GenericPointer::PercentDecodeStream
Ch	rapidjson/pointer.h	/^    typedef typename ValueType::Ch Ch;                      \/\/!< Character type from Value$/;"	t	class:GenericPointer
Ch	rapidjson/prettywriter.h	/^    typedef typename Base::Ch Ch;$/;"	t	class:PrettyWriter
Ch	rapidjson/reader.h	/^        typedef CharType Ch;$/;"	t	class:GenericReader::StackStream
Ch	rapidjson/reader.h	/^        typedef typename InputStream::Ch Ch;$/;"	t	class:GenericReader::NumberStream
Ch	rapidjson/reader.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	struct:BaseReaderHandler
Ch	rapidjson/reader.h	/^    typedef typename SourceEncoding::Ch Ch; \/\/!< SourceEncoding character type$/;"	t	class:GenericReader
Ch	rapidjson/schema.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:internal::Hasher
Ch	rapidjson/schema.h	/^    typedef typename EncodingType::Ch Ch;$/;"	t	class:GenericSchemaDocument
Ch	rapidjson/schema.h	/^    typedef typename EncodingType::Ch Ch;$/;"	t	class:GenericSchemaValidator
Ch	rapidjson/schema.h	/^    typedef typename EncodingType::Ch Ch;$/;"	t	class:internal::Schema
Ch	rapidjson/schema.h	/^    typedef typename InputStream::Ch Ch;$/;"	t	class:SchemaValidatingReader
Ch	rapidjson/schema.h	/^    typedef typename SchemaDocumentType::Ch Ch;$/;"	t	class:IGenericRemoteSchemaDocumentProvider
Ch	rapidjson/schema.h	/^    typedef typename ValueType::Ch Ch;$/;"	t	struct:internal::SchemaValidationContext
Ch	rapidjson/stream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:GenericStreamWrapper
Ch	rapidjson/stream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	struct:GenericInsituStringStream
Ch	rapidjson/stream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	struct:GenericStringStream
Ch	rapidjson/stringbuffer.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:GenericStringBuffer
Ch	rapidjson/writer.h	/^    typedef typename SourceEncoding::Ch Ch;$/;"	t	class:Writer
Channel	Channel.cpp	/^Channel::Channel(EventLoop* loop, int fd)$/;"	f	class:Channel
Channel	Channel.h	/^class Channel : private noncopyable$/;"	c
ChannelList	EventLoop.h	/^    typedef std::vector<Channel*> ChannelList;$/;"	t	class:EventLoop
ChannelList	Poller.h	/^    typedef std::vector<Channel*> ChannelList;$/;"	t	class:Poller
ChannelMap	Poller.h	/^    typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:Poller
CharType	rapidjson/document.h	/^    GenericStringRef(CharType (&str)[N]) \/* = delete *\/;$/;"	m	struct:GenericStringRef
CharacterEscape	rapidjson/internal/regex.h	/^    bool CharacterEscape(DecodedStream<InputStream, Encoding>& ds, unsigned* escapedCodepoint) {$/;"	f	class:internal::GenericRegex
CheckDoubleMaximum	rapidjson/schema.h	/^    bool CheckDoubleMaximum(Context& context, double d) const {$/;"	f	class:internal::Schema
CheckDoubleMinimum	rapidjson/schema.h	/^    bool CheckDoubleMinimum(Context& context, double d) const {$/;"	f	class:internal::Schema
CheckDoubleMultipleOf	rapidjson/schema.h	/^    bool CheckDoubleMultipleOf(Context& context, double d) const {$/;"	f	class:internal::Schema
CheckInt	rapidjson/schema.h	/^    bool CheckInt(Context& context, int64_t i) const {$/;"	f	class:internal::Schema
CheckUint	rapidjson/schema.h	/^    bool CheckUint(Context& context, uint64_t i) const {$/;"	f	class:internal::Schema
CheckWithinHalfULP	rapidjson/internal/strtod.h	/^inline int CheckWithinHalfULP(double b, const BigInteger& d, int dExp) {$/;"	f	namespace:internal
ChunkHeader	rapidjson/allocators.h	/^    struct ChunkHeader {$/;"	s	class:MemoryPoolAllocator
Clear	rapidjson/allocators.h	/^    void Clear() {$/;"	f	class:MemoryPoolAllocator
Clear	rapidjson/document.h	/^    void Clear() const { value_.Clear(); }$/;"	f	class:GenericArray
Clear	rapidjson/document.h	/^    void Clear() {$/;"	f	class:GenericValue
Clear	rapidjson/error/error.h	/^    void Clear() { Set(kParseErrorNone); }$/;"	f	struct:ParseResult
Clear	rapidjson/internal/stack.h	/^    void Clear() { stackTop_ = stack_; }$/;"	f	class:internal::Stack
Clear	rapidjson/memorybuffer.h	/^    void Clear() { stack_.Clear(); }$/;"	f	struct:GenericMemoryBuffer
Clear	rapidjson/stringbuffer.h	/^    void Clear() { stack_.Clear(); }$/;"	f	class:GenericStringBuffer
ClearStack	rapidjson/document.h	/^    void ClearStack() {$/;"	f	class:GenericDocument
ClearStack	rapidjson/reader.h	/^    void ClearStack() { stack_.Clear(); }$/;"	f	class:GenericReader
ClearStackOnExit	rapidjson/document.h	/^        explicit ClearStackOnExit(GenericDocument& d) : d_(d) {}$/;"	f	struct:GenericDocument::ClearStackOnExit
ClearStackOnExit	rapidjson/document.h	/^    struct ClearStackOnExit {$/;"	s	class:GenericDocument
ClearStackOnExit	rapidjson/reader.h	/^        explicit ClearStackOnExit(GenericReader& r) : r_(r) {}$/;"	f	struct:GenericReader::ClearStackOnExit
ClearStackOnExit	rapidjson/reader.h	/^    struct ClearStackOnExit {$/;"	s	class:GenericReader
CloneTopOperand	rapidjson/internal/regex.h	/^    void CloneTopOperand(Stack<Allocator>& operandStack) {$/;"	f	class:internal::GenericRegex
CloseCallBack	CallBack.h	/^typedef std::function<void(const TcpConnectionPtr&)> CloseCallBack;$/;"	t
Code	rapidjson/error/error.h	/^    ParseErrorCode Code() const { return code_; }$/;"	f	struct:ParseResult
ColonToken	rapidjson/reader.h	/^        ColonToken,$/;"	e	enum:GenericReader::Token
ComByValue	http/HttpServer.h	/^    struct ComByValue$/;"	s	class:HttpServer
CommaToken	rapidjson/reader.h	/^        CommaToken,$/;"	e	enum:GenericReader::Token
Compare	cppjieba/KeywordExtractor.hpp	/^  static bool Compare(const Word& lhs, const Word& rhs) {$/;"	f	class:cppjieba::KeywordExtractor
Compare	cppjieba/TextRankExtractor.hpp	/^    static bool Compare(const Word &x,const Word &y){$/;"	f	class:cppjieba::TextRankExtractor
Compare	rapidjson/internal/biginteger.h	/^    int Compare(const BigInteger& rhs) const {$/;"	f	class:internal::BigInteger
Condition	Condition.cpp	/^Condition::Condition(pthread_mutex_t& mutex)$/;"	f	class:Condition
Condition	Condition.h	/^class Condition : noncopyable$/;"	c
ConnectionCallBack	CallBack.h	/^typedef std::function<void(const TcpConnectionPtr&)> ConnectionCallBack;$/;"	t
ConnectionMap	TcpServer.h	/^    typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:TcpServer
ConstArray	rapidjson/document.h	/^    typedef GenericArray<true, ValueT> ConstArray;$/;"	t	class:GenericArray
ConstArray	rapidjson/document.h	/^    typedef GenericArray<true, ValueType> ConstArray;$/;"	t	class:GenericValue
ConstIterator	rapidjson/document.h	/^    typedef GenericMemberIterator<true,Encoding,Allocator>  ConstIterator;$/;"	t	class:GenericMemberIterator
ConstMemberIterator	rapidjson/document.h	/^    typedef GenericMemberIterator<true, typename ValueT::EncodingType, typename ValueT::AllocatorType> ConstMemberIterator;$/;"	t	class:GenericObject
ConstMemberIterator	rapidjson/document.h	/^    typedef typename GenericMemberIterator<true,Encoding,Allocator>::Iterator ConstMemberIterator;  \/\/!< Constant member iterator for iterating in object.$/;"	t	class:GenericValue
ConstObject	rapidjson/document.h	/^    typedef GenericObject<true, ValueT> ConstObject;$/;"	t	class:GenericObject
ConstObject	rapidjson/document.h	/^    typedef GenericObject<true, ValueType> ConstObject;$/;"	t	class:GenericValue
ConstValueIterator	rapidjson/document.h	/^    typedef const GenericValue* ConstValueIterator; \/\/!< Constant value iterator for iterating in array.$/;"	t	class:GenericValue
ConstValueIterator	rapidjson/document.h	/^    typedef const ValueT* ConstValueIterator;$/;"	t	class:GenericArray
Consume	rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE static bool Consume(InputStream& is, typename InputStream::Ch expect) {$/;"	f	class:GenericReader
Context	rapidjson/schema.h	/^    typedef SchemaValidationContext<SchemaDocumentType> Context;$/;"	t	class:internal::Schema
Context	rapidjson/schema.h	/^    typedef typename SchemaType::Context Context;$/;"	t	class:GenericSchemaValidator
CopyFrom	rapidjson/document.h	/^    GenericValue& CopyFrom(const GenericValue<Encoding, SourceAllocator>& rhs, Allocator& allocator, bool copyConstStrings = false) {$/;"	f	class:GenericValue
CopyFromRaw	rapidjson/pointer.h	/^    Ch* CopyFromRaw(const GenericPointer& rhs, size_t extraToken = 0, size_t extraNameBufferSize = 0) {$/;"	f	class:GenericPointer
CountDecimalDigit32	rapidjson/internal/dtoa.h	/^inline int CountDecimalDigit32(uint32_t n) {$/;"	f	namespace:internal
CountStringCodePoint	rapidjson/internal/strfunc.h	/^bool CountStringCodePoint(const typename Encoding::Ch* s, SizeType length, SizeType* outCount) {$/;"	f	namespace:internal
Create	rapidjson/pointer.h	/^    ValueType& Create(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, bool* alreadyExist = 0) const {$/;"	f	class:GenericPointer
Create	rapidjson/pointer.h	/^    ValueType& Create(ValueType& root, typename ValueType::AllocatorType& allocator, bool* alreadyExist = 0) const {$/;"	f	class:GenericPointer
CreateHasher	rapidjson/schema.h	/^    virtual void* CreateHasher() {$/;"	f	class:GenericSchemaValidator
CreateParallelValidator	rapidjson/schema.h	/^    bool CreateParallelValidator(Context& context) const {$/;"	f	class:internal::Schema
CreatePattern	rapidjson/schema.h	/^    RegexType* CreatePattern(const ValueType& value) {$/;"	f	class:internal::Schema
CreatePattern	rapidjson/schema.h	/^    RegexType* CreatePattern(const ValueType&) { return 0; }$/;"	f	class:internal::Schema
CreateSchema	rapidjson/schema.h	/^    void CreateSchema(const SchemaType** schema, const PointerType& pointer, const ValueType& v, const ValueType& document) {$/;"	f	class:GenericSchemaDocument
CreateSchemaRecursive	rapidjson/schema.h	/^    void CreateSchemaRecursive(const SchemaType** schema, const PointerType& pointer, const ValueType& v, const ValueType& document) {$/;"	f	class:GenericSchemaDocument
CreateSchemaValidator	rapidjson/schema.h	/^    virtual ISchemaValidator* CreateSchemaValidator(const SchemaType& root) {$/;"	f	class:GenericSchemaValidator
CreateSchemaValidators	rapidjson/schema.h	/^    void CreateSchemaValidators(Context& context, const SchemaArray& schemas) const {$/;"	f	class:internal::Schema
CreateTrie	cppjieba/DictTrie.hpp	/^  void CreateTrie(const vector<DictUnit>& dictUnits) {$/;"	f	class:cppjieba::DictTrie
CreateTrie	cppjieba/Trie.hpp	/^  void CreateTrie(const vector<Unicode>& keys, const vector<const DictUnit*>& valuePointers) {$/;"	f	class:cppjieba::Trie
CreateValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& CreateValueByPointer(DocumentType& document, const CharType(&source)[N]) {$/;"	f
CreateValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& CreateValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer) {$/;"	f
CreateValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& CreateValueByPointer(T& root, const CharType(&source)[N], typename T::AllocatorType& a) {$/;"	f
CreateValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& CreateValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::AllocatorType& a) {$/;"	f
CrtAllocator	rapidjson/allocators.h	/^class CrtAllocator {$/;"	c
CurrentContext	rapidjson/schema.h	/^    Context& CurrentContext() { return *schemaStack_.template Top<Context>(); }$/;"	f	class:GenericSchemaValidator
CurrentContext	rapidjson/schema.h	/^    const Context& CurrentContext() const { return *schemaStack_.template Top<Context>(); }$/;"	f	class:GenericSchemaValidator
CurrentSchema	rapidjson/schema.h	/^    const SchemaType& CurrentSchema() const { return *schemaStack_.template Top<Context>()->schema; }$/;"	f	class:GenericSchemaValidator
CurrentThread	CurrentThread.h	/^namespace CurrentThread$/;"	n
CursorStreamWrapper	rapidjson/cursorstreamwrapper.h	/^    CursorStreamWrapper(InputStream& is):$/;"	f	class:CursorStreamWrapper
CursorStreamWrapper	rapidjson/cursorstreamwrapper.h	/^class CursorStreamWrapper : public GenericStreamWrapper<InputStream, Encoding> {$/;"	c
Cut	cppjieba/FullSegment.hpp	/^  void Cut(RuneStrArray::const_iterator begin, $/;"	f	class:cppjieba::FullSegment
Cut	cppjieba/FullSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::FullSegment
Cut	cppjieba/HMMSegment.hpp	/^  void Cut(RuneStrArray::const_iterator begin, RuneStrArray::const_iterator end, vector<WordRange>& res) const {$/;"	f	class:cppjieba::HMMSegment
Cut	cppjieba/HMMSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::HMMSegment
Cut	cppjieba/Jieba.hpp	/^  void Cut(const string& sentence, vector<Word>& words, bool hmm = true) const {$/;"	f	class:cppjieba::Jieba
Cut	cppjieba/Jieba.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::Jieba
Cut	cppjieba/MPSegment.hpp	/^  void Cut(RuneStrArray::const_iterator begin,$/;"	f	class:cppjieba::MPSegment
Cut	cppjieba/MPSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::MPSegment
Cut	cppjieba/MPSegment.hpp	/^  void Cut(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::MPSegment
Cut	cppjieba/MPSegment.hpp	/^  void Cut(const string& sentence,$/;"	f	class:cppjieba::MPSegment
Cut	cppjieba/MixSegment.hpp	/^  void Cut(RuneStrArray::const_iterator begin, RuneStrArray::const_iterator end, vector<WordRange>& res, bool hmm) const {$/;"	f	class:cppjieba::MixSegment
Cut	cppjieba/MixSegment.hpp	/^  void Cut(const string& sentence, vector<Word>& words, bool hmm = true) const {$/;"	f	class:cppjieba::MixSegment
Cut	cppjieba/MixSegment.hpp	/^  void Cut(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::MixSegment
Cut	cppjieba/MixSegment.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm) const {$/;"	f	class:cppjieba::MixSegment
Cut	cppjieba/QuerySegment.hpp	/^  void Cut(RuneStrArray::const_iterator begin, RuneStrArray::const_iterator end, vector<WordRange>& res, bool hmm) const {$/;"	f	class:cppjieba::QuerySegment
Cut	cppjieba/QuerySegment.hpp	/^  void Cut(const string& sentence, vector<Word>& words, bool hmm = true) const {$/;"	f	class:cppjieba::QuerySegment
Cut	cppjieba/QuerySegment.hpp	/^  void Cut(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::QuerySegment
Cut	cppjieba/QuerySegment.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm) const {$/;"	f	class:cppjieba::QuerySegment
CutAll	cppjieba/Jieba.hpp	/^  void CutAll(const string& sentence, vector<Word>& words) const {$/;"	f	class:cppjieba::Jieba
CutAll	cppjieba/Jieba.hpp	/^  void CutAll(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::Jieba
CutByDag	cppjieba/MPSegment.hpp	/^  void CutByDag(RuneStrArray::const_iterator begin, $/;"	f	class:cppjieba::MPSegment
CutForSearch	cppjieba/Jieba.hpp	/^  void CutForSearch(const string& sentence, vector<Word>& words, bool hmm = true) const {$/;"	f	class:cppjieba::Jieba
CutForSearch	cppjieba/Jieba.hpp	/^  void CutForSearch(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::Jieba
CutHMM	cppjieba/Jieba.hpp	/^  void CutHMM(const string& sentence, vector<Word>& words) const {$/;"	f	class:cppjieba::Jieba
CutHMM	cppjieba/Jieba.hpp	/^  void CutHMM(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::Jieba
CutSmall	cppjieba/Jieba.hpp	/^  void CutSmall(const string& sentence, vector<Word>& words, size_t max_word_len) const {$/;"	f	class:cppjieba::Jieba
CutSmall	cppjieba/Jieba.hpp	/^  void CutSmall(const string& sentence, vector<string>& words, size_t max_word_len) const {$/;"	f	class:cppjieba::Jieba
DATA_BASE_NAME	http/HttpServer.cpp	/^static const string DATA_BASE_NAME = "test";$/;"	v	file:
DEBUG	Logging.h	/^        DEBUG,$/;"	e	enum:Logger::LogLevel
DELETE	http/HttpRequest.h	/^        DELETE,$/;"	e	enum:HttpRequest::HttpMethod
DICT_COLUMN_NUM	cppjieba/DictTrie.hpp	/^const size_t DICT_COLUMN_NUM = 3;$/;"	m	namespace:cppjieba
DICT_PATH	http/HttpServer.cpp	/^static const char* const DICT_PATH = "dict\/jieba.dict.utf8";$/;"	v	file:
DIR_BIN	Makefile	/^DIR_BIN = .\/$/;"	m
DIR_BIN	database/Makefile	/^DIR_BIN = .\/$/;"	m
DIR_BIN	http/Makefile	/^DIR_BIN = .\/$/;"	m
DIR_INC	Makefile	/^DIR_INC = .\/$/;"	m
DIR_INC	database/Makefile	/^DIR_INC = .\/$/;"	m
DIR_INC	http/Makefile	/^DIR_INC = .\/$/;"	m
DIR_LINK	database/Makefile	/^DIR_LINK = .\/link$/;"	m
DIR_LINK	http/Makefile	/^DIR_LINK = .\/link$/;"	m
DIR_OBJ	Makefile	/^DIR_OBJ = .\/obj$/;"	m
DIR_OBJ	database/Makefile	/^DIR_OBJ = .\/obj$/;"	m
DIR_OBJ	http/Makefile	/^DIR_OBJ = .\/obj$/;"	m
DIR_SRC	Makefile	/^DIR_SRC = .\/$/;"	m
DIR_SRC	database/Makefile	/^DIR_SRC = .\/$/;"	m
DIR_SRC	http/Makefile	/^DIR_SRC = .\/$/;"	m
Dag	cppjieba/Trie.hpp	/^  Dag():runestr(), pInfo(NULL), weight(0.0), nextPos(0) {$/;"	f	struct:cppjieba::Dag
Dag	cppjieba/Trie.hpp	/^struct Dag {$/;"	s	namespace:cppjieba
Data	rapidjson/document.h	/^    union Data {$/;"	u	class:GenericValue
DataBase	database/DataBase.cpp	/^DataBase::DataBase(const string& username,$/;"	f	class:DataBase
DataBase	database/DataBase.h	/^class DataBase$/;"	c
DataBase	http/DataBase.cpp	/^DataBase::DataBase(const string& username,$/;"	f	class:DataBase
DataBase	http/DataBase.h	/^class DataBase : noncopyable$/;"	c
Decode	rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:AutoUTF
Decode	rapidjson/encodings.h	/^    static bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:ASCII
Decode	rapidjson/encodings.h	/^    static bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:UTF16
Decode	rapidjson/encodings.h	/^    static bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:UTF32
Decode	rapidjson/encodings.h	/^    static bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:UTF8
Decode	rapidjson/internal/regex.h	/^    void Decode() {$/;"	f	class:internal::DecodedStream
DecodeRuneInString	cppjieba/Unicode.hpp	/^inline RuneStrLite DecodeRuneInString(const char* str, size_t len) {$/;"	f	namespace:cppjieba
DecodeRunesInString	cppjieba/Unicode.hpp	/^inline Unicode DecodeRunesInString(const string& s) {$/;"	f	namespace:cppjieba
DecodeRunesInString	cppjieba/Unicode.hpp	/^inline bool DecodeRunesInString(const char* s, size_t len, RuneStrArray& runes) {$/;"	f	namespace:cppjieba
DecodeRunesInString	cppjieba/Unicode.hpp	/^inline bool DecodeRunesInString(const char* s, size_t len, Unicode& unicode) {$/;"	f	namespace:cppjieba
DecodeRunesInString	cppjieba/Unicode.hpp	/^inline bool DecodeRunesInString(const string& s, RuneStrArray& runes) {$/;"	f	namespace:cppjieba
DecodeRunesInString	cppjieba/Unicode.hpp	/^inline bool DecodeRunesInString(const string& s, Unicode& unicode) {$/;"	f	namespace:cppjieba
DecodedStream	rapidjson/internal/regex.h	/^    DecodedStream(SourceStream& ss) : ss_(ss), codepoint_() { Decode(); }$/;"	f	class:internal::DecodedStream
DecodedStream	rapidjson/internal/regex.h	/^class DecodedStream {$/;"	c	namespace:internal
Default	rapidjson/reader.h	/^    bool Default() { return true; }$/;"	f	struct:BaseReaderHandler
DeleteNode	cppjieba/Trie.hpp	/^  void DeleteNode(TrieNode* node) {$/;"	f	class:cppjieba::Trie
DestroryHasher	rapidjson/schema.h	/^    virtual void DestroryHasher(void* hasher) {$/;"	f	class:GenericSchemaValidator
Destroy	rapidjson/document.h	/^    void Destroy() {$/;"	f	class:GenericDocument
Destroy	rapidjson/internal/stack.h	/^    void Destroy() {$/;"	f	class:internal::Stack
DestroySchemaValidator	rapidjson/schema.h	/^    virtual void DestroySchemaValidator(ISchemaValidator* validator) {$/;"	f	class:GenericSchemaValidator
DetectType	rapidjson/encodedstream.h	/^    void DetectType() {$/;"	f	class:AutoUTFInputStream
DictTrie	cppjieba/DictTrie.hpp	/^  DictTrie(const string& dict_path, const string& user_dict_paths = "", UserWordWeightOption user_word_weight_opt = WordWeightMedian) {$/;"	f	class:cppjieba::DictTrie
DictTrie	cppjieba/DictTrie.hpp	/^class DictTrie {$/;"	c	namespace:cppjieba
DictUnit	cppjieba/Trie.hpp	/^struct DictUnit {$/;"	s	namespace:cppjieba
Difference	rapidjson/internal/biginteger.h	/^    bool Difference(const BigInteger& rhs, BigInteger* out) const {$/;"	f	class:internal::BigInteger
DifferenceType	rapidjson/document.h	/^    typedef typename BaseType::difference_type DifferenceType;$/;"	t	class:GenericMemberIterator
DigitGen	rapidjson/internal/dtoa.h	/^inline void DigitGen(const DiyFp& W, const DiyFp& Mp, uint64_t delta, char* buffer, int* len, int* K) {$/;"	f	namespace:internal
DisableIf	rapidjson/internal/meta.h	/^struct DisableIf : DisableIfCond<Condition::Value, T> {};$/;"	s	namespace:internal
DisableIfCond	rapidjson/internal/meta.h	/^template <bool Condition, typename T = void> struct DisableIfCond { typedef T Type; };$/;"	s	namespace:internal
DisableIfCond	rapidjson/internal/meta.h	/^template <typename T> struct DisableIfCond<true, T> { \/* empty *\/ };$/;"	s	namespace:internal
DiyFp	rapidjson/internal/diyfp.h	/^    DiyFp() : f(), e() {}$/;"	f	struct:internal::DiyFp
DiyFp	rapidjson/internal/diyfp.h	/^    DiyFp(uint64_t fp, int exp) : f(fp), e(exp) {}$/;"	f	struct:internal::DiyFp
DiyFp	rapidjson/internal/diyfp.h	/^    explicit DiyFp(double d) {$/;"	f	struct:internal::DiyFp
DiyFp	rapidjson/internal/diyfp.h	/^struct DiyFp {$/;"	s	namespace:internal
Document	rapidjson/document.h	/^typedef GenericDocument<UTF8<> > Document;$/;"	t
Document	rapidjson/fwd.h	/^typedef GenericDocument<UTF8<char>, MemoryPoolAllocator<CrtAllocator>, CrtAllocator> Document;$/;"	t
Double	rapidjson/document.h	/^    bool Double(double d) { new (stack_.template Push<ValueType>()) ValueType(d); return true; }$/;"	f	class:GenericDocument
Double	rapidjson/internal/ieee754.h	/^    Double() {}$/;"	f	class:internal::Double
Double	rapidjson/internal/ieee754.h	/^    Double(double d) : d_(d) {}$/;"	f	class:internal::Double
Double	rapidjson/internal/ieee754.h	/^    Double(uint64_t u) : u_(u) {}$/;"	f	class:internal::Double
Double	rapidjson/internal/ieee754.h	/^class Double {$/;"	c	namespace:internal
Double	rapidjson/prettywriter.h	/^    bool Double(double d)       { PrettyPrefix(kNumberType); return Base::WriteDouble(d); }$/;"	f	class:PrettyWriter
Double	rapidjson/reader.h	/^    bool Double(double) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Double	rapidjson/schema.h	/^    bool Double(Context& context, double d) const {$/;"	f	class:internal::Schema
Double	rapidjson/schema.h	/^    bool Double(double d)   { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Double, (CurrentContext(), d), (d)); }$/;"	f	class:GenericSchemaValidator
Double	rapidjson/schema.h	/^    bool Double(double d) { $/;"	f	class:internal::Hasher
Double	rapidjson/writer.h	/^    bool Double(double d)       { Prefix(kNumberType); return EndValue(WriteDouble(d)); }$/;"	f	class:Writer
E	cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon16
EPollPoller	EPollPoller.cpp	/^EPollPoller::EPollPoller()$/;"	f	class:EPollPoller
EPollPoller	EPollPoller.h	/^class EPollPoller : public Poller$/;"	c
ERROR	Logging.h	/^        ERROR,$/;"	e	enum:Logger::LogLevel
EchoServer	server.cpp	/^    EchoServer(EventLoop* loop, InetAddress& localaddr)$/;"	f	class:EchoServer
EchoServer	server.cpp	/^class EchoServer$/;"	c	file:
Edges	cppjieba/TextRankExtractor.hpp	/^      typedef std::map<Node,double> Edges;$/;"	t	class:cppjieba::TextRankExtractor::WordGraph
EffectiveSignificandSize	rapidjson/internal/ieee754.h	/^    static int EffectiveSignificandSize(int order) {$/;"	f	class:internal::Double
EmitProbMap	cppjieba/HMMModel.hpp	/^typedef unordered_map<Rune, double> EmitProbMap;$/;"	t	namespace:cppjieba
Empty	rapidjson/document.h	/^    bool Empty() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.size == 0; }$/;"	f	class:GenericValue
Empty	rapidjson/document.h	/^    bool Empty() const { return value_.Empty(); }$/;"	f	class:GenericArray
Empty	rapidjson/internal/stack.h	/^    bool Empty() const { return stackTop_ == stack_; }$/;"	f	class:internal::Stack
EnableIf	rapidjson/internal/meta.h	/^struct EnableIf : EnableIfCond<Condition::Value, T> {};$/;"	s	namespace:internal
EnableIfCond	rapidjson/internal/meta.h	/^template <bool Condition, typename T = void> struct EnableIfCond  { typedef T Type; };$/;"	s	namespace:internal
EnableIfCond	rapidjson/internal/meta.h	/^template <typename T> struct EnableIfCond<false, T> { \/* empty *\/ };$/;"	s	namespace:internal
Encode	rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:AutoUTF
Encode	rapidjson/encodings.h	/^    static void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:ASCII
Encode	rapidjson/encodings.h	/^    static void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF16
Encode	rapidjson/encodings.h	/^    static void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF32
Encode	rapidjson/encodings.h	/^    static void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF8
EncodeUnsafe	rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:AutoUTF
EncodeUnsafe	rapidjson/encodings.h	/^    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:ASCII
EncodeUnsafe	rapidjson/encodings.h	/^    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF16
EncodeUnsafe	rapidjson/encodings.h	/^    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF32
EncodeUnsafe	rapidjson/encodings.h	/^    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF8
EncodedInputStream	rapidjson/encodedstream.h	/^    EncodedInputStream(InputByteStream& is) : is_(is) { $/;"	f	class:EncodedInputStream
EncodedInputStream	rapidjson/encodedstream.h	/^    EncodedInputStream(MemoryStream& is) : is_(is) {$/;"	f	class:EncodedInputStream
EncodedInputStream	rapidjson/encodedstream.h	/^class EncodedInputStream {$/;"	c
EncodedInputStream	rapidjson/encodedstream.h	/^class EncodedInputStream<UTF8<>, MemoryStream> {$/;"	c
EncodedOutputStream	rapidjson/encodedstream.h	/^    EncodedOutputStream(OutputByteStream& os, bool putBOM = true) : os_(os) { $/;"	f	class:EncodedOutputStream
EncodedOutputStream	rapidjson/encodedstream.h	/^class EncodedOutputStream {$/;"	c
Encoding	rapidjson/internal/regex.h	/^    typedef typename RegexType::EncodingType Encoding;$/;"	t	class:internal::GenericRegexSearch
EncodingType	rapidjson/document.h	/^    typedef Encoding EncodingType;                  \/\/!< Encoding type from template parameter.$/;"	t	class:GenericValue
EncodingType	rapidjson/document.h	/^    typedef typename ValueType::EncodingType EncodingType;$/;"	t	class:GenericObject
EncodingType	rapidjson/internal/regex.h	/^    typedef Encoding EncodingType;$/;"	t	class:internal::GenericRegex
EncodingType	rapidjson/pointer.h	/^    typedef typename ValueType::EncodingType EncodingType;  \/\/!< Encoding type from Value$/;"	t	class:GenericPointer
EncodingType	rapidjson/schema.h	/^    typedef typename SchemaType::EncodingType EncodingType;$/;"	t	class:GenericSchemaValidator
EncodingType	rapidjson/schema.h	/^    typedef typename ValueType::EncodingType EncodingType;$/;"	t	class:GenericSchemaDocument
EncodingType	rapidjson/schema.h	/^    typedef typename ValueType::EncodingType EncodingType;$/;"	t	class:internal::Schema
End	rapidjson/document.h	/^    ConstValueIterator End() const { return const_cast<GenericValue&>(*this).End(); }$/;"	f	class:GenericValue
End	rapidjson/document.h	/^    ValueIterator End() const { return value_.End(); }$/;"	f	class:GenericArray
End	rapidjson/document.h	/^    ValueIterator End() { RAPIDJSON_ASSERT(IsArray()); return GetElementsPointer() + data_.a.size; }$/;"	f	class:GenericValue
End	rapidjson/internal/stack.h	/^    T* End() { return reinterpret_cast<T*>(stackTop_); }$/;"	f	class:internal::Stack
End	rapidjson/internal/stack.h	/^    const T* End() const { return reinterpret_cast<T*>(stackTop_); }$/;"	f	class:internal::Stack
EndArray	rapidjson/document.h	/^    bool EndArray(SizeType elementCount) {$/;"	f	class:GenericDocument
EndArray	rapidjson/prettywriter.h	/^    bool EndArray(SizeType memberCount = 0) {$/;"	f	class:PrettyWriter
EndArray	rapidjson/reader.h	/^    bool EndArray(SizeType) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
EndArray	rapidjson/schema.h	/^    bool EndArray(Context& context, SizeType elementCount) const { $/;"	f	class:internal::Schema
EndArray	rapidjson/schema.h	/^    bool EndArray(SizeType elementCount) { $/;"	f	class:internal::Hasher
EndArray	rapidjson/schema.h	/^    bool EndArray(SizeType elementCount) {$/;"	f	class:GenericSchemaValidator
EndArray	rapidjson/writer.h	/^    bool EndArray(SizeType elementCount = 0) {$/;"	f	class:Writer
EndObject	rapidjson/document.h	/^    bool EndObject(SizeType memberCount) {$/;"	f	class:GenericDocument
EndObject	rapidjson/prettywriter.h	/^    bool EndObject(SizeType memberCount = 0) {$/;"	f	class:PrettyWriter
EndObject	rapidjson/reader.h	/^    bool EndObject(SizeType) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
EndObject	rapidjson/schema.h	/^    bool EndObject(Context& context, SizeType memberCount) const {$/;"	f	class:internal::Schema
EndObject	rapidjson/schema.h	/^    bool EndObject(SizeType memberCount) { $/;"	f	class:GenericSchemaValidator
EndObject	rapidjson/schema.h	/^    bool EndObject(SizeType memberCount) { $/;"	f	class:internal::Hasher
EndObject	rapidjson/writer.h	/^    bool EndObject(SizeType memberCount = 0) {$/;"	f	class:Writer
EndValue	rapidjson/schema.h	/^    RAPIDJSON_FORCEINLINE bool EndValue(Context& context) const {$/;"	f	class:internal::Schema
EndValue	rapidjson/schema.h	/^    bool EndValue() {$/;"	f	class:GenericSchemaValidator
EndValue	rapidjson/writer.h	/^    bool EndValue(bool ret) {$/;"	f	class:Writer
Erase	rapidjson/document.h	/^    ValueIterator Erase(ConstValueIterator first, ConstValueIterator last) const { return value_.Erase(first, last); }$/;"	f	class:GenericArray
Erase	rapidjson/document.h	/^    ValueIterator Erase(ConstValueIterator first, ConstValueIterator last) {$/;"	f	class:GenericValue
Erase	rapidjson/document.h	/^    ValueIterator Erase(ConstValueIterator pos) const { return value_.Erase(pos); }$/;"	f	class:GenericArray
Erase	rapidjson/document.h	/^    ValueIterator Erase(ConstValueIterator pos) {$/;"	f	class:GenericValue
Erase	rapidjson/pointer.h	/^    bool Erase(ValueType& root) const {$/;"	f	class:GenericPointer
EraseMember	rapidjson/document.h	/^    MemberIterator EraseMember(ConstMemberIterator first, ConstMemberIterator last) const { return value_.EraseMember(first, last); }$/;"	f	class:GenericObject
EraseMember	rapidjson/document.h	/^    MemberIterator EraseMember(ConstMemberIterator first, ConstMemberIterator last) {$/;"	f	class:GenericValue
EraseMember	rapidjson/document.h	/^    MemberIterator EraseMember(ConstMemberIterator pos) const { return value_.EraseMember(pos); }$/;"	f	class:GenericObject
EraseMember	rapidjson/document.h	/^    MemberIterator EraseMember(ConstMemberIterator pos) {$/;"	f	class:GenericValue
EraseMember	rapidjson/document.h	/^    bool EraseMember(const Ch* name) const { return value_.EraseMember(name); }$/;"	f	class:GenericObject
EraseMember	rapidjson/document.h	/^    bool EraseMember(const Ch* name) {$/;"	f	class:GenericValue
EraseMember	rapidjson/document.h	/^    bool EraseMember(const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
EraseMember	rapidjson/document.h	/^    bool EraseMember(const std::basic_string<Ch>& name) const { return EraseMember(ValueType(StringRef(name))); }$/;"	f	class:GenericObject
EraseMember	rapidjson/document.h	/^    bool EraseMember(const std::basic_string<Ch>& name) { return EraseMember(GenericValue(StringRef(name))); }$/;"	f	class:GenericValue
EraseMember	rapidjson/document.h	/^    template <typename SourceAllocator> bool EraseMember(const GenericValue<EncodingType, SourceAllocator>& name) const { return value_.EraseMember(name); }$/;"	f	class:GenericObject
EraseValueByPointer	rapidjson/pointer.h	/^bool EraseValueByPointer(T& root, const CharType(&source)[N]) {$/;"	f
EraseValueByPointer	rapidjson/pointer.h	/^bool EraseValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer) {$/;"	f
Eval	rapidjson/internal/regex.h	/^    bool Eval(Stack<Allocator>& operandStack, Operator op) {$/;"	f	class:internal::GenericRegex
EvalQuantifier	rapidjson/internal/regex.h	/^    bool EvalQuantifier(Stack<Allocator>& operandStack, unsigned n, unsigned m) {$/;"	f	class:internal::GenericRegex
EventCallBack	Channel.h	/^    typedef std::function<void()> EventCallBack; $/;"	t	class:Channel
EventList	EPollPoller.h	/^    typedef std::vector<struct epoll_event> EventList;$/;"	t	class:EPollPoller
EventLoop	EventLoop.cpp	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	EventLoop.h	/^class EventLoop : private noncopyable$/;"	c
EventLoopThread	EventLoopThread.cpp	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	EventLoopThread.h	/^class EventLoopThread : private noncopyable$/;"	c
EventLoopThreadPool	EventLoopThreadPool.cpp	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* loop)$/;"	f	class:EventLoopThreadPool
EventLoopThreadPool	EventLoopThreadPool.h	/^class EventLoopThreadPool : private noncopyable$/;"	c
EventLoopThreadPtr	EventLoopThreadPool.h	/^    typedef std::shared_ptr<EventLoopThread> EventLoopThreadPtr;$/;"	t	class:EventLoopThreadPool
Expand	rapidjson/internal/stack.h	/^    void Expand(size_t count) {$/;"	f	class:internal::Stack
Exponent	rapidjson/internal/ieee754.h	/^    int Exponent() const { return static_cast<int>(((u_ & kExponentMask) >> kSignificandSize) - kExponentBias); }$/;"	f	class:internal::Double
Extract	cppjieba/KeywordExtractor.hpp	/^  void Extract(const string& sentence, vector<Word>& keywords, size_t topN) const {$/;"	f	class:cppjieba::KeywordExtractor
Extract	cppjieba/KeywordExtractor.hpp	/^  void Extract(const string& sentence, vector<pair<string, double> >& keywords, size_t topN) const {$/;"	f	class:cppjieba::KeywordExtractor
Extract	cppjieba/KeywordExtractor.hpp	/^  void Extract(const string& sentence, vector<string>& keywords, size_t topN) const {$/;"	f	class:cppjieba::KeywordExtractor
Extract	cppjieba/TextRankExtractor.hpp	/^    void Extract(const string& sentence, vector<Word>& keywords, size_t topN, size_t span=5,size_t rankTime=10) const {$/;"	f	class:cppjieba::TextRankExtractor
Extract	cppjieba/TextRankExtractor.hpp	/^    void Extract(const string& sentence, vector<pair<string, double> >& keywords, size_t topN) const {$/;"	f	class:cppjieba::TextRankExtractor
Extract	cppjieba/TextRankExtractor.hpp	/^    void Extract(const string& sentence, vector<string>& keywords, size_t topN) const {$/;"	f	class:cppjieba::TextRankExtractor
FATAL	Logging.h	/^        FATAL,$/;"	e	enum:Logger::LogLevel
FalseToken	rapidjson/reader.h	/^        FalseToken,$/;"	e	enum:GenericReader::Token
FalseType	rapidjson/internal/meta.h	/^typedef BoolType<false> FalseType;$/;"	t	namespace:internal
FastPath	rapidjson/internal/strtod.h	/^inline double FastPath(double significand, int exp) {$/;"	f	namespace:internal
FileReadStream	rapidjson/filereadstream.h	/^    FileReadStream(std::FILE* fp, char* buffer, size_t bufferSize) : fp_(fp), buffer_(buffer), bufferSize_(bufferSize), bufferLast_(0), current_(buffer_), readCount_(0), count_(0), eof_(false) { $/;"	f	class:FileReadStream
FileReadStream	rapidjson/filereadstream.h	/^class FileReadStream {$/;"	c
FileWriteStream	rapidjson/filewritestream.h	/^    FileWriteStream(std::FILE* fp, char* buffer, size_t bufferSize) : fp_(fp), buffer_(buffer), bufferEnd_(buffer + bufferSize), current_(buffer_) { $/;"	f	class:FileWriteStream
FileWriteStream	rapidjson/filewritestream.h	/^class FileWriteStream {$/;"	c
Find	cppjieba/DictTrie.hpp	/^  const DictUnit* Find(RuneStrArray::const_iterator begin, RuneStrArray::const_iterator end) const {$/;"	f	class:cppjieba::DictTrie
Find	cppjieba/DictTrie.hpp	/^  void Find(RuneStrArray::const_iterator begin, $/;"	f	class:cppjieba::DictTrie
Find	cppjieba/Trie.hpp	/^  const DictUnit* Find(RuneStrArray::const_iterator begin, RuneStrArray::const_iterator end) const {$/;"	f	class:cppjieba::Trie
Find	cppjieba/Trie.hpp	/^  void Find(RuneStrArray::const_iterator begin, $/;"	f	class:cppjieba::Trie
FindMember	rapidjson/document.h	/^    ConstMemberIterator FindMember(const Ch* name) const { return const_cast<GenericValue&>(*this).FindMember(name); }$/;"	f	class:GenericValue
FindMember	rapidjson/document.h	/^    ConstMemberIterator FindMember(const std::basic_string<Ch>& name) const { return FindMember(GenericValue(StringRef(name))); }$/;"	f	class:GenericValue
FindMember	rapidjson/document.h	/^    MemberIterator FindMember(const Ch* name) const { return value_.FindMember(name); }$/;"	f	class:GenericObject
FindMember	rapidjson/document.h	/^    MemberIterator FindMember(const Ch* name) {$/;"	f	class:GenericValue
FindMember	rapidjson/document.h	/^    MemberIterator FindMember(const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
FindMember	rapidjson/document.h	/^    MemberIterator FindMember(const std::basic_string<Ch>& name) const { return value_.FindMember(name); }$/;"	f	class:GenericObject
FindMember	rapidjson/document.h	/^    MemberIterator FindMember(const std::basic_string<Ch>& name) { return FindMember(GenericValue(StringRef(name))); }$/;"	f	class:GenericValue
FindMember	rapidjson/document.h	/^    template <typename SourceAllocator> ConstMemberIterator FindMember(const GenericValue<Encoding, SourceAllocator>& name) const { return const_cast<GenericValue&>(*this).FindMember(name); }$/;"	f	class:GenericValue
FindMember	rapidjson/document.h	/^    template <typename SourceAllocator> MemberIterator FindMember(const GenericValue<EncodingType, SourceAllocator>& name) const { return value_.FindMember(name); }$/;"	f	class:GenericObject
FindPropertyIndex	rapidjson/schema.h	/^    bool FindPropertyIndex(const ValueType& name, SizeType* outIndex) const {$/;"	f	class:internal::Schema
Flag	rapidjson/document.h	/^    struct Flag {$/;"	s	class:GenericValue
Flush	rapidjson/encodedstream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); } $/;"	f	class:AutoUTFInputStream
Flush	rapidjson/encodedstream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); } $/;"	f	class:EncodedInputStream
Flush	rapidjson/encodedstream.h	/^    void Flush() { os_->Flush(); } $/;"	f	class:AutoUTFOutputStream
Flush	rapidjson/encodedstream.h	/^    void Flush() { os_.Flush(); }$/;"	f	class:EncodedOutputStream
Flush	rapidjson/encodedstream.h	/^    void Flush() {} $/;"	f	class:EncodedInputStream
Flush	rapidjson/filereadstream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); } $/;"	f	class:FileReadStream
Flush	rapidjson/filewritestream.h	/^    void Flush() {$/;"	f	class:FileWriteStream
Flush	rapidjson/istreamwrapper.h	/^    void Flush() { RAPIDJSON_ASSERT(false); }$/;"	f	class:BasicIStreamWrapper
Flush	rapidjson/memorybuffer.h	/^    void Flush() {}$/;"	f	struct:GenericMemoryBuffer
Flush	rapidjson/memorystream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); }$/;"	f	struct:MemoryStream
Flush	rapidjson/ostreamwrapper.h	/^    void Flush() {$/;"	f	class:BasicOStreamWrapper
Flush	rapidjson/stream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); }$/;"	f	struct:GenericStringStream
Flush	rapidjson/stream.h	/^    void Flush() { is_.Flush(); }$/;"	f	class:GenericStreamWrapper
Flush	rapidjson/stream.h	/^    void Flush() {}$/;"	f	struct:GenericInsituStringStream
Flush	rapidjson/stringbuffer.h	/^    void Flush() {}$/;"	f	class:GenericStringBuffer
Flush	rapidjson/writer.h	/^    void Flush() {$/;"	f	class:Writer
FlushCallBack	Logging.cpp	/^typedef std::function<void()> FlushCallBack;$/;"	t	file:
Frag	rapidjson/internal/regex.h	/^        Frag(SizeType s, SizeType o, SizeType m) : start(s), out(o), minIndex(m) {}$/;"	f	struct:internal::GenericRegex::Frag
Frag	rapidjson/internal/regex.h	/^    struct Frag {$/;"	s	class:internal::GenericRegex
Free	rapidjson/allocators.h	/^    static void Free(void *ptr) { (void)ptr; } \/\/ Do nothing$/;"	f	class:MemoryPoolAllocator
Free	rapidjson/allocators.h	/^    static void Free(void *ptr) { std::free(ptr); }$/;"	f	class:CrtAllocator
FreeState	rapidjson/schema.h	/^    virtual void FreeState(void* p) {$/;"	f	class:GenericSchemaValidator
FullSegment	cppjieba/FullSegment.hpp	/^  FullSegment(const DictTrie* dictTrie)$/;"	f	class:cppjieba::FullSegment
FullSegment	cppjieba/FullSegment.hpp	/^  FullSegment(const string& dictPath) {$/;"	f	class:cppjieba::FullSegment
FullSegment	cppjieba/FullSegment.hpp	/^class FullSegment: public SegmentBase {$/;"	c	namespace:cppjieba
Functor	EventLoop.h	/^    typedef std::function<void()> Functor;$/;"	t	class:EventLoop
FunctorList	EventLoop.h	/^    typedef std::vector<Functor> FunctorList;$/;"	t	class:EventLoop
GET	http/HttpRequest.h	/^        GET,$/;"	e	enum:HttpRequest::HttpMethod
GenericArray	rapidjson/document.h	/^    GenericArray(ValueType& value) : value_(value) {}$/;"	f	class:GenericArray
GenericArray	rapidjson/document.h	/^    GenericArray(const GenericArray& rhs) : value_(rhs.value_) {}$/;"	f	class:GenericArray
GenericArray	rapidjson/document.h	/^class GenericArray {$/;"	c
GenericDocument	rapidjson/document.h	/^    GenericDocument(Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity, StackAllocator* stackAllocator = 0) : $/;"	f	class:GenericDocument
GenericDocument	rapidjson/document.h	/^    explicit GenericDocument(Type type, Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity, StackAllocator* stackAllocator = 0) :$/;"	f	class:GenericDocument
GenericDocument	rapidjson/document.h	/^class GenericDocument : public GenericValue<Encoding, Allocator> {$/;"	c
GenericInsituStringStream	rapidjson/stream.h	/^    GenericInsituStringStream(Ch *src) : src_(src), dst_(0), head_(src) {}$/;"	f	struct:GenericInsituStringStream
GenericInsituStringStream	rapidjson/stream.h	/^struct GenericInsituStringStream {$/;"	s
GenericMember	rapidjson/document.h	/^struct GenericMember { $/;"	s
GenericMemberIterator	rapidjson/document.h	/^    GenericMemberIterator() : ptr_() {}$/;"	f	class:GenericMemberIterator
GenericMemberIterator	rapidjson/document.h	/^    GenericMemberIterator(const NonConstIterator & it) : ptr_(it.ptr_) {}$/;"	f	class:GenericMemberIterator
GenericMemberIterator	rapidjson/document.h	/^    explicit GenericMemberIterator(Pointer p) : ptr_(p) {}$/;"	f	class:GenericMemberIterator
GenericMemberIterator	rapidjson/document.h	/^class GenericMemberIterator$/;"	c
GenericMemberIterator	rapidjson/document.h	/^struct GenericMemberIterator<false,Encoding,Allocator> {$/;"	s
GenericMemberIterator	rapidjson/document.h	/^struct GenericMemberIterator<true,Encoding,Allocator> {$/;"	s
GenericMemoryBuffer	rapidjson/memorybuffer.h	/^    GenericMemoryBuffer(Allocator* allocator = 0, size_t capacity = kDefaultCapacity) : stack_(allocator, capacity) {}$/;"	f	struct:GenericMemoryBuffer
GenericMemoryBuffer	rapidjson/memorybuffer.h	/^struct GenericMemoryBuffer {$/;"	s
GenericObject	rapidjson/document.h	/^    GenericObject(ValueType& value) : value_(value) {}$/;"	f	class:GenericObject
GenericObject	rapidjson/document.h	/^    GenericObject(const GenericObject& rhs) : value_(rhs.value_) {}$/;"	f	class:GenericObject
GenericObject	rapidjson/document.h	/^class GenericObject {$/;"	c
GenericPointer	rapidjson/pointer.h	/^    GenericPointer(Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {}$/;"	f	class:GenericPointer
GenericPointer	rapidjson/pointer.h	/^    GenericPointer(const Ch* source, size_t length, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	rapidjson/pointer.h	/^    GenericPointer(const GenericPointer& rhs, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	rapidjson/pointer.h	/^    GenericPointer(const Token* tokens, size_t tokenCount) : allocator_(), ownAllocator_(), nameBuffer_(), tokens_(const_cast<Token*>(tokens)), tokenCount_(tokenCount), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {}$/;"	f	class:GenericPointer
GenericPointer	rapidjson/pointer.h	/^    explicit GenericPointer(const Ch* source, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	rapidjson/pointer.h	/^    explicit GenericPointer(const std::basic_string<Ch>& source, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	rapidjson/pointer.h	/^class GenericPointer {$/;"	c
GenericReader	rapidjson/reader.h	/^    GenericReader(StackAllocator* stackAllocator = 0, size_t stackCapacity = kDefaultStackCapacity) : stack_(stackAllocator, stackCapacity), parseResult_() {}$/;"	f	class:GenericReader
GenericReader	rapidjson/reader.h	/^class GenericReader {$/;"	c
GenericRegex	rapidjson/internal/regex.h	/^    GenericRegex(const Ch* source, Allocator* allocator = 0) : $/;"	f	class:internal::GenericRegex
GenericRegex	rapidjson/internal/regex.h	/^class GenericRegex {$/;"	c	namespace:internal
GenericRegexSearch	rapidjson/internal/regex.h	/^    GenericRegexSearch(const RegexType& regex, Allocator* allocator = 0) : $/;"	f	class:internal::GenericRegexSearch
GenericRegexSearch	rapidjson/internal/regex.h	/^class GenericRegexSearch {$/;"	c	namespace:internal
GenericSchemaDocument	rapidjson/schema.h	/^    explicit GenericSchemaDocument(const ValueType& document, IRemoteSchemaDocumentProviderType* remoteProvider = 0, Allocator* allocator = 0) :$/;"	f	class:GenericSchemaDocument
GenericSchemaDocument	rapidjson/schema.h	/^class GenericSchemaDocument {$/;"	c
GenericSchemaValidator	rapidjson/schema.h	/^    GenericSchemaValidator( $/;"	f	class:GenericSchemaValidator
GenericSchemaValidator	rapidjson/schema.h	/^    GenericSchemaValidator($/;"	f	class:GenericSchemaValidator
GenericSchemaValidator	rapidjson/schema.h	/^class GenericSchemaValidator :$/;"	c
GenericStreamWrapper	rapidjson/stream.h	/^    GenericStreamWrapper(InputStream& is): is_(is) {}$/;"	f	class:GenericStreamWrapper
GenericStreamWrapper	rapidjson/stream.h	/^class GenericStreamWrapper {$/;"	c
GenericStringBuffer	rapidjson/stringbuffer.h	/^    GenericStringBuffer(Allocator* allocator = 0, size_t capacity = kDefaultCapacity) : stack_(allocator, capacity) {}$/;"	f	class:GenericStringBuffer
GenericStringBuffer	rapidjson/stringbuffer.h	/^    GenericStringBuffer(GenericStringBuffer&& rhs) : stack_(std::move(rhs.stack_)) {}$/;"	f	class:GenericStringBuffer
GenericStringBuffer	rapidjson/stringbuffer.h	/^class GenericStringBuffer {$/;"	c
GenericStringRef	rapidjson/document.h	/^    GenericStringRef(const CharType* str, SizeType len)$/;"	f	struct:GenericStringRef
GenericStringRef	rapidjson/document.h	/^    GenericStringRef(const GenericStringRef& rhs) : s(rhs.s), length(rhs.length) {}$/;"	f	struct:GenericStringRef
GenericStringRef	rapidjson/document.h	/^    explicit GenericStringRef(const CharType* str)$/;"	f	struct:GenericStringRef
GenericStringRef	rapidjson/document.h	/^struct GenericStringRef {$/;"	s
GenericStringStream	rapidjson/stream.h	/^    GenericStringStream(const Ch *src) : src_(src), head_(src) {}$/;"	f	struct:GenericStringStream
GenericStringStream	rapidjson/stream.h	/^struct GenericStringStream {$/;"	s
GenericValue	rapidjson/document.h	/^    GenericValue(const Ch* s, SizeType length, Allocator& allocator) : data_() { SetStringRaw(StringRef(s, length), allocator); }$/;"	f	class:GenericValue
GenericValue	rapidjson/document.h	/^    GenericValue(const Ch*s, Allocator& allocator) : data_() { SetStringRaw(StringRef(s), allocator); }$/;"	f	class:GenericValue
GenericValue	rapidjson/document.h	/^    GenericValue(const GenericValue<Encoding,SourceAllocator>& rhs, Allocator& allocator, bool copyConstStrings = false) {$/;"	f	class:GenericValue
GenericValue	rapidjson/document.h	/^    GenericValue(const std::basic_string<Ch>& s, Allocator& allocator) : data_() { SetStringRaw(StringRef(s), allocator); }$/;"	f	class:GenericValue
GenericValue	rapidjson/document.h	/^class GenericValue {$/;"	c
Get	rapidjson/document.h	/^    T Get() const { return internal::TypeHelper<ValueType, T>::Get(*this); }$/;"	f	class:GenericValue
Get	rapidjson/document.h	/^    T Get() { return internal::TypeHelper<ValueType, T>::Get(*this); }$/;"	f	class:GenericValue
Get	rapidjson/document.h	/^    static ArrayType Get(ValueType& v) { return v.GetArray(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static ArrayType Get(const ValueType& v) { return v.GetArray(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static ObjectType Get(ValueType& v) { return v.GetObject(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static ObjectType Get(const ValueType& v) { return v.GetObject(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static StringType Get(const ValueType& v) { return StringType(v.GetString(), v.GetStringLength()); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static StringType Get(const ValueType& v) { return v.GetString(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static bool Get(const ValueType& v) { return v.GetBool(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static double Get(const ValueType& v) { return v.GetDouble(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static float Get(const ValueType& v) { return v.GetFloat(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static int Get(const ValueType& v) { return v.GetInt(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static int64_t Get(const ValueType& v) { return v.GetInt64(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static uint64_t Get(const ValueType& v) { return v.GetUint64(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/document.h	/^    static unsigned Get(const ValueType& v) { return v.GetUint(); }$/;"	f	struct:internal::TypeHelper
Get	rapidjson/pointer.h	/^    ValueType* Get(ValueType& root, size_t* unresolvedTokenIndex = 0) const {$/;"	f	class:GenericPointer
Get	rapidjson/pointer.h	/^    const ValueType* Get(const ValueType& root, size_t* unresolvedTokenIndex = 0) const { $/;"	f	class:GenericPointer
GetAllocator	rapidjson/document.h	/^    Allocator& GetAllocator() {$/;"	f	class:GenericDocument
GetAllocator	rapidjson/internal/stack.h	/^    Allocator& GetAllocator() {$/;"	f	class:internal::Stack
GetAllocator	rapidjson/pointer.h	/^    Allocator& GetAllocator() { return *allocator_; }$/;"	f	class:GenericPointer
GetArray	rapidjson/document.h	/^    Array GetArray() { RAPIDJSON_ASSERT(IsArray()); return Array(*this); }$/;"	f	class:GenericValue
GetArray	rapidjson/document.h	/^    ConstArray GetArray() const { RAPIDJSON_ASSERT(IsArray()); return ConstArray(*this); }$/;"	f	class:GenericValue
GetBool	rapidjson/document.h	/^    bool GetBool() const { RAPIDJSON_ASSERT(IsBool()); return data_.f.flags == kTrueFlag; }$/;"	f	class:GenericValue
GetBuffer	rapidjson/memorybuffer.h	/^    const Ch* GetBuffer() const {$/;"	f	struct:GenericMemoryBuffer
GetCachedPower	rapidjson/internal/diyfp.h	/^inline DiyFp GetCachedPower(int e, int* K) {$/;"	f	namespace:internal
GetCachedPower10	rapidjson/internal/diyfp.h	/^inline DiyFp GetCachedPower10(int exp, int *outExp) {$/;"	f	namespace:internal
GetCachedPowerByIndex	rapidjson/internal/diyfp.h	/^inline DiyFp GetCachedPowerByIndex(size_t index) {$/;"	f	namespace:internal
GetCapacity	rapidjson/internal/stack.h	/^    size_t GetCapacity() const { return static_cast<size_t>(stackEnd_ - stack_); }$/;"	f	class:internal::Stack
GetColumn	rapidjson/cursorstreamwrapper.h	/^    size_t GetColumn() const { return col_; }$/;"	f	class:CursorStreamWrapper
GetCount	rapidjson/internal/biginteger.h	/^    size_t GetCount() const { return count_; }$/;"	f	class:internal::BigInteger
GetDictTrie	cppjieba/Jieba.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::Jieba
GetDictTrie	cppjieba/MPSegment.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::MPSegment
GetDictTrie	cppjieba/MixSegment.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::MixSegment
GetDigit	rapidjson/internal/biginteger.h	/^    Type GetDigit(size_t index) const { RAPIDJSON_ASSERT(index < count_); return digits_[index]; }$/;"	f	class:internal::BigInteger
GetDigitsLut	rapidjson/internal/itoa.h	/^inline const char* GetDigitsLut() {$/;"	f	namespace:internal
GetDouble	rapidjson/document.h	/^    double GetDouble() const {$/;"	f	class:GenericValue
GetElementsPointer	rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE GenericValue* GetElementsPointer() const { return RAPIDJSON_GETPOINTER(GenericValue, data_.a.elements); }$/;"	f	class:GenericValue
GetEmitProb	cppjieba/HMMModel.hpp	/^  double GetEmitProb(const EmitProbMap* ptMp, Rune key, $/;"	f	struct:cppjieba::HMMModel
GetErrorOffset	rapidjson/document.h	/^    size_t GetErrorOffset() const { return parseResult_.Offset(); }$/;"	f	class:GenericDocument
GetErrorOffset	rapidjson/reader.h	/^    size_t GetErrorOffset() const { return parseResult_.Offset(); }$/;"	f	class:GenericReader
GetFloat	rapidjson/document.h	/^    float GetFloat() const {$/;"	f	class:GenericValue
GetHMMModel	cppjieba/Jieba.hpp	/^  const HMMModel* GetHMMModel() const {$/;"	f	class:cppjieba::Jieba
GetHashCode	rapidjson/schema.h	/^    uint64_t GetHashCode() const {$/;"	f	class:internal::Hasher
GetHashCode	rapidjson/schema.h	/^    virtual uint64_t GetHashCode(void* hasher) {$/;"	f	class:GenericSchemaValidator
GetInt	rapidjson/document.h	/^    int GetInt() const          { RAPIDJSON_ASSERT(data_.f.flags & kIntFlag);   return data_.n.i.i;   }$/;"	f	class:GenericValue
GetInt64	rapidjson/document.h	/^    int64_t GetInt64() const    { RAPIDJSON_ASSERT(data_.f.flags & kInt64Flag); return data_.n.i64; }$/;"	f	class:GenericValue
GetInvalidDocumentPointer	rapidjson/schema.h	/^    PointerType GetInvalidDocumentPointer() const {$/;"	f	class:GenericSchemaValidator
GetInvalidDocumentPointer	rapidjson/schema.h	/^    const PointerType& GetInvalidDocumentPointer() const { return invalidDocumentPointer_; }$/;"	f	class:SchemaValidatingReader
GetInvalidSchemaKeyword	rapidjson/schema.h	/^    const Ch* GetInvalidSchemaKeyword() const { return invalidSchemaKeyword_; }$/;"	f	class:SchemaValidatingReader
GetInvalidSchemaKeyword	rapidjson/schema.h	/^    const Ch* GetInvalidSchemaKeyword() const {$/;"	f	class:GenericSchemaValidator
GetInvalidSchemaPointer	rapidjson/schema.h	/^    PointerType GetInvalidSchemaPointer() const {$/;"	f	class:GenericSchemaValidator
GetInvalidSchemaPointer	rapidjson/schema.h	/^    const PointerType& GetInvalidSchemaPointer() const { return invalidSchemaPointer_; }$/;"	f	class:SchemaValidatingReader
GetLength	rapidjson/document.h	/^        inline SizeType GetLength() const       { return  static_cast<SizeType>(MaxSize -  str[LenPos]); }$/;"	f	struct:GenericValue::ShortString
GetLength	rapidjson/stringbuffer.h	/^    size_t GetLength() const { return stack_.GetSize() \/ sizeof(Ch); }$/;"	f	class:GenericStringBuffer
GetLine	cppjieba/HMMModel.hpp	/^  bool GetLine(ifstream& ifile, string& line) {$/;"	f	struct:cppjieba::HMMModel
GetLine	rapidjson/cursorstreamwrapper.h	/^    size_t GetLine() const { return line_; }$/;"	f	class:CursorStreamWrapper
GetMaxDecimalPlaces	rapidjson/writer.h	/^    int GetMaxDecimalPlaces() const {$/;"	f	class:Writer
GetMember	rapidjson/schema.h	/^    static const ValueType* GetMember(const ValueType& value, const ValueType& name) {$/;"	f	class:internal::Schema
GetMembersPointer	rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE Member* GetMembersPointer() const { return RAPIDJSON_GETPOINTER(Member, data_.o.members); }$/;"	f	class:GenericValue
GetMinWeight	cppjieba/DictTrie.hpp	/^  double GetMinWeight() const {$/;"	f	class:cppjieba::DictTrie
GetObject	rapidjson/document.h	/^    ConstObject GetObject() const { RAPIDJSON_ASSERT(IsObject()); return ConstObject(*this); }$/;"	f	class:GenericValue
GetObject	rapidjson/document.h	/^    Object GetObject() { RAPIDJSON_ASSERT(IsObject()); return Object(*this); }$/;"	f	class:GenericValue
GetParseError	rapidjson/document.h	/^    ParseErrorCode GetParseError() const { return parseResult_.Code(); }$/;"	f	class:GenericDocument
GetParseErrorCode	rapidjson/pointer.h	/^    PointerParseErrorCode GetParseErrorCode() const { return parseErrorCode_; }$/;"	f	class:GenericPointer
GetParseErrorCode	rapidjson/reader.h	/^    ParseErrorCode GetParseErrorCode() const { return parseResult_.Code(); }$/;"	f	class:GenericReader
GetParseErrorFunc	rapidjson/error/error.h	/^typedef const RAPIDJSON_ERROR_CHARTYPE* (*GetParseErrorFunc)(ParseErrorCode);$/;"	t
GetParseErrorOffset	rapidjson/pointer.h	/^    size_t GetParseErrorOffset() const { return parseErrorOffset_; }$/;"	f	class:GenericPointer
GetParseError_En	rapidjson/error/en.h	/^inline const RAPIDJSON_ERROR_CHARTYPE* GetParseError_En(ParseErrorCode parseErrorCode) {$/;"	f
GetParseResult	rapidjson/schema.h	/^    const ParseResult& GetParseResult() const { return parseResult_; }$/;"	f	class:SchemaValidatingReader
GetPointer	rapidjson/schema.h	/^    PointerType GetPointer(const SchemaType* schema) const {$/;"	f	class:GenericSchemaDocument
GetRange	rapidjson/encodings.h	/^    static unsigned char GetRange(unsigned char c) {$/;"	f	struct:UTF8
GetRange	rapidjson/internal/regex.h	/^    Range& GetRange(SizeType index) {$/;"	f	class:internal::GenericRegex
GetRange	rapidjson/internal/regex.h	/^    const Range& GetRange(SizeType index) const {$/;"	f	class:internal::GenericRegex
GetRoot	rapidjson/schema.h	/^    const SchemaType& GetRoot() const { return *root_; }$/;"	f	class:GenericSchemaDocument
GetSchema	rapidjson/schema.h	/^    const SchemaType* GetSchema(const PointerType& pointer) const {$/;"	f	class:GenericSchemaDocument
GetSize	rapidjson/internal/stack.h	/^    size_t GetSize() const { return static_cast<size_t>(stackTop_ - stack_); }$/;"	f	class:internal::Stack
GetSize	rapidjson/memorybuffer.h	/^    size_t GetSize() const { return stack_.GetSize(); }$/;"	f	struct:GenericMemoryBuffer
GetSize	rapidjson/stringbuffer.h	/^    size_t GetSize() const { return stack_.GetSize(); }$/;"	f	class:GenericStringBuffer
GetStackCapacity	rapidjson/document.h	/^    size_t GetStackCapacity() const { return stack_.GetCapacity(); }$/;"	f	class:GenericDocument
GetState	rapidjson/internal/regex.h	/^    State& GetState(SizeType index) {$/;"	f	class:internal::GenericRegex
GetState	rapidjson/internal/regex.h	/^    const State& GetState(SizeType index) const {$/;"	f	class:internal::GenericRegex
GetStateAllocator	rapidjson/schema.h	/^    StateAllocator& GetStateAllocator() {$/;"	f	class:GenericSchemaValidator
GetStateSetSize	rapidjson/internal/regex.h	/^    size_t GetStateSetSize() const {$/;"	f	class:internal::GenericRegexSearch
GetString	rapidjson/document.h	/^    const Ch* GetString() const { RAPIDJSON_ASSERT(IsString()); return (data_.f.flags & kInlineStrFlag) ? data_.ss.str : GetStringPointer(); }$/;"	f	class:GenericValue
GetString	rapidjson/stringbuffer.h	/^    const Ch* GetString() const {$/;"	f	class:GenericStringBuffer
GetStringFromRunes	cppjieba/Unicode.hpp	/^inline string GetStringFromRunes(const string& s, RuneStrArray::const_iterator left, RuneStrArray::const_iterator right) {$/;"	f	namespace:cppjieba
GetStringLength	rapidjson/document.h	/^    SizeType GetStringLength() const { RAPIDJSON_ASSERT(IsString()); return ((data_.f.flags & kInlineStrFlag) ? (data_.ss.GetLength()) : data_.s.length); }$/;"	f	class:GenericValue
GetStringPointer	rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE const Ch* GetStringPointer() const { return RAPIDJSON_GETPOINTER(Ch, data_.s.str); }$/;"	f	class:GenericValue
GetStringsFromWords	cppjieba/Unicode.hpp	/^inline void GetStringsFromWords(const vector<Word>& words, vector<string>& strs) {$/;"	f	namespace:cppjieba
GetTokenCount	rapidjson/pointer.h	/^    size_t GetTokenCount() const { return tokenCount_; }$/;"	f	class:GenericPointer
GetTokens	rapidjson/pointer.h	/^    const Token* GetTokens() const { return tokens_; }$/;"	f	class:GenericPointer
GetType	rapidjson/document.h	/^    Type GetType()  const { return static_cast<Type>(data_.f.flags & kTypeMask); }$/;"	f	class:GenericValue
GetType	rapidjson/encodedstream.h	/^    UTFType GetType() const { return type_; }$/;"	f	class:AutoUTFInputStream
GetType	rapidjson/encodedstream.h	/^    UTFType GetType() const { return type_; }$/;"	f	class:AutoUTFOutputStream
GetType	rapidjson/stream.h	/^    UTFType GetType() const { return is_.GetType(); }$/;"	f	class:GenericStreamWrapper
GetTypeless	rapidjson/schema.h	/^    const SchemaType* GetTypeless() const { return typeless_; }$/;"	f	class:GenericSchemaDocument
GetUint	rapidjson/document.h	/^    unsigned GetUint() const    { RAPIDJSON_ASSERT(data_.f.flags & kUintFlag);  return data_.n.u.u;   }$/;"	f	class:GenericValue
GetUint64	rapidjson/document.h	/^    uint64_t GetUint64() const  { RAPIDJSON_ASSERT(data_.f.flags & kUint64Flag); return data_.n.u64; }$/;"	f	class:GenericValue
GetValueByPointer	rapidjson/pointer.h	/^const typename T::ValueType* GetValueByPointer(const T& root, const CharType(&source)[N], size_t* unresolvedTokenIndex = 0) {$/;"	f
GetValueByPointer	rapidjson/pointer.h	/^const typename T::ValueType* GetValueByPointer(const T& root, const GenericPointer<typename T::ValueType>& pointer, size_t* unresolvedTokenIndex = 0) {$/;"	f
GetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType* GetValueByPointer(T& root, const CharType (&source)[N], size_t* unresolvedTokenIndex = 0) {$/;"	f
GetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType* GetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, size_t* unresolvedTokenIndex = 0) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], T2 defaultValue) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, T2 defaultValue) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^GetValueByPointerWithDefault(T& root, const CharType(&source)[N], T2 defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, T2 defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const std::basic_string<typename DocumentType::Ch>& defaultValue) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const typename DocumentType::Ch* defaultValue) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const typename DocumentType::ValueType& defaultValue) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const std::basic_string<typename DocumentType::Ch>& defaultValue) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::Ch* defaultValue) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::ValueType& defaultValue) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const std::basic_string<typename T::Ch>& defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const typename T::Ch* defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const typename T::ValueType& defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const std::basic_string<typename T::Ch>& defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::Ch* defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::ValueType& defaultValue, typename T::AllocatorType& a) {$/;"	f
GetWithDefault	rapidjson/pointer.h	/^    GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, T defaultValue) const {$/;"	f	class:GenericPointer
GetWithDefault	rapidjson/pointer.h	/^    GetWithDefault(ValueType& root, T defaultValue, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
GetWithDefault	rapidjson/pointer.h	/^    ValueType& GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const Ch* defaultValue) const {$/;"	f	class:GenericPointer
GetWithDefault	rapidjson/pointer.h	/^    ValueType& GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const ValueType& defaultValue) const {$/;"	f	class:GenericPointer
GetWithDefault	rapidjson/pointer.h	/^    ValueType& GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const std::basic_string<Ch>& defaultValue) const {$/;"	f	class:GenericPointer
GetWithDefault	rapidjson/pointer.h	/^    ValueType& GetWithDefault(ValueType& root, const Ch* defaultValue, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
GetWithDefault	rapidjson/pointer.h	/^    ValueType& GetWithDefault(ValueType& root, const ValueType& defaultValue, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
GetWithDefault	rapidjson/pointer.h	/^    ValueType& GetWithDefault(ValueType& root, const std::basic_string<Ch>& defaultValue, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
GetWordFromRunes	cppjieba/Unicode.hpp	/^inline Word GetWordFromRunes(const string& s, RuneStrArray::const_iterator left, RuneStrArray::const_iterator right) {$/;"	f	namespace:cppjieba
GetWordsFromWordRanges	cppjieba/Unicode.hpp	/^inline vector<Word> GetWordsFromWordRanges(const string& s, const vector<WordRange>& wrs) {$/;"	f	namespace:cppjieba
GetWordsFromWordRanges	cppjieba/Unicode.hpp	/^inline void GetWordsFromWordRanges(const string& s, const vector<WordRange>& wrs, vector<Word>& words) {$/;"	f	namespace:cppjieba
Graph	cppjieba/TextRankExtractor.hpp	/^      typedef std::map<Node,Edges> Graph;$/;"	t	class:cppjieba::TextRankExtractor::WordGraph
Grisu2	rapidjson/internal/dtoa.h	/^inline void Grisu2(double value, char* buffer, int* length, int* K) {$/;"	f	namespace:internal
GrisuRound	rapidjson/internal/dtoa.h	/^inline void GrisuRound(char* buffer, int len, uint64_t delta, uint64_t rest, uint64_t ten_kappa, uint64_t wp_w) {$/;"	f	namespace:internal
HMMModel	cppjieba/HMMModel.hpp	/^  HMMModel(const string& modelPath) {$/;"	f	struct:cppjieba::HMMModel
HMMModel	cppjieba/HMMModel.hpp	/^struct HMMModel {$/;"	s	namespace:cppjieba
HMMSegment	cppjieba/HMMSegment.hpp	/^  HMMSegment(const HMMModel* model) $/;"	f	class:cppjieba::HMMSegment
HMMSegment	cppjieba/HMMSegment.hpp	/^  HMMSegment(const string& filePath)$/;"	f	class:cppjieba::HMMSegment
HMMSegment	cppjieba/HMMSegment.hpp	/^class HMMSegment: public SegmentBase {$/;"	c	namespace:cppjieba
HMM_PATH	http/HttpServer.cpp	/^static const char* const HMM_PATH = "dict\/hmm_model.utf8";$/;"	v	file:
HandleError	rapidjson/reader.h	/^    void HandleError(IterativeParsingState src, InputStream& is) {$/;"	f	class:GenericReader
HandleRefSchema	rapidjson/schema.h	/^    bool HandleRefSchema(const PointerType& source, const SchemaType** schema, const ValueType& v, const ValueType& document) {$/;"	f	class:GenericSchemaDocument
HasAllocator	rapidjson/internal/stack.h	/^    bool HasAllocator() const {$/;"	f	class:internal::Stack
HasBOM	rapidjson/encodedstream.h	/^    bool HasBOM() const { return hasBOM_; }$/;"	f	class:AutoUTFInputStream
HasBOM	rapidjson/stream.h	/^    bool HasBOM() const { return is_.HasBOM(); }$/;"	f	class:GenericStreamWrapper
HasMember	rapidjson/document.h	/^    bool HasMember(const Ch* name) const { return FindMember(name) != MemberEnd(); }$/;"	f	class:GenericValue
HasMember	rapidjson/document.h	/^    bool HasMember(const Ch* name) const { return value_.HasMember(name); }$/;"	f	class:GenericObject
HasMember	rapidjson/document.h	/^    bool HasMember(const GenericValue<Encoding, SourceAllocator>& name) const { return FindMember(name) != MemberEnd(); }$/;"	f	class:GenericValue
HasMember	rapidjson/document.h	/^    bool HasMember(const std::basic_string<Ch>& name) const { return FindMember(name) != MemberEnd(); }$/;"	f	class:GenericValue
HasMember	rapidjson/document.h	/^    bool HasMember(const std::basic_string<Ch>& name) const { return value_.HasMember(name); }$/;"	f	class:GenericObject
HasMember	rapidjson/document.h	/^    template <typename SourceAllocator> bool HasMember(const GenericValue<EncodingType, SourceAllocator>& name) const { return value_.HasMember(name); }$/;"	f	class:GenericObject
HasNext	cppjieba/PreFilter.hpp	/^  bool HasNext() const {$/;"	f	class:cppjieba::PreFilter
HasParseError	rapidjson/document.h	/^    bool HasParseError() const { return parseResult_.IsError(); }$/;"	f	class:GenericDocument
HasParseError	rapidjson/reader.h	/^    bool HasParseError() const { return parseResult_.IsError(); }$/;"	f	class:GenericReader
Hash	rapidjson/schema.h	/^    static uint64_t Hash(uint64_t h, uint64_t d) {$/;"	f	class:internal::Hasher
HashCodeArray	rapidjson/schema.h	/^    typedef GenericValue<UTF8<>, StateAllocator> HashCodeArray;$/;"	t	class:GenericSchemaValidator
Hasher	rapidjson/schema.h	/^    Hasher(Allocator* allocator = 0, size_t stackCapacity = kDefaultSize) : stack_(allocator, stackCapacity) {}$/;"	f	class:internal::Hasher
Hasher	rapidjson/schema.h	/^class Hasher {$/;"	c	namespace:internal
HasherType	rapidjson/schema.h	/^    typedef internal::Hasher<EncodingType, StateAllocator> HasherType;$/;"	t	class:GenericSchemaValidator
Host	rapidjson/internal/meta.h	/^    struct Host {$/;"	s	struct:internal::IsBaseOfImpl
HttpMethod	http/HttpRequest.h	/^    enum HttpMethod$/;"	g	class:HttpRequest
HttpRequest	http/HttpRequest.cpp	/^HttpRequest::HttpRequest()$/;"	f	class:HttpRequest
HttpRequest	http/HttpRequest.h	/^class HttpRequest : noncopyable$/;"	c
HttpResponse	http/HttpResponse.cpp	/^HttpResponse::HttpResponse()$/;"	f	class:HttpResponse
HttpResponse	http/HttpResponse.h	/^class HttpResponse$/;"	c
HttpServer	http/HttpServer.cpp	/^HttpServer::HttpServer(EventLoop* loop, const InetAddress& localaddr)$/;"	f	class:HttpServer
HttpServer	http/HttpServer.h	/^class HttpServer : private noncopyable$/;"	c
I	rapidjson/document.h	/^        struct I {$/;"	s	union:GenericValue::Number
IDF_PATH	http/HttpServer.cpp	/^static const char* const IDF_PATH = "dict\/idf.utf8";$/;"	v	file:
IGenericRemoteSchemaDocumentProvider	rapidjson/schema.h	/^class IGenericRemoteSchemaDocumentProvider {$/;"	c
INFO	Logging.h	/^        INFO,$/;"	e	enum:Logger::LogLevel
INT16_C	rapidjson/msinttypes/stdint.h	277;"	d
INT16_C	rapidjson/msinttypes/stdint.h	55;"	d
INT16_C	rapidjson/msinttypes/stdint.h	66;"	d
INT16_MAX	rapidjson/msinttypes/stdint.h	181;"	d
INT16_MIN	rapidjson/msinttypes/stdint.h	180;"	d
INT32_C	rapidjson/msinttypes/stdint.h	278;"	d
INT32_C	rapidjson/msinttypes/stdint.h	56;"	d
INT32_C	rapidjson/msinttypes/stdint.h	67;"	d
INT32_MAX	rapidjson/msinttypes/stdint.h	183;"	d
INT32_MIN	rapidjson/msinttypes/stdint.h	182;"	d
INT64_C	rapidjson/msinttypes/stdint.h	279;"	d
INT64_C	rapidjson/msinttypes/stdint.h	57;"	d
INT64_C	rapidjson/msinttypes/stdint.h	68;"	d
INT64_MAX	rapidjson/msinttypes/stdint.h	185;"	d
INT64_MIN	rapidjson/msinttypes/stdint.h	184;"	d
INT8_C	rapidjson/msinttypes/stdint.h	276;"	d
INT8_C	rapidjson/msinttypes/stdint.h	54;"	d
INT8_C	rapidjson/msinttypes/stdint.h	65;"	d
INT8_MAX	rapidjson/msinttypes/stdint.h	179;"	d
INT8_MIN	rapidjson/msinttypes/stdint.h	178;"	d
INTMAX_C	rapidjson/msinttypes/stdint.h	290;"	d
INTMAX_C	rapidjson/msinttypes/stdint.h	79;"	d
INTMAX_MAX	rapidjson/msinttypes/stdint.h	232;"	d
INTMAX_MIN	rapidjson/msinttypes/stdint.h	231;"	d
INTPTR_MAX	rapidjson/msinttypes/stdint.h	222;"	d
INTPTR_MAX	rapidjson/msinttypes/stdint.h	226;"	d
INTPTR_MIN	rapidjson/msinttypes/stdint.h	221;"	d
INTPTR_MIN	rapidjson/msinttypes/stdint.h	225;"	d
INT_FAST16_MAX	rapidjson/msinttypes/stdint.h	209;"	d
INT_FAST16_MIN	rapidjson/msinttypes/stdint.h	208;"	d
INT_FAST32_MAX	rapidjson/msinttypes/stdint.h	211;"	d
INT_FAST32_MIN	rapidjson/msinttypes/stdint.h	210;"	d
INT_FAST64_MAX	rapidjson/msinttypes/stdint.h	213;"	d
INT_FAST64_MIN	rapidjson/msinttypes/stdint.h	212;"	d
INT_FAST8_MAX	rapidjson/msinttypes/stdint.h	207;"	d
INT_FAST8_MIN	rapidjson/msinttypes/stdint.h	206;"	d
INT_LEAST16_MAX	rapidjson/msinttypes/stdint.h	195;"	d
INT_LEAST16_MIN	rapidjson/msinttypes/stdint.h	194;"	d
INT_LEAST32_MAX	rapidjson/msinttypes/stdint.h	197;"	d
INT_LEAST32_MIN	rapidjson/msinttypes/stdint.h	196;"	d
INT_LEAST64_MAX	rapidjson/msinttypes/stdint.h	199;"	d
INT_LEAST64_MIN	rapidjson/msinttypes/stdint.h	198;"	d
INT_LEAST8_MAX	rapidjson/msinttypes/stdint.h	193;"	d
INT_LEAST8_MIN	rapidjson/msinttypes/stdint.h	192;"	d
IRemoteSchemaDocumentProvider	rapidjson/fwd.h	/^typedef IGenericRemoteSchemaDocumentProvider<SchemaDocument> IRemoteSchemaDocumentProvider;$/;"	t
IRemoteSchemaDocumentProvider	rapidjson/schema.h	/^typedef IGenericRemoteSchemaDocumentProvider<SchemaDocument> IRemoteSchemaDocumentProvider;$/;"	t
IRemoteSchemaDocumentProviderType	rapidjson/schema.h	/^    typedef IGenericRemoteSchemaDocumentProvider<GenericSchemaDocument> IRemoteSchemaDocumentProviderType;$/;"	t	class:GenericSchemaDocument
ISchemaStateFactory	rapidjson/schema.h	/^class ISchemaStateFactory {$/;"	c	namespace:internal
ISchemaValidator	rapidjson/schema.h	/^class ISchemaValidator {$/;"	c	namespace:internal
IStreamWrapper	rapidjson/istreamwrapper.h	/^typedef BasicIStreamWrapper<std::istream> IStreamWrapper;$/;"	t
Impl	Logging.cpp	/^Logger::Impl::Impl(Logger::LogLevel level,$/;"	f	class:Logger::Impl
Impl	Logging.h	/^    class Impl$/;"	c	class:Logger
Impl	http/HttpRequest.cpp	/^HttpRequest::Impl::Impl()$/;"	f	class:HttpRequest::Impl
Impl	http/HttpRequest.cpp	/^class HttpRequest::Impl$/;"	c	class:HttpRequest	file:
Impl	http/HttpResponse.cpp	/^HttpResponse::Impl::Impl()$/;"	f	class:HttpResponse::Impl
Impl	http/HttpResponse.cpp	/^class HttpResponse::Impl$/;"	c	class:HttpResponse	file:
ImplicitConcatenation	rapidjson/internal/regex.h	/^    void ImplicitConcatenation(Stack<Allocator>& atomCountStack, Stack<Allocator>& operatorStack) {$/;"	f	class:internal::GenericRegex
InetAddress	InetAddress.cpp	/^InetAddress::InetAddress(const InetAddress& addr)$/;"	f	class:InetAddress
InetAddress	InetAddress.cpp	/^InetAddress::InetAddress(const int port)$/;"	f	class:InetAddress
InetAddress	InetAddress.cpp	/^InetAddress::InetAddress(const std::string& ip, const int port)$/;"	f	class:InetAddress
InetAddress	InetAddress.h	/^class InetAddress : private noncopyable$/;"	c
Init	cppjieba/DictTrie.hpp	/^  void Init(const string& dict_path, const string& user_dict_paths, UserWordWeightOption user_word_weight_opt) {$/;"	f	class:cppjieba::DictTrie
InsertNode	cppjieba/Trie.hpp	/^  void InsertNode(const Unicode& key, const DictUnit* ptValue) {$/;"	f	class:cppjieba::Trie
InsertUserWord	cppjieba/DictTrie.hpp	/^  bool InsertUserWord(const string& word, const string& tag = UNKNOWN_TAG) {$/;"	f	class:cppjieba::DictTrie
InsertUserWord	cppjieba/Jieba.hpp	/^  bool InsertUserWord(const string& word, const string& tag = UNKNOWN_TAG) {$/;"	f	class:cppjieba::Jieba
InsituStringStream	rapidjson/fwd.h	/^typedef GenericInsituStringStream<UTF8<char> > InsituStringStream;$/;"	t
InsituStringStream	rapidjson/stream.h	/^typedef GenericInsituStringStream<UTF8<> > InsituStringStream;$/;"	t
Int	rapidjson/document.h	/^    bool Int(int i) { new (stack_.template Push<ValueType>()) ValueType(i); return true; }$/;"	f	class:GenericDocument
Int	rapidjson/prettywriter.h	/^    bool Int(int i)             { PrettyPrefix(kNumberType); return Base::WriteInt(i); }$/;"	f	class:PrettyWriter
Int	rapidjson/reader.h	/^    bool Int(int) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Int	rapidjson/schema.h	/^    bool Int(Context& context, int i) const {$/;"	f	class:internal::Schema
Int	rapidjson/schema.h	/^    bool Int(int i)         { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Int,    (CurrentContext(), i), (i)); }$/;"	f	class:GenericSchemaValidator
Int	rapidjson/schema.h	/^    bool Int(int i) { Number n; n.u.i = i; n.d = static_cast<double>(i); return WriteNumber(n); }$/;"	f	class:internal::Hasher
Int	rapidjson/writer.h	/^    bool Int(int i)             { Prefix(kNumberType); return EndValue(WriteInt(i)); }$/;"	f	class:Writer
Int64	rapidjson/document.h	/^    bool Int64(int64_t i) { new (stack_.template Push<ValueType>()) ValueType(i); return true; }$/;"	f	class:GenericDocument
Int64	rapidjson/prettywriter.h	/^    bool Int64(int64_t i64)     { PrettyPrefix(kNumberType); return Base::WriteInt64(i64); }$/;"	f	class:PrettyWriter
Int64	rapidjson/reader.h	/^    bool Int64(int64_t) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Int64	rapidjson/schema.h	/^    bool Int64(Context& context, int64_t i) const {$/;"	f	class:internal::Schema
Int64	rapidjson/schema.h	/^    bool Int64(int64_t i)   { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Int64,  (CurrentContext(), i), (i)); }$/;"	f	class:GenericSchemaValidator
Int64	rapidjson/schema.h	/^    bool Int64(int64_t i) { Number n; n.u.i = i; n.d = static_cast<double>(i); return WriteNumber(n); }$/;"	f	class:internal::Hasher
Int64	rapidjson/writer.h	/^    bool Int64(int64_t i64)     { Prefix(kNumberType); return EndValue(WriteInt64(i64)); }$/;"	f	class:Writer
IntegerExponent	rapidjson/internal/ieee754.h	/^    int IntegerExponent() const { return (IsNormal() ? Exponent() : kDenormalExponent) - kSignificandSize; }$/;"	f	class:internal::Double
IntegerSignificand	rapidjson/internal/ieee754.h	/^    uint64_t IntegerSignificand() const { return IsNormal() ? Significand() | kHiddenBit : Significand(); }$/;"	f	class:internal::Double
InternalCut	cppjieba/HMMSegment.hpp	/^  void InternalCut(RuneStrArray::const_iterator begin, RuneStrArray::const_iterator end, vector<WordRange>& res) const {$/;"	f	class:cppjieba::HMMSegment
Is	rapidjson/document.h	/^    bool Is() const { return internal::TypeHelper<ValueType, T>::Is(*this); }$/;"	f	class:GenericValue
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsArray(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsBool(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsDouble(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsFloat(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsInt(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsInt64(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsObject(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsString(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsUint(); }$/;"	f	struct:internal::TypeHelper
Is	rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsUint64(); }$/;"	f	struct:internal::TypeHelper
IsAllAscii	cppjieba/QuerySegment.hpp	/^  bool IsAllAscii(const Unicode& s) const {$/;"	f	class:cppjieba::QuerySegment
IsAllAscii	cppjieba/Unicode.hpp	/^  bool IsAllAscii() const {$/;"	f	struct:cppjieba::WordRange
IsArray	rapidjson/document.h	/^    bool IsArray()  const { return data_.f.flags == kArrayFlag; }$/;"	f	class:GenericValue
IsBaseOf	rapidjson/internal/meta.h	/^template <typename B, typename D> struct IsBaseOf$/;"	s	namespace:internal
IsBaseOfImpl	rapidjson/internal/meta.h	/^template<typename B, typename D> struct IsBaseOfImpl {$/;"	s	namespace:internal
IsBool	rapidjson/document.h	/^    bool IsBool()   const { return (data_.f.flags & kBoolFlag) != 0; }$/;"	f	class:GenericValue
IsComplete	rapidjson/writer.h	/^    bool IsComplete() const {$/;"	f	class:Writer
IsConst	rapidjson/internal/meta.h	/^template <typename T> struct IsConst : FalseType {};$/;"	s	namespace:internal
IsConst	rapidjson/internal/meta.h	/^template <typename T> struct IsConst<const T> : TrueType {};$/;"	s	namespace:internal
IsDouble	rapidjson/document.h	/^    bool IsDouble() const { return (data_.f.flags & kDoubleFlag) != 0; }$/;"	f	class:GenericValue
IsError	rapidjson/error/error.h	/^    bool IsError() const { return code_ != kParseErrorNone; }$/;"	f	struct:ParseResult
IsFalse	rapidjson/document.h	/^    bool IsFalse()  const { return data_.f.flags == kFalseFlag; }$/;"	f	class:GenericValue
IsFloat	rapidjson/document.h	/^    bool IsFloat() const  {$/;"	f	class:GenericValue
IsGenericValue	rapidjson/document.h	/^template <typename T> struct IsGenericValue : IsGenericValueImpl<T>::Type {};$/;"	s	namespace:internal
IsGenericValueImpl	rapidjson/document.h	/^struct IsGenericValueImpl : FalseType {};$/;"	s	namespace:internal
IsGenericValueImpl	rapidjson/document.h	/^template <typename T> struct IsGenericValueImpl<T, typename Void<typename T::EncodingType>::Type, typename Void<typename T::AllocatorType>::Type>$/;"	s	namespace:internal
IsInf	rapidjson/internal/ieee754.h	/^    bool IsInf() const { return (u_ & kExponentMask) == kExponentMask && Significand() == 0; }$/;"	f	class:internal::Double
IsInt	rapidjson/document.h	/^    bool IsInt()    const { return (data_.f.flags & kIntFlag) != 0; }$/;"	f	class:GenericValue
IsInt64	rapidjson/document.h	/^    bool IsInt64()  const { return (data_.f.flags & kInt64Flag) != 0; }$/;"	f	class:GenericValue
IsIterativeParsingCompleteState	rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE bool IsIterativeParsingCompleteState(IterativeParsingState s) {$/;"	f	class:GenericReader
IsIterativeParsingDelimiterState	rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE bool IsIterativeParsingDelimiterState(IterativeParsingState s) {$/;"	f	class:GenericReader
IsLosslessDouble	rapidjson/document.h	/^    bool IsLosslessDouble() const {$/;"	f	class:GenericValue
IsLosslessFloat	rapidjson/document.h	/^    bool IsLosslessFloat() const {$/;"	f	class:GenericValue
IsMoreConst	rapidjson/internal/meta.h	/^struct IsMoreConst$/;"	s	namespace:internal
IsNan	rapidjson/internal/ieee754.h	/^    bool IsNan() const { return (u_ & kExponentMask) == kExponentMask && Significand() != 0; }$/;"	f	class:internal::Double
IsNanOrInf	rapidjson/internal/ieee754.h	/^    bool IsNanOrInf() const { return (u_ & kExponentMask) == kExponentMask; }$/;"	f	class:internal::Double
IsNormal	rapidjson/internal/ieee754.h	/^    bool IsNormal() const { return (u_ & kExponentMask) != 0 || Significand() == 0; }$/;"	f	class:internal::Double
IsNull	rapidjson/document.h	/^    bool IsNull()   const { return data_.f.flags == kNullFlag; }$/;"	f	class:GenericValue
IsNumber	rapidjson/document.h	/^    bool IsNumber() const { return (data_.f.flags & kNumberFlag) != 0; }$/;"	f	class:GenericValue
IsObject	rapidjson/document.h	/^    bool IsObject() const { return data_.f.flags == kObjectFlag; }$/;"	f	class:GenericValue
IsPatternMatch	rapidjson/schema.h	/^    static bool IsPatternMatch(const RegexType* pattern, const Ch *str, SizeType length) {$/;"	f	class:internal::Schema
IsPatternMatch	rapidjson/schema.h	/^    static bool IsPatternMatch(const RegexType* pattern, const Ch *str, SizeType) {$/;"	f	class:internal::Schema
IsPatternMatch	rapidjson/schema.h	/^    static bool IsPatternMatch(const RegexType*, const Ch *, SizeType) { return true; }$/;"	f	class:internal::Schema
IsPointer	rapidjson/internal/meta.h	/^template <typename T> struct IsPointer : FalseType {};$/;"	s	namespace:internal
IsPointer	rapidjson/internal/meta.h	/^template <typename T> struct IsPointer<T*> : TrueType {};$/;"	s	namespace:internal
IsSame	rapidjson/internal/meta.h	/^template <typename T, typename U> struct IsSame : FalseType {};$/;"	s	namespace:internal
IsSame	rapidjson/internal/meta.h	/^template <typename T> struct IsSame<T, T> : TrueType {};$/;"	s	namespace:internal
IsSingleWord	cppjieba/Unicode.hpp	/^inline bool IsSingleWord(const string& str) {$/;"	f	namespace:cppjieba
IsString	rapidjson/document.h	/^    bool IsString() const { return (data_.f.flags & kStringFlag) != 0; }$/;"	f	class:GenericValue
IsTrue	rapidjson/document.h	/^    bool IsTrue()   const { return data_.f.flags == kTrueFlag; }$/;"	f	class:GenericValue
IsUint	rapidjson/document.h	/^    bool IsUint()   const { return (data_.f.flags & kUintFlag) != 0; }$/;"	f	class:GenericValue
IsUint64	rapidjson/document.h	/^    bool IsUint64() const { return (data_.f.flags & kUint64Flag) != 0; }$/;"	f	class:GenericValue
IsUserDictSingleChineseWord	cppjieba/DictTrie.hpp	/^  bool IsUserDictSingleChineseWord(const Rune& word) const {$/;"	f	class:cppjieba::DictTrie
IsUserDictSingleChineseWord	cppjieba/MPSegment.hpp	/^  bool IsUserDictSingleChineseWord(const Rune& value) const {$/;"	f	class:cppjieba::MPSegment
IsValid	rapidjson/internal/regex.h	/^    bool IsValid() const {$/;"	f	class:internal::GenericRegex
IsValid	rapidjson/pointer.h	/^        bool IsValid() const { return valid_; }$/;"	f	class:GenericPointer::PercentDecodeStream
IsValid	rapidjson/pointer.h	/^    bool IsValid() const { return parseErrorCode_ == kPointerParseErrorNone; }$/;"	f	class:GenericPointer
IsValid	rapidjson/schema.h	/^    bool IsValid() const { return isValid_; }$/;"	f	class:SchemaValidatingReader
IsValid	rapidjson/schema.h	/^    bool IsValid() const { return stack_.GetSize() == sizeof(uint64_t); }$/;"	f	class:internal::Hasher
IsValid	rapidjson/schema.h	/^    virtual bool IsValid() const { return valid_; }$/;"	f	class:GenericSchemaValidator
IsZero	rapidjson/internal/biginteger.h	/^    bool IsZero() const { return count_ == 1 && digits_[0] == 0; }$/;"	f	class:internal::BigInteger
IsZero	rapidjson/internal/ieee754.h	/^    bool IsZero() const { return (u_ & (kExponentMask | kSignificandMask)) == 0; }$/;"	f	class:internal::Double
IterativeParse	rapidjson/reader.h	/^    ParseResult IterativeParse(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
IterativeParseComplete	rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE bool IterativeParseComplete() {$/;"	f	class:GenericReader
IterativeParseInit	rapidjson/reader.h	/^    void IterativeParseInit() {$/;"	f	class:GenericReader
IterativeParseNext	rapidjson/reader.h	/^    bool IterativeParseNext(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
IterativeParsingArrayFinishState	rapidjson/reader.h	/^        IterativeParsingArrayFinishState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingArrayInitialState	rapidjson/reader.h	/^        IterativeParsingArrayInitialState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingElementDelimiterState	rapidjson/reader.h	/^        IterativeParsingElementDelimiterState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingElementState	rapidjson/reader.h	/^        IterativeParsingElementState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingErrorState	rapidjson/reader.h	/^        IterativeParsingErrorState,      \/\/ sink states at top$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingFinishState	rapidjson/reader.h	/^        IterativeParsingFinishState = 0, \/\/ sink states at top$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingKeyValueDelimiterState	rapidjson/reader.h	/^        IterativeParsingKeyValueDelimiterState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingMemberDelimiterState	rapidjson/reader.h	/^        IterativeParsingMemberDelimiterState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingMemberKeyState	rapidjson/reader.h	/^        IterativeParsingMemberKeyState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingMemberValueState	rapidjson/reader.h	/^        IterativeParsingMemberValueState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingObjectFinishState	rapidjson/reader.h	/^        IterativeParsingObjectFinishState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingObjectInitialState	rapidjson/reader.h	/^        IterativeParsingObjectInitialState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingStartState	rapidjson/reader.h	/^        IterativeParsingStartState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingState	rapidjson/reader.h	/^    enum IterativeParsingState {$/;"	g	class:GenericReader
IterativeParsingValueState	rapidjson/reader.h	/^        IterativeParsingValueState,$/;"	e	enum:GenericReader::IterativeParsingState
Iterator	rapidjson/document.h	/^    typedef GenericMember<Encoding,Allocator>* Iterator;$/;"	t	struct:GenericMemberIterator
Iterator	rapidjson/document.h	/^    typedef GenericMemberIterator Iterator;$/;"	t	class:GenericMemberIterator
Iterator	rapidjson/document.h	/^    typedef const GenericMember<Encoding,Allocator>* Iterator;$/;"	t	struct:GenericMemberIterator
Jieba	cppjieba/Jieba.hpp	/^  Jieba(const string& dict_path, $/;"	f	class:cppjieba::Jieba
Jieba	cppjieba/Jieba.hpp	/^class Jieba {$/;"	c	namespace:cppjieba
Key	rapidjson/document.h	/^    bool Key(const Ch* str, SizeType length, bool copy) { return String(str, length, copy); }$/;"	f	class:GenericDocument
Key	rapidjson/prettywriter.h	/^    bool Key(const Ch* str) { return Key(str, internal::StrLen(str)); }$/;"	f	class:PrettyWriter
Key	rapidjson/prettywriter.h	/^    bool Key(const Ch* str, SizeType length, bool copy = false) { return String(str, length, copy); }$/;"	f	class:PrettyWriter
Key	rapidjson/prettywriter.h	/^    bool Key(const std::basic_string<Ch>& str) {$/;"	f	class:PrettyWriter
Key	rapidjson/reader.h	/^    bool Key(const Ch* str, SizeType len, bool copy) { return static_cast<Override&>(*this).String(str, len, copy); }$/;"	f	struct:BaseReaderHandler
Key	rapidjson/schema.h	/^    bool Key(Context& context, const Ch* str, SizeType len, bool) const {$/;"	f	class:internal::Schema
Key	rapidjson/schema.h	/^    bool Key(const Ch* str, SizeType len, bool copy) { return String(str, len, copy); }$/;"	f	class:internal::Hasher
Key	rapidjson/schema.h	/^    bool Key(const Ch* str, SizeType len, bool copy) {$/;"	f	class:GenericSchemaValidator
Key	rapidjson/writer.h	/^    bool Key(const Ch* const& str) { return Key(str, internal::StrLen(str)); }$/;"	f	class:Writer
Key	rapidjson/writer.h	/^    bool Key(const Ch* str, SizeType length, bool copy = false) { return String(str, length, copy); }$/;"	f	class:Writer
Key	rapidjson/writer.h	/^    bool Key(const std::basic_string<Ch>& str)$/;"	f	class:Writer
KeywordExtractor	cppjieba/KeywordExtractor.hpp	/^  KeywordExtractor(const DictTrie* dictTrie, $/;"	f	class:cppjieba::KeywordExtractor
KeywordExtractor	cppjieba/KeywordExtractor.hpp	/^  KeywordExtractor(const string& dictPath, $/;"	f	class:cppjieba::KeywordExtractor
KeywordExtractor	cppjieba/KeywordExtractor.hpp	/^class KeywordExtractor {$/;"	c	namespace:cppjieba
LDFLAGS	Makefile	/^LDFLAGS = -lpthread$/;"	m
LDFLAGS	database/Makefile	/^LDFLAGS = -lpthread -lmysqlclient$/;"	m
LDFLAGS	http/Makefile	/^LDFLAGS = -lpthread -lmysqlclient $/;"	m
LOG_DEBUG	Logging.h	46;"	d
LOG_ERROR	Logging.h	47;"	d
LOG_FATAL	Logging.h	49;"	d
LOG_INFO	Logging.h	48;"	d
LOG_TRACE	Logging.h	45;"	d
LeftBracketToken	rapidjson/reader.h	/^        LeftBracketToken = 0,$/;"	e	enum:GenericReader::Token
LeftCurlyBracketToken	rapidjson/reader.h	/^        LeftCurlyBracketToken,$/;"	e	enum:GenericReader::Token
LenPos	rapidjson/document.h	/^        enum { MaxChars = sizeof(static_cast<Flag*>(0)->payload) \/ sizeof(Ch), MaxSize = MaxChars - 1, LenPos = MaxSize };$/;"	e	enum:GenericValue::ShortString::__anon2
Length	cppjieba/Unicode.hpp	/^  size_t Length() const {$/;"	f	struct:cppjieba::WordRange
Length	rapidjson/reader.h	/^        size_t Length() const { return length_; }$/;"	f	class:GenericReader::StackStream
Length	rapidjson/reader.h	/^        size_t Length() { return 0; }$/;"	f	class:GenericReader::NumberStream
Length	rapidjson/reader.h	/^        size_t Length() { return stackStream.Length(); }$/;"	f	class:GenericReader::NumberStream
Level	rapidjson/writer.h	/^        Level(bool inArray_) : valueCount(0), inArray(inArray_) {}$/;"	f	struct:Writer::Level
Level	rapidjson/writer.h	/^    struct Level {$/;"	s	class:Writer
LoadDict	cppjieba/DictTrie.hpp	/^  void LoadDict(const string& filePath) {$/;"	f	class:cppjieba::DictTrie
LoadEmitProb	cppjieba/HMMModel.hpp	/^  bool LoadEmitProb(const string& line, EmitProbMap& mp) {$/;"	f	struct:cppjieba::HMMModel
LoadIdfDict	cppjieba/KeywordExtractor.hpp	/^  void LoadIdfDict(const string& idfPath) {$/;"	f	class:cppjieba::KeywordExtractor
LoadModel	cppjieba/HMMModel.hpp	/^  void LoadModel(const string& filePath) {$/;"	f	struct:cppjieba::HMMModel
LoadStopWordDict	cppjieba/KeywordExtractor.hpp	/^  void LoadStopWordDict(const string& filePath) {$/;"	f	class:cppjieba::KeywordExtractor
LoadStopWordDict	cppjieba/TextRankExtractor.hpp	/^    void LoadStopWordDict(const string& filePath) {$/;"	f	class:cppjieba::TextRankExtractor
LoadUserDict	cppjieba/DictTrie.hpp	/^  void LoadUserDict(const string& filePaths) {$/;"	f	class:cppjieba::DictTrie
LocWord	cppjieba/Jieba.hpp	/^  struct LocWord {$/;"	s	class:cppjieba::Jieba
LogLevel	Logging.h	/^    enum LogLevel$/;"	g	class:Logger
LogStream	LogStream.h	/^class LogStream : private noncopyable$/;"	c
Logger	Logging.cpp	/^Logger::Logger(Logger::LogLevel level,$/;"	f	class:Logger
Logger	Logging.h	/^class Logger : private noncopyable$/;"	c
LookupTag	cppjieba/Jieba.hpp	/^  string LookupTag(const string &str) const {$/;"	f	class:cppjieba::Jieba
LookupTag	cppjieba/MixSegment.hpp	/^  string LookupTag(const string &str) const {$/;"	f	class:cppjieba::MixSegment
LookupTag	cppjieba/PosTagger.hpp	/^  string LookupTag(const string &str, const SegmentTagged& segment) const {$/;"	f	class:cppjieba::PosTagger
M	cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon16
MAX_DOUBLE	cppjieba/DictTrie.hpp	/^const double MAX_DOUBLE = 3.14e+100;$/;"	m	namespace:cppjieba
MAX_WORD_LENGTH	cppjieba/Trie.hpp	/^const size_t MAX_WORD_LENGTH = 512;$/;"	m	namespace:cppjieba
MIN_DOUBLE	cppjieba/DictTrie.hpp	/^const double MIN_DOUBLE = -3.14e+100;$/;"	m	namespace:cppjieba
MPSegment	cppjieba/MPSegment.hpp	/^  MPSegment(const DictTrie* dictTrie)$/;"	f	class:cppjieba::MPSegment
MPSegment	cppjieba/MPSegment.hpp	/^  MPSegment(const string& dictPath, const string& userDictPath = "")$/;"	f	class:cppjieba::MPSegment
MPSegment	cppjieba/MPSegment.hpp	/^class MPSegment: public SegmentTagged {$/;"	c	namespace:cppjieba
MakeNodeInfo	cppjieba/DictTrie.hpp	/^  bool MakeNodeInfo(DictUnit& node_info,$/;"	f	class:cppjieba::DictTrie
Malloc	rapidjson/allocators.h	/^    void* Malloc(size_t size) { $/;"	f	class:CrtAllocator
Malloc	rapidjson/allocators.h	/^    void* Malloc(size_t size) {$/;"	f	class:MemoryPoolAllocator
MallocState	rapidjson/schema.h	/^    virtual void* MallocState(size_t size) {$/;"	f	class:GenericSchemaValidator
Match	rapidjson/internal/regex.h	/^    bool Match(InputStream& is) {$/;"	f	class:internal::GenericRegexSearch
Match	rapidjson/internal/regex.h	/^    bool Match(const Ch* s) {$/;"	f	class:internal::GenericRegexSearch
MatchRange	rapidjson/internal/regex.h	/^    bool MatchRange(SizeType rangeIndex, unsigned codepoint) const {$/;"	f	class:internal::GenericRegexSearch
MaxChars	rapidjson/document.h	/^        enum { MaxChars = sizeof(static_cast<Flag*>(0)->payload) \/ sizeof(Ch), MaxSize = MaxChars - 1, LenPos = MaxSize };$/;"	e	enum:GenericValue::ShortString::__anon2
MaxSize	rapidjson/document.h	/^        enum { MaxChars = sizeof(static_cast<Flag*>(0)->payload) \/ sizeof(Ch), MaxSize = MaxChars - 1, LenPos = MaxSize };$/;"	e	enum:GenericValue::ShortString::__anon2
MaybeAddConst	rapidjson/internal/meta.h	/^template <bool Constify, typename T> struct MaybeAddConst : SelectIfCond<Constify, const T, T> {};$/;"	s	namespace:internal
Member	rapidjson/document.h	/^    typedef GenericMember<Encoding, Allocator> Member;$/;"	t	class:GenericValue
MemberBegin	rapidjson/document.h	/^    ConstMemberIterator MemberBegin() const { RAPIDJSON_ASSERT(IsObject()); return ConstMemberIterator(GetMembersPointer()); }$/;"	f	class:GenericValue
MemberBegin	rapidjson/document.h	/^    MemberIterator MemberBegin()            { RAPIDJSON_ASSERT(IsObject()); return MemberIterator(GetMembersPointer()); }$/;"	f	class:GenericValue
MemberBegin	rapidjson/document.h	/^    MemberIterator MemberBegin() const { return value_.MemberBegin(); }$/;"	f	class:GenericObject
MemberCapacity	rapidjson/document.h	/^    SizeType MemberCapacity() const { RAPIDJSON_ASSERT(IsObject()); return data_.o.capacity; }$/;"	f	class:GenericValue
MemberCapacity	rapidjson/document.h	/^    SizeType MemberCapacity() const { return value_.MemberCapacity(); }$/;"	f	class:GenericObject
MemberCount	rapidjson/document.h	/^    SizeType MemberCount() const { RAPIDJSON_ASSERT(IsObject()); return data_.o.size; }$/;"	f	class:GenericValue
MemberCount	rapidjson/document.h	/^    SizeType MemberCount() const { return value_.MemberCount(); }$/;"	f	class:GenericObject
MemberEnd	rapidjson/document.h	/^    ConstMemberIterator MemberEnd() const   { RAPIDJSON_ASSERT(IsObject()); return ConstMemberIterator(GetMembersPointer() + data_.o.size); }$/;"	f	class:GenericValue
MemberEnd	rapidjson/document.h	/^    MemberIterator MemberEnd()              { RAPIDJSON_ASSERT(IsObject()); return MemberIterator(GetMembersPointer() + data_.o.size); }$/;"	f	class:GenericValue
MemberEnd	rapidjson/document.h	/^    MemberIterator MemberEnd() const { return value_.MemberEnd(); }$/;"	f	class:GenericObject
MemberIterator	rapidjson/document.h	/^    typedef GenericMemberIterator<Const, typename ValueT::EncodingType, typename ValueT::AllocatorType> MemberIterator;  \/\/ This may be const or non-const iterator$/;"	t	class:GenericObject
MemberIterator	rapidjson/document.h	/^    typedef typename GenericMemberIterator<false,Encoding,Allocator>::Iterator MemberIterator;  \/\/!< Member iterator for iterating in object.$/;"	t	class:GenericValue
MemberReserve	rapidjson/document.h	/^    GenericObject MemberReserve(SizeType newCapacity, AllocatorType &allocator) const { value_.MemberReserve(newCapacity, allocator); return *this; }$/;"	f	class:GenericObject
MemberReserve	rapidjson/document.h	/^    GenericValue& MemberReserve(SizeType newCapacity, Allocator &allocator) {$/;"	f	class:GenericValue
MemoryBuffer	rapidjson/fwd.h	/^typedef GenericMemoryBuffer<CrtAllocator> MemoryBuffer;$/;"	t
MemoryBuffer	rapidjson/memorybuffer.h	/^typedef GenericMemoryBuffer<> MemoryBuffer;$/;"	t
MemoryPoolAllocator	rapidjson/allocators.h	/^    MemoryPoolAllocator(size_t chunkSize = kDefaultChunkCapacity, BaseAllocator* baseAllocator = 0) : $/;"	f	class:MemoryPoolAllocator
MemoryPoolAllocator	rapidjson/allocators.h	/^    MemoryPoolAllocator(void *buffer, size_t size, size_t chunkSize = kDefaultChunkCapacity, BaseAllocator* baseAllocator = 0) :$/;"	f	class:MemoryPoolAllocator
MemoryPoolAllocator	rapidjson/allocators.h	/^class MemoryPoolAllocator {$/;"	c
MemoryStream	rapidjson/memorystream.h	/^    MemoryStream(const Ch *src, size_t size) : src_(src), begin_(src), end_(src + size), size_(size) {}$/;"	f	struct:MemoryStream
MemoryStream	rapidjson/memorystream.h	/^struct MemoryStream {$/;"	s
MessageCallBack	CallBack.h	/^typedef std::function<void(const TcpConnectionPtr&, Buffer&)> MessageCallBack;$/;"	t
Min	rapidjson/internal/regex.h	/^    static SizeType Min(SizeType a, SizeType b) { return a < b ? a : b; }$/;"	f	class:internal::GenericRegex
Min3	rapidjson/internal/strtod.h	/^inline T Min3(T a, T b, T c) {$/;"	f	namespace:internal
MixSegment	cppjieba/MixSegment.hpp	/^  MixSegment(const DictTrie* dictTrie, const HMMModel* model) $/;"	f	class:cppjieba::MixSegment
MixSegment	cppjieba/MixSegment.hpp	/^  MixSegment(const string& mpSegDict, const string& hmmSegDict, $/;"	f	class:cppjieba::MixSegment
MixSegment	cppjieba/MixSegment.hpp	/^class MixSegment: public SegmentTagged {$/;"	c	namespace:cppjieba
MulAdd64	rapidjson/internal/biginteger.h	/^    static uint64_t MulAdd64(uint64_t a, uint64_t b, uint64_t k, uint64_t* outHigh) {$/;"	f	class:internal::BigInteger
MultiplyPow5	rapidjson/internal/biginteger.h	/^    BigInteger& MultiplyPow5(unsigned exp) {$/;"	f	class:internal::BigInteger
MutexLock	MutexLock.cpp	/^MutexLock::MutexLock()$/;"	f	class:MutexLock
MutexLock	MutexLock.h	/^class MutexLock : private noncopyable$/;"	c
MutexLockGuard	MutexLockGuard.h	/^    MutexLockGuard(pthread_mutex_t& mutex)$/;"	f	class:MutexLockGuard
MutexLockGuard	MutexLockGuard.h	/^class MutexLockGuard : private noncopyable$/;"	c
N	rapidjson/reader.h	1791;"	d
N	rapidjson/reader.h	1805;"	d
N16	rapidjson/reader.h	1792;"	d
N16	rapidjson/reader.h	1806;"	d
NONE	http/HttpRequest.h	/^        NONE,$/;"	e	enum:HttpRequest::HttpMethod
NUMS_LOG_LEVELS	Logging.h	/^        NUMS_LOG_LEVELS$/;"	e	enum:Logger::LogLevel
NUMS_METHOD	http/HttpRequest.h	/^        NUMS_METHOD$/;"	e	enum:HttpRequest::HttpMethod
NeedPercentEncode	rapidjson/pointer.h	/^    bool NeedPercentEncode(Ch c) const {$/;"	f	class:GenericPointer
NewConnectionCallBack	Acceptor.h	/^    typedef std::function<void(int, const InetAddress&)> NewConnectionCallBack;$/;"	t	class:Acceptor
NewRange	rapidjson/internal/regex.h	/^    SizeType NewRange(unsigned codepoint) {$/;"	f	class:internal::GenericRegex
NewState	rapidjson/internal/regex.h	/^    SizeType NewState(SizeType out, SizeType out1, unsigned codepoint) {$/;"	f	class:internal::GenericRegex
Next	cppjieba/PreFilter.hpp	/^  Range Next() {$/;"	f	class:cppjieba::PreFilter
NextMap	cppjieba/Trie.hpp	/^  typedef unordered_map<TrieKey, TrieNode*> NextMap;$/;"	t	class:cppjieba::TrieNode
NextPositiveDouble	rapidjson/internal/ieee754.h	/^    double NextPositiveDouble() const {$/;"	f	class:internal::Double
No	rapidjson/internal/meta.h	/^    typedef char (&No) [2];$/;"	t	struct:internal::IsBaseOfImpl
Node	cppjieba/TextRankExtractor.hpp	/^      typedef string Node;$/;"	t	class:cppjieba::TextRankExtractor::WordGraph
NodeSet	cppjieba/TextRankExtractor.hpp	/^      typedef std::set<Node> NodeSet;$/;"	t	class:cppjieba::TextRankExtractor::WordGraph
NonConstIterator	rapidjson/document.h	/^    typedef GenericMemberIterator<false,Encoding,Allocator> NonConstIterator;$/;"	t	class:GenericMemberIterator
Normalize	rapidjson/internal/diyfp.h	/^    DiyFp Normalize() const {$/;"	f	struct:internal::DiyFp
NormalizeBoundary	rapidjson/internal/diyfp.h	/^    DiyFp NormalizeBoundary() const {$/;"	f	struct:internal::DiyFp
NormalizedBoundaries	rapidjson/internal/diyfp.h	/^    void NormalizedBoundaries(DiyFp* minus, DiyFp* plus) const {$/;"	f	struct:internal::DiyFp
NotExpr	rapidjson/internal/meta.h	/^template <typename C> struct NotExpr  : SelectIf<C,FalseType,TrueType>::Type {};$/;"	s	namespace:internal
NotNullStrLen	rapidjson/document.h	/^    SizeType NotNullStrLen(const CharType* str) {$/;"	f	struct:GenericStringRef
Null	rapidjson/document.h	/^    bool Null() { new (stack_.template Push<ValueType>()) ValueType(); return true; }$/;"	f	class:GenericDocument
Null	rapidjson/prettywriter.h	/^    bool Null()                 { PrettyPrefix(kNullType);   return Base::WriteNull(); }$/;"	f	class:PrettyWriter
Null	rapidjson/reader.h	/^    bool Null() { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Null	rapidjson/schema.h	/^    bool Null()             { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Null,   (CurrentContext()   ), ( )); }$/;"	f	class:GenericSchemaValidator
Null	rapidjson/schema.h	/^    bool Null() { return WriteType(kNullType); }$/;"	f	class:internal::Hasher
Null	rapidjson/schema.h	/^    bool Null(Context& context) const { $/;"	f	class:internal::Schema
Null	rapidjson/writer.h	/^    bool Null()                 { Prefix(kNullType);   return EndValue(WriteNull()); }$/;"	f	class:Writer
NullToken	rapidjson/reader.h	/^        NullToken,$/;"	e	enum:GenericReader::Token
Number	rapidjson/document.h	/^    union Number {$/;"	u	class:GenericValue
Number	rapidjson/schema.h	/^    struct Number {$/;"	s	class:internal::Hasher
NumberStream	rapidjson/reader.h	/^        NumberStream(GenericReader& reader, InputStream& is) : Base(reader, is) {}$/;"	f	class:GenericReader::NumberStream
NumberStream	rapidjson/reader.h	/^        NumberStream(GenericReader& reader, InputStream& is) : Base(reader, is), stackStream(reader.stack_) {}$/;"	f	class:GenericReader::NumberStream
NumberStream	rapidjson/reader.h	/^        NumberStream(GenericReader& reader, InputStream& s) : is(s) { (void)reader;  }$/;"	f	class:GenericReader::NumberStream
NumberStream	rapidjson/reader.h	/^    class NumberStream<InputStream, false, false> {$/;"	c	class:GenericReader
NumberStream	rapidjson/reader.h	/^    class NumberStream<InputStream, true, false> : public NumberStream<InputStream, false, false> {$/;"	c	class:GenericReader
NumberStream	rapidjson/reader.h	/^    class NumberStream<InputStream, true, true> : public NumberStream<InputStream, true, false> {$/;"	c	class:GenericReader
NumberToken	rapidjson/reader.h	/^        NumberToken,$/;"	e	enum:GenericReader::Token
NumbersRule	cppjieba/HMMSegment.hpp	/^  RuneStrArray::const_iterator NumbersRule(RuneStrArray::const_iterator begin, RuneStrArray::const_iterator end) const {$/;"	f	class:cppjieba::HMMSegment
OBJS	Makefile	/^OBJS = $(patsubst %.c, ${DIR_OBJ}\/%.o, $(patsubst %.cpp, ${DIR_OBJ}\/%.o,$(dir))  )$/;"	m
OBJS	database/Makefile	/^OBJS = $(patsubst %.c, ${DIR_OBJ}\/%.o, $(patsubst %.cpp, ${DIR_OBJ}\/%.o,$(dir))  )$/;"	m
OBJS	http/Makefile	/^OBJS =  $(patsubst %.c, ${DIR_OBJ}\/%.o, $(patsubst %.cpp, ${DIR_OBJ}\/%.o,$(dir))  )$/;"	m
OStreamWrapper	rapidjson/ostreamwrapper.h	/^typedef BasicOStreamWrapper<std::ostream> OStreamWrapper;$/;"	t
Object	rapidjson/document.h	/^    typedef GenericObject<false, ValueT> Object;$/;"	t	class:GenericObject
Object	rapidjson/document.h	/^    typedef GenericObject<false, ValueType> Object;$/;"	t	class:GenericValue
ObjectData	rapidjson/document.h	/^    struct ObjectData {$/;"	s	class:GenericValue
ObjectEmpty	rapidjson/document.h	/^    bool ObjectEmpty() const { RAPIDJSON_ASSERT(IsObject()); return data_.o.size == 0; }$/;"	f	class:GenericValue
ObjectEmpty	rapidjson/document.h	/^    bool ObjectEmpty() const { return value_.ObjectEmpty(); }$/;"	f	class:GenericObject
ObjectType	rapidjson/document.h	/^    typedef typename ValueType::ConstObject ObjectType;$/;"	t	struct:internal::TypeHelper
ObjectType	rapidjson/document.h	/^    typedef typename ValueType::Object ObjectType;$/;"	t	struct:internal::TypeHelper
Offset	rapidjson/error/error.h	/^    size_t Offset() const { return offset_; }$/;"	f	struct:ParseResult
Operator	rapidjson/internal/regex.h	/^    enum Operator {$/;"	g	class:internal::GenericRegex
OrExpr	rapidjson/internal/meta.h	/^template <typename C1, typename C2> struct OrExpr  : OrExprCond<C1::Value, C2::Value>::Type {};$/;"	s	namespace:internal
OrExprCond	rapidjson/internal/meta.h	/^template <> struct OrExprCond<false, false> : FalseType {};$/;"	s	namespace:internal
OrExprCond	rapidjson/internal/meta.h	/^template <bool Cond1, bool Cond2> struct OrExprCond : TrueType {};$/;"	s	namespace:internal
OuputCallBack	Logging.cpp	/^typedef std::function<void(const char*, int)> OuputCallBack;$/;"	t	file:
Override	rapidjson/reader.h	/^    typedef typename internal::SelectIf<internal::IsSame<Derived, void>, BaseReaderHandler, Derived>::Type Override;$/;"	t	struct:BaseReaderHandler
PASS_WORD	http/HttpServer.cpp	/^static const string PASS_WORD = "3764819";$/;"	v	file:
PORT_NUM	http/HttpServer.cpp	/^static const int PORT_NUM = 3306;$/;"	v	file:
POST	http/HttpRequest.h	/^        POST,$/;"	e	enum:HttpRequest::HttpMethod
POS_ENG	cppjieba/PosTagger.hpp	/^static const char* const POS_ENG = "eng";$/;"	m	namespace:cppjieba
POS_M	cppjieba/PosTagger.hpp	/^static const char* const POS_M = "m";$/;"	m	namespace:cppjieba
POS_X	cppjieba/PosTagger.hpp	/^static const char* const POS_X = "x";$/;"	m	namespace:cppjieba
PRIX16	rapidjson/msinttypes/inttypes.h	118;"	d
PRIX32	rapidjson/msinttypes/inttypes.h	131;"	d
PRIX64	rapidjson/msinttypes/inttypes.h	144;"	d
PRIX8	rapidjson/msinttypes/inttypes.h	105;"	d
PRIXFAST16	rapidjson/msinttypes/inttypes.h	126;"	d
PRIXFAST32	rapidjson/msinttypes/inttypes.h	139;"	d
PRIXFAST64	rapidjson/msinttypes/inttypes.h	152;"	d
PRIXFAST8	rapidjson/msinttypes/inttypes.h	113;"	d
PRIXLEAST16	rapidjson/msinttypes/inttypes.h	122;"	d
PRIXLEAST32	rapidjson/msinttypes/inttypes.h	135;"	d
PRIXLEAST64	rapidjson/msinttypes/inttypes.h	148;"	d
PRIXLEAST8	rapidjson/msinttypes/inttypes.h	109;"	d
PRIXMAX	rapidjson/msinttypes/inttypes.h	157;"	d
PRIXPTR	rapidjson/msinttypes/inttypes.h	162;"	d
PRId16	rapidjson/msinttypes/inttypes.h	74;"	d
PRId32	rapidjson/msinttypes/inttypes.h	81;"	d
PRId64	rapidjson/msinttypes/inttypes.h	88;"	d
PRId8	rapidjson/msinttypes/inttypes.h	67;"	d
PRIdFAST16	rapidjson/msinttypes/inttypes.h	78;"	d
PRIdFAST32	rapidjson/msinttypes/inttypes.h	85;"	d
PRIdFAST64	rapidjson/msinttypes/inttypes.h	92;"	d
PRIdFAST8	rapidjson/msinttypes/inttypes.h	71;"	d
PRIdLEAST16	rapidjson/msinttypes/inttypes.h	76;"	d
PRIdLEAST32	rapidjson/msinttypes/inttypes.h	83;"	d
PRIdLEAST64	rapidjson/msinttypes/inttypes.h	90;"	d
PRIdLEAST8	rapidjson/msinttypes/inttypes.h	69;"	d
PRIdMAX	rapidjson/msinttypes/inttypes.h	95;"	d
PRIdPTR	rapidjson/msinttypes/inttypes.h	98;"	d
PRIi16	rapidjson/msinttypes/inttypes.h	75;"	d
PRIi32	rapidjson/msinttypes/inttypes.h	82;"	d
PRIi64	rapidjson/msinttypes/inttypes.h	89;"	d
PRIi8	rapidjson/msinttypes/inttypes.h	68;"	d
PRIiFAST16	rapidjson/msinttypes/inttypes.h	79;"	d
PRIiFAST32	rapidjson/msinttypes/inttypes.h	86;"	d
PRIiFAST64	rapidjson/msinttypes/inttypes.h	93;"	d
PRIiFAST8	rapidjson/msinttypes/inttypes.h	72;"	d
PRIiLEAST16	rapidjson/msinttypes/inttypes.h	77;"	d
PRIiLEAST32	rapidjson/msinttypes/inttypes.h	84;"	d
PRIiLEAST64	rapidjson/msinttypes/inttypes.h	91;"	d
PRIiLEAST8	rapidjson/msinttypes/inttypes.h	70;"	d
PRIiMAX	rapidjson/msinttypes/inttypes.h	96;"	d
PRIiPTR	rapidjson/msinttypes/inttypes.h	99;"	d
PRIo16	rapidjson/msinttypes/inttypes.h	115;"	d
PRIo32	rapidjson/msinttypes/inttypes.h	128;"	d
PRIo64	rapidjson/msinttypes/inttypes.h	141;"	d
PRIo8	rapidjson/msinttypes/inttypes.h	102;"	d
PRIoFAST16	rapidjson/msinttypes/inttypes.h	123;"	d
PRIoFAST32	rapidjson/msinttypes/inttypes.h	136;"	d
PRIoFAST64	rapidjson/msinttypes/inttypes.h	149;"	d
PRIoFAST8	rapidjson/msinttypes/inttypes.h	110;"	d
PRIoLEAST16	rapidjson/msinttypes/inttypes.h	119;"	d
PRIoLEAST32	rapidjson/msinttypes/inttypes.h	132;"	d
PRIoLEAST64	rapidjson/msinttypes/inttypes.h	145;"	d
PRIoLEAST8	rapidjson/msinttypes/inttypes.h	106;"	d
PRIoMAX	rapidjson/msinttypes/inttypes.h	154;"	d
PRIoPTR	rapidjson/msinttypes/inttypes.h	159;"	d
PRIu16	rapidjson/msinttypes/inttypes.h	116;"	d
PRIu32	rapidjson/msinttypes/inttypes.h	129;"	d
PRIu64	rapidjson/msinttypes/inttypes.h	142;"	d
PRIu8	rapidjson/msinttypes/inttypes.h	103;"	d
PRIuFAST16	rapidjson/msinttypes/inttypes.h	124;"	d
PRIuFAST32	rapidjson/msinttypes/inttypes.h	137;"	d
PRIuFAST64	rapidjson/msinttypes/inttypes.h	150;"	d
PRIuFAST8	rapidjson/msinttypes/inttypes.h	111;"	d
PRIuLEAST16	rapidjson/msinttypes/inttypes.h	120;"	d
PRIuLEAST32	rapidjson/msinttypes/inttypes.h	133;"	d
PRIuLEAST64	rapidjson/msinttypes/inttypes.h	146;"	d
PRIuLEAST8	rapidjson/msinttypes/inttypes.h	107;"	d
PRIuMAX	rapidjson/msinttypes/inttypes.h	155;"	d
PRIuPTR	rapidjson/msinttypes/inttypes.h	160;"	d
PRIx16	rapidjson/msinttypes/inttypes.h	117;"	d
PRIx32	rapidjson/msinttypes/inttypes.h	130;"	d
PRIx64	rapidjson/msinttypes/inttypes.h	143;"	d
PRIx8	rapidjson/msinttypes/inttypes.h	104;"	d
PRIxFAST16	rapidjson/msinttypes/inttypes.h	125;"	d
PRIxFAST32	rapidjson/msinttypes/inttypes.h	138;"	d
PRIxFAST64	rapidjson/msinttypes/inttypes.h	151;"	d
PRIxFAST8	rapidjson/msinttypes/inttypes.h	112;"	d
PRIxLEAST16	rapidjson/msinttypes/inttypes.h	121;"	d
PRIxLEAST32	rapidjson/msinttypes/inttypes.h	134;"	d
PRIxLEAST64	rapidjson/msinttypes/inttypes.h	147;"	d
PRIxLEAST8	rapidjson/msinttypes/inttypes.h	108;"	d
PRIxMAX	rapidjson/msinttypes/inttypes.h	156;"	d
PRIxPTR	rapidjson/msinttypes/inttypes.h	161;"	d
PTRDIFF_MAX	rapidjson/msinttypes/stdint.h	239;"	d
PTRDIFF_MAX	rapidjson/msinttypes/stdint.h	242;"	d
PTRDIFF_MIN	rapidjson/msinttypes/stdint.h	238;"	d
PTRDIFF_MIN	rapidjson/msinttypes/stdint.h	241;"	d
PUT	http/HttpRequest.h	/^        PUT,$/;"	e	enum:HttpRequest::HttpMethod
Parse	rapidjson/document.h	/^    GenericDocument& Parse(const Ch* str) {$/;"	f	class:GenericDocument
Parse	rapidjson/document.h	/^    GenericDocument& Parse(const Ch* str, size_t length) {$/;"	f	class:GenericDocument
Parse	rapidjson/document.h	/^    GenericDocument& Parse(const std::basic_string<Ch>& str) {$/;"	f	class:GenericDocument
Parse	rapidjson/document.h	/^    GenericDocument& Parse(const std::basic_string<typename SourceEncoding::Ch>& str) {$/;"	f	class:GenericDocument
Parse	rapidjson/document.h	/^    GenericDocument& Parse(const typename SourceEncoding::Ch* str) {$/;"	f	class:GenericDocument
Parse	rapidjson/document.h	/^    GenericDocument& Parse(const typename SourceEncoding::Ch* str, size_t length) {$/;"	f	class:GenericDocument
Parse	rapidjson/internal/regex.h	/^    void Parse(DecodedStream<InputStream, Encoding>& ds) {$/;"	f	class:internal::GenericRegex
Parse	rapidjson/pointer.h	/^    void Parse(const Ch* source, size_t length) {$/;"	f	class:GenericPointer
Parse	rapidjson/reader.h	/^    ParseResult Parse(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseArray	rapidjson/reader.h	/^    void ParseArray(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseErrorCode	rapidjson/error/error.h	/^enum ParseErrorCode {$/;"	g
ParseFalse	rapidjson/reader.h	/^    void ParseFalse(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseFlag	rapidjson/reader.h	/^enum ParseFlag {$/;"	g
ParseHex4	rapidjson/reader.h	/^    unsigned ParseHex4(InputStream& is, size_t escapeOffset) {$/;"	f	class:GenericReader
ParseInsitu	rapidjson/document.h	/^    GenericDocument& ParseInsitu(Ch* str) {$/;"	f	class:GenericDocument
ParseNull	rapidjson/reader.h	/^    void ParseNull(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseNumber	rapidjson/reader.h	/^    void ParseNumber(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseObject	rapidjson/reader.h	/^    void ParseObject(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseRange	rapidjson/internal/regex.h	/^    bool ParseRange(DecodedStream<InputStream, Encoding>& ds, SizeType* range) {$/;"	f	class:internal::GenericRegex
ParseResult	rapidjson/error/error.h	/^    ParseResult() : code_(kParseErrorNone), offset_(0) {}$/;"	f	struct:ParseResult
ParseResult	rapidjson/error/error.h	/^    ParseResult(ParseErrorCode code, size_t offset) : code_(code), offset_(offset) {}$/;"	f	struct:ParseResult
ParseResult	rapidjson/error/error.h	/^struct ParseResult {$/;"	s
ParseStream	rapidjson/document.h	/^    GenericDocument& ParseStream(InputStream& is) {$/;"	f	class:GenericDocument
ParseString	rapidjson/reader.h	/^    void ParseString(InputStream& is, Handler& handler, bool isKey = false) {$/;"	f	class:GenericReader
ParseStringToStream	rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE void ParseStringToStream(InputStream& is, OutputStream& os) {$/;"	f	class:GenericReader
ParseTrue	rapidjson/reader.h	/^    void ParseTrue(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseUint64	rapidjson/internal/biginteger.h	/^    static uint64_t ParseUint64(const char* begin, const char* end) {$/;"	f	class:internal::BigInteger
ParseUnsigned	rapidjson/internal/regex.h	/^    bool ParseUnsigned(DecodedStream<InputStream, Encoding>& ds, unsigned* u) {$/;"	f	class:internal::GenericRegex
ParseValue	rapidjson/reader.h	/^    void ParseValue(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
Patch	rapidjson/internal/regex.h	/^    void Patch(SizeType l, SizeType s) {$/;"	f	class:internal::GenericRegex
PatternProperty	rapidjson/schema.h	/^        PatternProperty() : schema(), pattern() {}$/;"	f	struct:internal::Schema::PatternProperty
PatternProperty	rapidjson/schema.h	/^    struct PatternProperty {$/;"	s	class:internal::Schema
PatternValidatorType	rapidjson/schema.h	/^    enum PatternValidatorType {$/;"	g	struct:internal::SchemaValidationContext
Peek	rapidjson/encodedstream.h	/^    Ch Peek() const { RAPIDJSON_ASSERT(false); return 0;}$/;"	f	class:AutoUTFOutputStream
Peek	rapidjson/encodedstream.h	/^    Ch Peek() const { RAPIDJSON_ASSERT(false); return 0;}$/;"	f	class:EncodedOutputStream
Peek	rapidjson/encodedstream.h	/^    Ch Peek() const { return current_; }$/;"	f	class:AutoUTFInputStream
Peek	rapidjson/encodedstream.h	/^    Ch Peek() const { return current_; }$/;"	f	class:EncodedInputStream
Peek	rapidjson/encodedstream.h	/^    Ch Peek() const { return is_.Peek(); }$/;"	f	class:EncodedInputStream
Peek	rapidjson/filereadstream.h	/^    Ch Peek() const { return *current_; }$/;"	f	class:FileReadStream
Peek	rapidjson/filewritestream.h	/^    char Peek() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
Peek	rapidjson/internal/regex.h	/^    unsigned Peek() { return codepoint_; }$/;"	f	class:internal::DecodedStream
Peek	rapidjson/istreamwrapper.h	/^    Ch Peek() const { $/;"	f	class:BasicIStreamWrapper
Peek	rapidjson/memorystream.h	/^    Ch Peek() const { return RAPIDJSON_UNLIKELY(src_ == end_) ? '\\0' : *src_; }$/;"	f	struct:MemoryStream
Peek	rapidjson/ostreamwrapper.h	/^    char Peek() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
Peek	rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch Peek() const { return is.Peek(); }$/;"	f	class:GenericReader::NumberStream
Peek	rapidjson/stream.h	/^    Ch Peek() const { return *src_; }$/;"	f	struct:GenericStringStream
Peek	rapidjson/stream.h	/^    Ch Peek() const { return is_.Peek(); }$/;"	f	class:GenericStreamWrapper
Peek	rapidjson/stream.h	/^    Ch Peek() { return *src_; }$/;"	f	struct:GenericInsituStringStream
Peek4	rapidjson/filereadstream.h	/^    const Ch* Peek4() const {$/;"	f	class:FileReadStream
Peek4	rapidjson/istreamwrapper.h	/^    const Ch* Peek4() const {$/;"	f	class:BasicIStreamWrapper
Peek4	rapidjson/memorystream.h	/^    const Ch* Peek4() const {$/;"	f	struct:MemoryStream
Peek4	rapidjson/stream.h	/^    const Ch* Peek4() const { return is_.Peek4(); }$/;"	f	class:GenericStreamWrapper
PercentDecodeStream	rapidjson/pointer.h	/^        PercentDecodeStream(const Ch* source, const Ch* end) : src_(source), head_(source), end_(end), valid_(true) {}$/;"	f	class:GenericPointer::PercentDecodeStream
PercentDecodeStream	rapidjson/pointer.h	/^    class PercentDecodeStream {$/;"	c	class:GenericPointer
PercentEncodeStream	rapidjson/pointer.h	/^        PercentEncodeStream(OutputStream& os) : os_(os) {}$/;"	f	class:GenericPointer::PercentEncodeStream
PercentEncodeStream	rapidjson/pointer.h	/^    class PercentEncodeStream {$/;"	c	class:GenericPointer
PlainType	rapidjson/document.h	/^    typedef GenericMember<Encoding,Allocator> PlainType;$/;"	t	class:GenericMemberIterator
PlainType	rapidjson/document.h	/^    typedef ValueT PlainType;$/;"	t	class:GenericArray
PlainType	rapidjson/document.h	/^    typedef ValueT PlainType;$/;"	t	class:GenericObject
Pointer	rapidjson/document.h	/^    typedef typename BaseType::pointer         Pointer;$/;"	t	class:GenericMemberIterator
Pointer	rapidjson/fwd.h	/^typedef GenericPointer<Value, CrtAllocator> Pointer;$/;"	t
Pointer	rapidjson/pointer.h	/^typedef GenericPointer<Value> Pointer;$/;"	t
PointerParseErrorCode	rapidjson/pointer.h	/^enum PointerParseErrorCode {$/;"	g
PointerType	rapidjson/schema.h	/^    typedef GenericPointer<ValueType, Allocator> PointerType;$/;"	t	class:GenericSchemaDocument
PointerType	rapidjson/schema.h	/^    typedef typename SchemaDocumentType::PointerType PointerType;$/;"	t	class:GenericSchemaValidator
PointerType	rapidjson/schema.h	/^    typedef typename SchemaDocumentType::PointerType PointerType;$/;"	t	class:SchemaValidatingReader
PointerType	rapidjson/schema.h	/^    typedef typename SchemaDocumentType::PointerType PointerType;$/;"	t	class:internal::Schema
Poller	Poller.h	/^    Poller() {}$/;"	f	class:Poller
Poller	Poller.h	/^class Poller : private noncopyable$/;"	c
Pop	rapidjson/internal/stack.h	/^    T* Pop(size_t count) {$/;"	f	class:internal::Stack
Pop	rapidjson/memorybuffer.h	/^    void Pop(size_t count) { stack_.template Pop<Ch>(count); }$/;"	f	struct:GenericMemoryBuffer
Pop	rapidjson/reader.h	/^        Ch* Pop() {$/;"	f	class:GenericReader::StackStream
Pop	rapidjson/reader.h	/^        const char* Pop() { return 0; }$/;"	f	class:GenericReader::NumberStream
Pop	rapidjson/reader.h	/^        const char* Pop() {$/;"	f	class:GenericReader::NumberStream
Pop	rapidjson/stream.h	/^    void Pop(size_t count) { dst_ -= count; }$/;"	f	struct:GenericInsituStringStream
Pop	rapidjson/stringbuffer.h	/^    void Pop(size_t count) { stack_.template Pop<Ch>(count); }$/;"	f	class:GenericStringBuffer
PopBack	rapidjson/document.h	/^    GenericArray PopBack() const { value_.PopBack(); return *this; }$/;"	f	class:GenericArray
PopBack	rapidjson/document.h	/^    GenericValue& PopBack() {$/;"	f	class:GenericValue
PopSchema	rapidjson/schema.h	/^    RAPIDJSON_FORCEINLINE void PopSchema() {$/;"	f	class:GenericSchemaValidator
Populate	rapidjson/document.h	/^    GenericDocument& Populate(Generator& g) {$/;"	f	class:GenericDocument
PosTagger	cppjieba/PosTagger.hpp	/^  PosTagger() {$/;"	f	class:cppjieba::PosTagger
PosTagger	cppjieba/PosTagger.hpp	/^class PosTagger {$/;"	c	namespace:cppjieba
Pow10	rapidjson/internal/pow10.h	/^inline double Pow10(int n) {$/;"	f	namespace:internal
PreFilter	cppjieba/PreFilter.hpp	/^  PreFilter(const unordered_set<Rune>& symbols, $/;"	f	class:cppjieba::PreFilter
PreFilter	cppjieba/PreFilter.hpp	/^class PreFilter {$/;"	c	namespace:cppjieba
Predict	rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE IterativeParsingState Predict(IterativeParsingState state, Token token) {$/;"	f	class:GenericReader
Prefix	rapidjson/writer.h	/^    void Prefix(Type type) {$/;"	f	class:Writer
Prettify	rapidjson/internal/dtoa.h	/^inline char* Prettify(char* buffer, int length, int k, int maxDecimalPlaces) {$/;"	f	namespace:internal
PrettyFormatOptions	rapidjson/prettywriter.h	/^enum PrettyFormatOptions {$/;"	g
PrettyPrefix	rapidjson/prettywriter.h	/^    void PrettyPrefix(Type type) {$/;"	f	class:PrettyWriter
PrettyWriter	rapidjson/prettywriter.h	/^    PrettyWriter(PrettyWriter&& rhs) :$/;"	f	class:PrettyWriter
PrettyWriter	rapidjson/prettywriter.h	/^    explicit PrettyWriter(OutputStream& os, StackAllocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) : $/;"	f	class:PrettyWriter
PrettyWriter	rapidjson/prettywriter.h	/^    explicit PrettyWriter(StackAllocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) : $/;"	f	class:PrettyWriter
PrettyWriter	rapidjson/prettywriter.h	/^class PrettyWriter : public Writer<OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags> {$/;"	c
PrintInvalidDocument	rapidjson/schema.h	/^inline void PrintInvalidDocument(const char* document) {$/;"	f	namespace:internal
PrintInvalidDocument	rapidjson/schema.h	/^inline void PrintInvalidDocument(const wchar_t* document) {$/;"	f	namespace:internal
PrintInvalidKeyword	rapidjson/schema.h	/^inline void PrintInvalidKeyword(const char* keyword) {$/;"	f	namespace:internal
PrintInvalidKeyword	rapidjson/schema.h	/^inline void PrintInvalidKeyword(const wchar_t* keyword) {$/;"	f	namespace:internal
PrintValidatorPointers	rapidjson/schema.h	/^inline void PrintValidatorPointers(unsigned depth, const char* s, const char* d) {$/;"	f	namespace:internal
PrintValidatorPointers	rapidjson/schema.h	/^inline void PrintValidatorPointers(unsigned depth, const wchar_t* s, const wchar_t* d) {$/;"	f	namespace:internal
Property	rapidjson/schema.h	/^        Property() : schema(), dependenciesSchema(), dependenciesValidatorIndex(), dependencies(), required(false) {}$/;"	f	struct:internal::Schema::Property
Property	rapidjson/schema.h	/^    struct Property {$/;"	s	class:internal::Schema
Push	rapidjson/internal/stack.h	/^    RAPIDJSON_FORCEINLINE T* Push(size_t count = 1) {$/;"	f	class:internal::Stack
Push	rapidjson/memorybuffer.h	/^    Ch* Push(size_t count) { return stack_.template Push<Ch>(count); }$/;"	f	struct:GenericMemoryBuffer
Push	rapidjson/reader.h	/^		  RAPIDJSON_FORCEINLINE void Push(char) {}$/;"	f	class:GenericReader::NumberStream
Push	rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE void Push(char c) {$/;"	f	class:GenericReader::NumberStream
Push	rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE void* Push(SizeType count) {$/;"	f	class:GenericReader::StackStream
Push	rapidjson/stream.h	/^    Ch* Push(size_t count) { Ch* begin = dst_; dst_ += count; return begin; }$/;"	f	struct:GenericInsituStringStream
Push	rapidjson/stringbuffer.h	/^    Ch* Push(size_t count) { return stack_.template Push<Ch>(count); }$/;"	f	class:GenericStringBuffer
PushBack	rapidjson/document.h	/^    GenericArray PushBack(StringRefType value, AllocatorType& allocator) const { value_.PushBack(value, allocator); return *this; }$/;"	f	class:GenericArray
PushBack	rapidjson/document.h	/^    GenericArray PushBack(ValueType& value, AllocatorType& allocator) const { value_.PushBack(value, allocator); return *this; }$/;"	f	class:GenericArray
PushBack	rapidjson/document.h	/^    GenericArray PushBack(ValueType&& value, AllocatorType& allocator) const { value_.PushBack(value, allocator); return *this; }$/;"	f	class:GenericArray
PushBack	rapidjson/document.h	/^    GenericValue& PushBack(GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
PushBack	rapidjson/document.h	/^    GenericValue& PushBack(GenericValue&& value, Allocator& allocator) {$/;"	f	class:GenericValue
PushBack	rapidjson/document.h	/^    GenericValue& PushBack(StringRefType value, Allocator& allocator) {$/;"	f	class:GenericValue
PushBack	rapidjson/document.h	/^    PushBack(T value, Allocator& allocator) {$/;"	f	class:GenericValue
PushBack	rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (const GenericArray&)) PushBack(T value, AllocatorType& allocator) const { value_.PushBack(value, allocator); return *this; }$/;"	f	class:GenericArray
PushBack	rapidjson/internal/biginteger.h	/^    void PushBack(Type digit) {$/;"	f	class:internal::BigInteger
PushOperand	rapidjson/internal/regex.h	/^    void PushOperand(Stack<Allocator>& operandStack, unsigned codepoint) {$/;"	f	class:internal::GenericRegex
PushSchema	rapidjson/schema.h	/^    RAPIDJSON_FORCEINLINE void PushSchema(const SchemaType& schema) { new (schemaStack_.template Push<Context>()) Context(*this, &schema); }$/;"	f	class:GenericSchemaValidator
PushUnsafe	rapidjson/internal/stack.h	/^    RAPIDJSON_FORCEINLINE T* PushUnsafe(size_t count = 1) {$/;"	f	class:internal::Stack
PushUnsafe	rapidjson/stringbuffer.h	/^    Ch* PushUnsafe(size_t count) { return stack_.template PushUnsafe<Ch>(count); }$/;"	f	class:GenericStringBuffer
Put	rapidjson/encodedstream.h	/^    void Put(Ch c) { Encoding::Put(os_, c);  }$/;"	f	class:EncodedOutputStream
Put	rapidjson/encodedstream.h	/^    void Put(Ch c) { putFunc_(*os_, c); }$/;"	f	class:AutoUTFOutputStream
Put	rapidjson/encodedstream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:AutoUTFInputStream
Put	rapidjson/encodedstream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:EncodedInputStream
Put	rapidjson/encodedstream.h	/^    void Put(Ch) {}$/;"	f	class:EncodedInputStream
Put	rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, Ch c) {$/;"	f	struct:ASCII
Put	rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, Ch c) {$/;"	f	struct:UTF8
Put	rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, CharType c) {$/;"	f	struct:UTF16BE
Put	rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, CharType c) {$/;"	f	struct:UTF16LE
Put	rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, CharType c) {$/;"	f	struct:UTF32BE
Put	rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, CharType c) {$/;"	f	struct:UTF32LE
Put	rapidjson/filereadstream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:FileReadStream
Put	rapidjson/filewritestream.h	/^    void Put(char c) { $/;"	f	class:FileWriteStream
Put	rapidjson/istreamwrapper.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:BasicIStreamWrapper
Put	rapidjson/memorybuffer.h	/^    void Put(Ch c) { *stack_.template Push<Ch>() = c; }$/;"	f	struct:GenericMemoryBuffer
Put	rapidjson/memorystream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	struct:MemoryStream
Put	rapidjson/ostreamwrapper.h	/^    void Put(Ch c) {$/;"	f	class:BasicOStreamWrapper
Put	rapidjson/pointer.h	/^        void Put(char c) { \/\/ UTF-8 must be byte$/;"	f	class:GenericPointer::PercentEncodeStream
Put	rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE void Put(Ch c) {$/;"	f	class:GenericReader::StackStream
Put	rapidjson/stream.h	/^    void Put(Ch c) { RAPIDJSON_ASSERT(dst_ != 0); *dst_++ = c; }$/;"	f	struct:GenericInsituStringStream
Put	rapidjson/stream.h	/^    void Put(Ch ch) { is_.Put(ch); }$/;"	f	class:GenericStreamWrapper
Put	rapidjson/stream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	struct:GenericStringStream
Put	rapidjson/stringbuffer.h	/^    void Put(Ch c) { *stack_.template Push<Ch>() = c; }$/;"	f	class:GenericStringBuffer
PutBOM	rapidjson/encodedstream.h	/^    void PutBOM() { $/;"	f	class:AutoUTFOutputStream
PutBOM	rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:ASCII
PutBOM	rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF16BE
PutBOM	rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF16LE
PutBOM	rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF32BE
PutBOM	rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF32LE
PutBOM	rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF8
PutBegin	rapidjson/encodedstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFInputStream
PutBegin	rapidjson/encodedstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFOutputStream
PutBegin	rapidjson/encodedstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:EncodedInputStream
PutBegin	rapidjson/encodedstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:EncodedOutputStream
PutBegin	rapidjson/encodedstream.h	/^    Ch* PutBegin() { return 0; }$/;"	f	class:EncodedInputStream
PutBegin	rapidjson/filereadstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileReadStream
PutBegin	rapidjson/filewritestream.h	/^    char* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
PutBegin	rapidjson/istreamwrapper.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicIStreamWrapper
PutBegin	rapidjson/memorystream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:MemoryStream
PutBegin	rapidjson/ostreamwrapper.h	/^    char* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
PutBegin	rapidjson/stream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:GenericStringStream
PutBegin	rapidjson/stream.h	/^    Ch* PutBegin() { return dst_ = src_; }$/;"	f	struct:GenericInsituStringStream
PutBegin	rapidjson/stream.h	/^    Ch* PutBegin() { return is_.PutBegin(); }$/;"	f	class:GenericStreamWrapper
PutEnd	rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFInputStream
PutEnd	rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFOutputStream
PutEnd	rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:EncodedInputStream
PutEnd	rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:EncodedOutputStream
PutEnd	rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { return 0; }$/;"	f	class:EncodedInputStream
PutEnd	rapidjson/filereadstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileReadStream
PutEnd	rapidjson/filewritestream.h	/^    size_t PutEnd(char*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
PutEnd	rapidjson/istreamwrapper.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicIStreamWrapper
PutEnd	rapidjson/memorystream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:MemoryStream
PutEnd	rapidjson/ostreamwrapper.h	/^    size_t PutEnd(char*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
PutEnd	rapidjson/stream.h	/^    size_t PutEnd(Ch* begin) { return static_cast<size_t>(dst_ - begin); }$/;"	f	struct:GenericInsituStringStream
PutEnd	rapidjson/stream.h	/^    size_t PutEnd(Ch* ch) { return is_.PutEnd(ch); }$/;"	f	class:GenericStreamWrapper
PutEnd	rapidjson/stream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:GenericStringStream
PutFunc	rapidjson/encodedstream.h	/^    typedef void (*PutFunc)(OutputByteStream&, Ch);$/;"	t	class:AutoUTFOutputStream
PutN	rapidjson/filewritestream.h	/^    void PutN(char c, size_t n) {$/;"	f	class:FileWriteStream
PutN	rapidjson/filewritestream.h	/^inline void PutN(FileWriteStream& stream, char c, size_t n) {$/;"	f
PutN	rapidjson/memorybuffer.h	/^inline void PutN(MemoryBuffer& memoryBuffer, char c, size_t n) {$/;"	f
PutN	rapidjson/stream.h	/^inline void PutN(Stream& stream, Ch c, size_t n) {$/;"	f
PutN	rapidjson/stringbuffer.h	/^inline void PutN(GenericStringBuffer<UTF8<> >& stream, char c, size_t n) {$/;"	f
PutReserve	rapidjson/stream.h	/^inline void PutReserve(Stream& stream, size_t count) {$/;"	f
PutReserve	rapidjson/stringbuffer.h	/^inline void PutReserve(GenericStringBuffer<Encoding, Allocator>& stream, size_t count) {$/;"	f
PutUnsafe	rapidjson/stream.h	/^inline void PutUnsafe(Stream& stream, typename Stream::Ch c) {$/;"	f
PutUnsafe	rapidjson/stringbuffer.h	/^    void PutUnsafe(Ch c) { *stack_.template PushUnsafe<Ch>() = c; }$/;"	f	class:GenericStringBuffer
PutUnsafe	rapidjson/stringbuffer.h	/^inline void PutUnsafe(GenericStringBuffer<Encoding, Allocator>& stream, typename Encoding::Ch c) {$/;"	f
QUESTION_TABLE_NAME	http/HttpServer.cpp	/^static const string QUESTION_TABLE_NAME = "question";$/;"	v	file:
QuerySegment	cppjieba/QuerySegment.hpp	/^  QuerySegment(const DictTrie* dictTrie, const HMMModel* model)$/;"	f	class:cppjieba::QuerySegment
QuerySegment	cppjieba/QuerySegment.hpp	/^  QuerySegment(const string& dict, const string& model, const string& userDict = "")$/;"	f	class:cppjieba::QuerySegment
QuerySegment	cppjieba/QuerySegment.hpp	/^class QuerySegment: public SegmentBase {$/;"	c	namespace:cppjieba
Question	http/Question.h	/^    Question() {}$/;"	f	class:Question
Question	http/Question.h	/^class Question$/;"	c
RAPIDJSON_48BITPOINTER_OPTIMIZATION	rapidjson/rapidjson.h	310;"	d
RAPIDJSON_48BITPOINTER_OPTIMIZATION	rapidjson/rapidjson.h	312;"	d
RAPIDJSON_64BIT	rapidjson/rapidjson.h	259;"	d
RAPIDJSON_64BIT	rapidjson/rapidjson.h	261;"	d
RAPIDJSON_ALIGN	rapidjson/rapidjson.h	278;"	d
RAPIDJSON_ALIGN	rapidjson/rapidjson.h	280;"	d
RAPIDJSON_ALLOCATORS_H_	rapidjson/allocators.h	16;"	d
RAPIDJSON_ASSERT	rapidjson/rapidjson.h	411;"	d
RAPIDJSON_BIGENDIAN	rapidjson/rapidjson.h	199;"	d
RAPIDJSON_BIGINTEGER_H_	rapidjson/internal/biginteger.h	16;"	d
RAPIDJSON_CURSORSTREAMWRAPPER_H_	rapidjson/cursorstreamwrapper.h	16;"	d
RAPIDJSON_DELETE	rapidjson/rapidjson.h	603;"	d
RAPIDJSON_DIAG_OFF	rapidjson/rapidjson.h	510;"	d
RAPIDJSON_DIAG_POP	rapidjson/rapidjson.h	516;"	d
RAPIDJSON_DIAG_PRAGMA	rapidjson/rapidjson.h	509;"	d
RAPIDJSON_DIAG_PUSH	rapidjson/rapidjson.h	515;"	d
RAPIDJSON_DISABLEIF	rapidjson/internal/meta.h	159;"	d
RAPIDJSON_DISABLEIF_RETURN	rapidjson/internal/meta.h	168;"	d
RAPIDJSON_DIYFP_H_	rapidjson/internal/diyfp.h	20;"	d
RAPIDJSON_DOCUMENT_H_	rapidjson/document.h	16;"	d
RAPIDJSON_DO_JOIN	rapidjson/rapidjson.h	55;"	d
RAPIDJSON_DO_JOIN2	rapidjson/rapidjson.h	56;"	d
RAPIDJSON_DO_STRINGIFY	rapidjson/rapidjson.h	51;"	d
RAPIDJSON_DTOA_	rapidjson/internal/dtoa.h	20;"	d
RAPIDJSON_ENABLEIF	rapidjson/internal/meta.h	155;"	d
RAPIDJSON_ENABLEIF_RETURN	rapidjson/internal/meta.h	163;"	d
RAPIDJSON_ENCODEDSTREAM_H_	rapidjson/encodedstream.h	16;"	d
RAPIDJSON_ENCODINGS_FUNC	rapidjson/encodedstream.h	127;"	d
RAPIDJSON_ENCODINGS_FUNC	rapidjson/encodedstream.h	287;"	d
RAPIDJSON_ENCODINGS_FUNC	rapidjson/encodings.h	620;"	d
RAPIDJSON_ENCODINGS_FUNC	rapidjson/encodings.h	650;"	d
RAPIDJSON_ENCODINGS_H_	rapidjson/encodings.h	16;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	218;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	220;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	228;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	230;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	236;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	238;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	241;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	243;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	245;"	d
RAPIDJSON_ENDIAN	rapidjson/rapidjson.h	247;"	d
RAPIDJSON_ERROR_CHARTYPE	rapidjson/error/error.h	39;"	d
RAPIDJSON_ERROR_EN_H_	rapidjson/error/en.h	16;"	d
RAPIDJSON_ERROR_ERROR_H_	rapidjson/error/error.h	16;"	d
RAPIDJSON_ERROR_STRING	rapidjson/error/error.h	52;"	d
RAPIDJSON_FILEREADSTREAM_H_	rapidjson/filereadstream.h	16;"	d
RAPIDJSON_FILEWRITESTREAM_H_	rapidjson/filewritestream.h	16;"	d
RAPIDJSON_FORCEINLINE	rapidjson/rapidjson.h	187;"	d
RAPIDJSON_FORCEINLINE	rapidjson/rapidjson.h	189;"	d
RAPIDJSON_FORCEINLINE	rapidjson/rapidjson.h	191;"	d
RAPIDJSON_FWD_H_	rapidjson/fwd.h	16;"	d
RAPIDJSON_GETPOINTER	rapidjson/rapidjson.h	321;"	d
RAPIDJSON_GETPOINTER	rapidjson/rapidjson.h	324;"	d
RAPIDJSON_GNUC	rapidjson/rapidjson.h	502;"	d
RAPIDJSON_HAS_CXX11_NOEXCEPT	rapidjson/rapidjson.h	562;"	d
RAPIDJSON_HAS_CXX11_RANGE_FOR	rapidjson/rapidjson.h	583;"	d
RAPIDJSON_HAS_CXX11_RVALUE_REFS	rapidjson/rapidjson.h	547;"	d
RAPIDJSON_HAS_CXX11_TYPETRAITS	rapidjson/rapidjson.h	578;"	d
RAPIDJSON_HAS_STDSTRING	rapidjson/rapidjson.h	132;"	d
RAPIDJSON_HAS_STDSTRING	rapidjson/rapidjson.h	134;"	d
RAPIDJSON_IEEE754_	rapidjson/internal/ieee754.h	16;"	d
RAPIDJSON_INTERNAL_META_H_	rapidjson/internal/meta.h	16;"	d
RAPIDJSON_INTERNAL_REGEX_H_	rapidjson/internal/regex.h	16;"	d
RAPIDJSON_INTERNAL_STACK_H_	rapidjson/internal/stack.h	16;"	d
RAPIDJSON_INTERNAL_STRFUNC_H_	rapidjson/internal/strfunc.h	16;"	d
RAPIDJSON_INTERNAL_SWAP_H_	rapidjson/internal/swap.h	16;"	d
RAPIDJSON_INVALID_KEYWORD_RETURN	rapidjson/schema.h	117;"	d
RAPIDJSON_INVALID_KEYWORD_VERBOSE	rapidjson/schema.h	112;"	d
RAPIDJSON_ISTREAMWRAPPER_H_	rapidjson/istreamwrapper.h	16;"	d
RAPIDJSON_ITOA_	rapidjson/internal/itoa.h	16;"	d
RAPIDJSON_JOIN	rapidjson/rapidjson.h	54;"	d
RAPIDJSON_LIKELY	rapidjson/rapidjson.h	466;"	d
RAPIDJSON_LITTLEENDIAN	rapidjson/rapidjson.h	198;"	d
RAPIDJSON_MAJOR_VERSION	rapidjson/rapidjson.h	75;"	d
RAPIDJSON_MEMORYBUFFER_H_	rapidjson/memorybuffer.h	16;"	d
RAPIDJSON_MEMORYSTREAM_H_	rapidjson/memorystream.h	16;"	d
RAPIDJSON_MINOR_VERSION	rapidjson/rapidjson.h	76;"	d
RAPIDJSON_MULTILINEMACRO_BEGIN	rapidjson/rapidjson.h	490;"	d
RAPIDJSON_MULTILINEMACRO_END	rapidjson/rapidjson.h	491;"	d
RAPIDJSON_NAMESPACE	rapidjson/rapidjson.h	118;"	d
RAPIDJSON_NAMESPACE_BEGIN	rapidjson/rapidjson.h	121;"	d
RAPIDJSON_NAMESPACE_END	rapidjson/rapidjson.h	124;"	d
RAPIDJSON_NEW	rapidjson/rapidjson.h	599;"	d
RAPIDJSON_NOEXCEPT	rapidjson/document.h	/^    GenericStringRef(const CharType (&str)[N]) RAPIDJSON_NOEXCEPT$/;"	m	struct:GenericStringRef
RAPIDJSON_NOEXCEPT	rapidjson/rapidjson.h	571;"	d
RAPIDJSON_NOTHING	rapidjson/reader.h	59;"	d
RAPIDJSON_NO_INT64DEFINE	rapidjson/rapidjson.h	177;"	d
RAPIDJSON_NO_SIZETYPEDEFINE	rapidjson/rapidjson.h	381;"	d
RAPIDJSON_OSTREAMWRAPPER_H_	rapidjson/ostreamwrapper.h	16;"	d
RAPIDJSON_PARSE_DEFAULT_FLAGS	rapidjson/reader.h	141;"	d
RAPIDJSON_PARSE_ERROR	rapidjson/reader.h	120;"	d
RAPIDJSON_PARSE_ERROR_EARLY_RETURN	rapidjson/reader.h	61;"	d
RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID	rapidjson/reader.h	66;"	d
RAPIDJSON_PARSE_ERROR_NORETURN	rapidjson/reader.h	101;"	d
RAPIDJSON_PATCH_VERSION	rapidjson/rapidjson.h	77;"	d
RAPIDJSON_POINTER_H_	rapidjson/pointer.h	16;"	d
RAPIDJSON_POW10_	rapidjson/internal/pow10.h	16;"	d
RAPIDJSON_PRAGMA	rapidjson/rapidjson.h	508;"	d
RAPIDJSON_PRETTYWRITER_H_	rapidjson/prettywriter.h	16;"	d
RAPIDJSON_RAPIDJSON_H_	rapidjson/rapidjson.h	16;"	d
RAPIDJSON_READER_H_	rapidjson/reader.h	16;"	d
RAPIDJSON_REGEX_VERBOSE	rapidjson/internal/regex.h	43;"	d
RAPIDJSON_REMOVEFPTR_	rapidjson/internal/meta.h	151;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_	rapidjson/schema.h	1678;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_	rapidjson/schema.h	1752;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_	rapidjson/schema.h	1668;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_	rapidjson/schema.h	1675;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_	rapidjson/schema.h	1751;"	d
RAPIDJSON_SCHEMA_HANDLE_END_	rapidjson/schema.h	1697;"	d
RAPIDJSON_SCHEMA_HANDLE_PARALLEL_	rapidjson/schema.h	1685;"	d
RAPIDJSON_SCHEMA_HANDLE_PARALLEL_	rapidjson/schema.h	1753;"	d
RAPIDJSON_SCHEMA_HANDLE_VALUE_	rapidjson/schema.h	1700;"	d
RAPIDJSON_SCHEMA_HANDLE_VALUE_	rapidjson/schema.h	1754;"	d
RAPIDJSON_SCHEMA_HAS_REGEX	rapidjson/schema.h	41;"	d
RAPIDJSON_SCHEMA_HAS_REGEX	rapidjson/schema.h	43;"	d
RAPIDJSON_SCHEMA_H_	rapidjson/schema.h	16;"	d
RAPIDJSON_SCHEMA_USE_INTERNALREGEX	rapidjson/schema.h	23;"	d
RAPIDJSON_SCHEMA_USE_INTERNALREGEX	rapidjson/schema.h	25;"	d
RAPIDJSON_SCHEMA_USE_STDREGEX	rapidjson/schema.h	29;"	d
RAPIDJSON_SCHEMA_USE_STDREGEX	rapidjson/schema.h	31;"	d
RAPIDJSON_SCHEMA_VERBOSE	rapidjson/schema.h	47;"	d
RAPIDJSON_SETPOINTER	rapidjson/rapidjson.h	320;"	d
RAPIDJSON_SETPOINTER	rapidjson/rapidjson.h	323;"	d
RAPIDJSON_SIMD	rapidjson/rapidjson.h	358;"	d
RAPIDJSON_STATIC_ASSERT	rapidjson/rapidjson.h	420;"	d
RAPIDJSON_STATIC_ASSERT	rapidjson/rapidjson.h	450;"	d
RAPIDJSON_STATIC_ASSERT_UNUSED_ATTRIBUTE	rapidjson/rapidjson.h	437;"	d
RAPIDJSON_STREAM_H_	rapidjson/stream.h	18;"	d
RAPIDJSON_STRINGBUFFER_H_	rapidjson/stringbuffer.h	16;"	d
RAPIDJSON_STRINGIFY	rapidjson/rapidjson.h	50;"	d
RAPIDJSON_STRING_	rapidjson/schema.h	883;"	d
RAPIDJSON_STRING_	rapidjson/schema.h	924;"	d
RAPIDJSON_STRTOD_	rapidjson/internal/strtod.h	16;"	d
RAPIDJSON_UINT64_C2	rapidjson/rapidjson.h	294;"	d
RAPIDJSON_UNLIKELY	rapidjson/rapidjson.h	479;"	d
RAPIDJSON_VERSION_CODE	rapidjson/rapidjson.h	495;"	d
RAPIDJSON_VERSION_STRING	rapidjson/rapidjson.h	78;"	d
RAPIDJSON_WRITER_H_	rapidjson/writer.h	16;"	d
RAPIDJSON_WRITE_DEFAULT_FLAGS	rapidjson/writer.h	63;"	d
Range	cppjieba/PreFilter.hpp	/^  struct Range {$/;"	s	class:cppjieba::PreFilter
Range	rapidjson/internal/regex.h	/^    struct Range {$/;"	s	class:internal::GenericRegex
Range	rapidjson/internal/regex.h	/^    typedef typename RegexType::Range Range;$/;"	t	class:internal::GenericRegexSearch
RawNumber	rapidjson/document.h	/^    bool RawNumber(const Ch* str, SizeType length, bool copy) { $/;"	f	class:GenericDocument
RawNumber	rapidjson/prettywriter.h	/^    bool RawNumber(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:PrettyWriter
RawNumber	rapidjson/reader.h	/^    bool RawNumber(const Ch* str, SizeType len, bool copy) { return static_cast<Override&>(*this).String(str, len, copy); }$/;"	f	struct:BaseReaderHandler
RawNumber	rapidjson/schema.h	/^    bool RawNumber(const Ch* str, SizeType len, bool) {$/;"	f	class:internal::Hasher
RawNumber	rapidjson/schema.h	/^    bool RawNumber(const Ch* str, SizeType length, bool copy)$/;"	f	class:GenericSchemaValidator
RawNumber	rapidjson/writer.h	/^    bool RawNumber(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:Writer
RawValue	rapidjson/prettywriter.h	/^    bool RawValue(const Ch* json, size_t length, Type type) {$/;"	f	class:PrettyWriter
RawValue	rapidjson/writer.h	/^    bool RawValue(const Ch* json, size_t length, Type type) {$/;"	f	class:Writer
Read	rapidjson/filereadstream.h	/^    void Read() {$/;"	f	class:FileReadStream
Reader	rapidjson/fwd.h	/^typedef GenericReader<UTF8<char>, UTF8<char>, CrtAllocator> Reader;$/;"	t
Reader	rapidjson/reader.h	/^typedef GenericReader<UTF8<>, UTF8<> > Reader;$/;"	t
Realloc	rapidjson/allocators.h	/^    void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {$/;"	f	class:CrtAllocator
Realloc	rapidjson/allocators.h	/^    void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {$/;"	f	class:MemoryPoolAllocator
Reference	rapidjson/document.h	/^    typedef typename BaseType::reference       Reference;$/;"	t	class:GenericMemberIterator
Regex	rapidjson/internal/regex.h	/^typedef GenericRegex<UTF8<> > Regex;$/;"	t	namespace:internal
RegexSearch	rapidjson/internal/regex.h	/^typedef GenericRegexSearch<Regex> RegexSearch;$/;"	t	namespace:internal
RegexType	rapidjson/schema.h	/^        typedef char RegexType;$/;"	t	class:internal::Schema
RegexType	rapidjson/schema.h	/^        typedef internal::GenericRegex<EncodingType, AllocatorType> RegexType;$/;"	t	class:internal::Schema
RegexType	rapidjson/schema.h	/^        typedef std::basic_regex<Ch> RegexType;$/;"	t	class:internal::Schema
RemoveAllMembers	rapidjson/document.h	/^    void RemoveAllMembers() { value_.RemoveAllMembers(); }$/;"	f	class:GenericObject
RemoveAllMembers	rapidjson/document.h	/^    void RemoveAllMembers() {$/;"	f	class:GenericValue
RemoveConst	rapidjson/internal/meta.h	/^template <typename T> struct RemoveConst { typedef T Type; };$/;"	s	namespace:internal
RemoveConst	rapidjson/internal/meta.h	/^template <typename T> struct RemoveConst<const T> { typedef T Type; };$/;"	s	namespace:internal
RemoveMember	rapidjson/document.h	/^    MemberIterator RemoveMember(MemberIterator m) const { return value_.RemoveMember(m); }$/;"	f	class:GenericObject
RemoveMember	rapidjson/document.h	/^    MemberIterator RemoveMember(MemberIterator m) {$/;"	f	class:GenericValue
RemoveMember	rapidjson/document.h	/^    bool RemoveMember(const Ch* name) const { return value_.RemoveMember(name); }$/;"	f	class:GenericObject
RemoveMember	rapidjson/document.h	/^    bool RemoveMember(const Ch* name) {$/;"	f	class:GenericValue
RemoveMember	rapidjson/document.h	/^    bool RemoveMember(const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
RemoveMember	rapidjson/document.h	/^    bool RemoveMember(const std::basic_string<Ch>& name) const { return value_.RemoveMember(name); }$/;"	f	class:GenericObject
RemoveMember	rapidjson/document.h	/^    bool RemoveMember(const std::basic_string<Ch>& name) { return RemoveMember(GenericValue(StringRef(name))); }$/;"	f	class:GenericValue
RemoveMember	rapidjson/document.h	/^    template <typename SourceAllocator> bool RemoveMember(const GenericValue<EncodingType, SourceAllocator>& name) const { return value_.RemoveMember(name); }$/;"	f	class:GenericObject
RemoveSfinaeTag	rapidjson/internal/meta.h	/^template <typename T> struct RemoveSfinaeTag<SfinaeTag&(*)(T)> { typedef T Type; };$/;"	s	namespace:internal
Reserve	rapidjson/document.h	/^    GenericArray Reserve(SizeType newCapacity, AllocatorType &allocator) const { value_.Reserve(newCapacity, allocator); return *this; }$/;"	f	class:GenericArray
Reserve	rapidjson/document.h	/^    GenericValue& Reserve(SizeType newCapacity, Allocator &allocator) {$/;"	f	class:GenericValue
Reserve	rapidjson/internal/stack.h	/^    RAPIDJSON_FORCEINLINE void Reserve(size_t count = 1) {$/;"	f	class:internal::Stack
Reserve	rapidjson/stringbuffer.h	/^    void Reserve(size_t count) { stack_.template Reserve<Ch>(count); }$/;"	f	class:GenericStringBuffer
Reset	rapidjson/schema.h	/^    void Reset() {$/;"	f	class:GenericSchemaValidator
Reset	rapidjson/writer.h	/^    void Reset(OutputStream& os) {$/;"	f	class:Writer
ResetSeparators	cppjieba/Jieba.hpp	/^  void ResetSeparators(const string& s) {$/;"	f	class:cppjieba::Jieba
ResetSeparators	cppjieba/SegmentBase.hpp	/^  bool ResetSeparators(const string& s) {$/;"	f	class:cppjieba::SegmentBase
Resize	rapidjson/internal/stack.h	/^    void Resize(size_t newCapacity) {$/;"	f	class:internal::Stack
RightBracketToken	rapidjson/reader.h	/^        RightBracketToken,$/;"	e	enum:GenericReader::Token
RightCurlyBracketToken	rapidjson/reader.h	/^        RightCurlyBracketToken,$/;"	e	enum:GenericReader::Token
Rune	cppjieba/Unicode.hpp	/^typedef uint32_t Rune;$/;"	t	namespace:cppjieba
RuneStr	cppjieba/Unicode.hpp	/^  RuneStr(): rune(0), offset(0), len(0) {$/;"	f	struct:cppjieba::RuneStr
RuneStr	cppjieba/Unicode.hpp	/^  RuneStr(Rune r, uint32_t o, uint32_t l)$/;"	f	struct:cppjieba::RuneStr
RuneStr	cppjieba/Unicode.hpp	/^  RuneStr(Rune r, uint32_t o, uint32_t l, uint32_t unicode_offset, uint32_t unicode_length)$/;"	f	struct:cppjieba::RuneStr
RuneStr	cppjieba/Unicode.hpp	/^struct RuneStr {$/;"	s	namespace:cppjieba
RuneStrArray	cppjieba/Unicode.hpp	/^typedef limonp::LocalVector<struct RuneStr> RuneStrArray;$/;"	t	namespace:cppjieba
RuneStrLite	cppjieba/Unicode.hpp	/^  RuneStrLite(): rune(0), len(0) {$/;"	f	struct:cppjieba::RuneStrLite
RuneStrLite	cppjieba/Unicode.hpp	/^  RuneStrLite(uint32_t r, uint32_t l): rune(r), len(l) {$/;"	f	struct:cppjieba::RuneStrLite
RuneStrLite	cppjieba/Unicode.hpp	/^struct RuneStrLite {$/;"	s	namespace:cppjieba
S	cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon16
SCNX16	rapidjson/msinttypes/inttypes.h	221;"	d
SCNX32	rapidjson/msinttypes/inttypes.h	234;"	d
SCNX64	rapidjson/msinttypes/inttypes.h	247;"	d
SCNX8	rapidjson/msinttypes/inttypes.h	208;"	d
SCNXFAST16	rapidjson/msinttypes/inttypes.h	229;"	d
SCNXFAST32	rapidjson/msinttypes/inttypes.h	242;"	d
SCNXFAST64	rapidjson/msinttypes/inttypes.h	255;"	d
SCNXFAST8	rapidjson/msinttypes/inttypes.h	216;"	d
SCNXLEAST16	rapidjson/msinttypes/inttypes.h	225;"	d
SCNXLEAST32	rapidjson/msinttypes/inttypes.h	238;"	d
SCNXLEAST64	rapidjson/msinttypes/inttypes.h	251;"	d
SCNXLEAST8	rapidjson/msinttypes/inttypes.h	212;"	d
SCNXMAX	rapidjson/msinttypes/inttypes.h	260;"	d
SCNXPTR	rapidjson/msinttypes/inttypes.h	266;"	d
SCNXPTR	rapidjson/msinttypes/inttypes.h	271;"	d
SCNd16	rapidjson/msinttypes/inttypes.h	172;"	d
SCNd32	rapidjson/msinttypes/inttypes.h	179;"	d
SCNd64	rapidjson/msinttypes/inttypes.h	186;"	d
SCNd8	rapidjson/msinttypes/inttypes.h	165;"	d
SCNdFAST16	rapidjson/msinttypes/inttypes.h	176;"	d
SCNdFAST32	rapidjson/msinttypes/inttypes.h	183;"	d
SCNdFAST64	rapidjson/msinttypes/inttypes.h	190;"	d
SCNdFAST8	rapidjson/msinttypes/inttypes.h	169;"	d
SCNdLEAST16	rapidjson/msinttypes/inttypes.h	174;"	d
SCNdLEAST32	rapidjson/msinttypes/inttypes.h	181;"	d
SCNdLEAST64	rapidjson/msinttypes/inttypes.h	188;"	d
SCNdLEAST8	rapidjson/msinttypes/inttypes.h	167;"	d
SCNdMAX	rapidjson/msinttypes/inttypes.h	193;"	d
SCNdPTR	rapidjson/msinttypes/inttypes.h	197;"	d
SCNdPTR	rapidjson/msinttypes/inttypes.h	200;"	d
SCNi16	rapidjson/msinttypes/inttypes.h	173;"	d
SCNi32	rapidjson/msinttypes/inttypes.h	180;"	d
SCNi64	rapidjson/msinttypes/inttypes.h	187;"	d
SCNi8	rapidjson/msinttypes/inttypes.h	166;"	d
SCNiFAST16	rapidjson/msinttypes/inttypes.h	177;"	d
SCNiFAST32	rapidjson/msinttypes/inttypes.h	184;"	d
SCNiFAST64	rapidjson/msinttypes/inttypes.h	191;"	d
SCNiFAST8	rapidjson/msinttypes/inttypes.h	170;"	d
SCNiLEAST16	rapidjson/msinttypes/inttypes.h	175;"	d
SCNiLEAST32	rapidjson/msinttypes/inttypes.h	182;"	d
SCNiLEAST64	rapidjson/msinttypes/inttypes.h	189;"	d
SCNiLEAST8	rapidjson/msinttypes/inttypes.h	168;"	d
SCNiMAX	rapidjson/msinttypes/inttypes.h	194;"	d
SCNiPTR	rapidjson/msinttypes/inttypes.h	198;"	d
SCNiPTR	rapidjson/msinttypes/inttypes.h	201;"	d
SCNo16	rapidjson/msinttypes/inttypes.h	218;"	d
SCNo32	rapidjson/msinttypes/inttypes.h	231;"	d
SCNo64	rapidjson/msinttypes/inttypes.h	244;"	d
SCNo8	rapidjson/msinttypes/inttypes.h	205;"	d
SCNoFAST16	rapidjson/msinttypes/inttypes.h	226;"	d
SCNoFAST32	rapidjson/msinttypes/inttypes.h	239;"	d
SCNoFAST64	rapidjson/msinttypes/inttypes.h	252;"	d
SCNoFAST8	rapidjson/msinttypes/inttypes.h	213;"	d
SCNoLEAST16	rapidjson/msinttypes/inttypes.h	222;"	d
SCNoLEAST32	rapidjson/msinttypes/inttypes.h	235;"	d
SCNoLEAST64	rapidjson/msinttypes/inttypes.h	248;"	d
SCNoLEAST8	rapidjson/msinttypes/inttypes.h	209;"	d
SCNoMAX	rapidjson/msinttypes/inttypes.h	257;"	d
SCNoPTR	rapidjson/msinttypes/inttypes.h	263;"	d
SCNoPTR	rapidjson/msinttypes/inttypes.h	268;"	d
SCNu16	rapidjson/msinttypes/inttypes.h	219;"	d
SCNu32	rapidjson/msinttypes/inttypes.h	232;"	d
SCNu64	rapidjson/msinttypes/inttypes.h	245;"	d
SCNu8	rapidjson/msinttypes/inttypes.h	206;"	d
SCNuFAST16	rapidjson/msinttypes/inttypes.h	227;"	d
SCNuFAST32	rapidjson/msinttypes/inttypes.h	240;"	d
SCNuFAST64	rapidjson/msinttypes/inttypes.h	253;"	d
SCNuFAST8	rapidjson/msinttypes/inttypes.h	214;"	d
SCNuLEAST16	rapidjson/msinttypes/inttypes.h	223;"	d
SCNuLEAST32	rapidjson/msinttypes/inttypes.h	236;"	d
SCNuLEAST64	rapidjson/msinttypes/inttypes.h	249;"	d
SCNuLEAST8	rapidjson/msinttypes/inttypes.h	210;"	d
SCNuMAX	rapidjson/msinttypes/inttypes.h	258;"	d
SCNuPTR	rapidjson/msinttypes/inttypes.h	264;"	d
SCNuPTR	rapidjson/msinttypes/inttypes.h	269;"	d
SCNx16	rapidjson/msinttypes/inttypes.h	220;"	d
SCNx32	rapidjson/msinttypes/inttypes.h	233;"	d
SCNx64	rapidjson/msinttypes/inttypes.h	246;"	d
SCNx8	rapidjson/msinttypes/inttypes.h	207;"	d
SCNxFAST16	rapidjson/msinttypes/inttypes.h	228;"	d
SCNxFAST32	rapidjson/msinttypes/inttypes.h	241;"	d
SCNxFAST64	rapidjson/msinttypes/inttypes.h	254;"	d
SCNxFAST8	rapidjson/msinttypes/inttypes.h	215;"	d
SCNxLEAST16	rapidjson/msinttypes/inttypes.h	224;"	d
SCNxLEAST32	rapidjson/msinttypes/inttypes.h	237;"	d
SCNxLEAST64	rapidjson/msinttypes/inttypes.h	250;"	d
SCNxLEAST8	rapidjson/msinttypes/inttypes.h	211;"	d
SCNxMAX	rapidjson/msinttypes/inttypes.h	259;"	d
SCNxPTR	rapidjson/msinttypes/inttypes.h	265;"	d
SCNxPTR	rapidjson/msinttypes/inttypes.h	270;"	d
SIG_ATOMIC_MAX	rapidjson/msinttypes/stdint.h	246;"	d
SIG_ATOMIC_MIN	rapidjson/msinttypes/stdint.h	245;"	d
SIZE_MAX	rapidjson/msinttypes/stdint.h	250;"	d
SIZE_MAX	rapidjson/msinttypes/stdint.h	252;"	d
SPECIAL_SEPARATORS	cppjieba/SegmentBase.hpp	/^const char* const SPECIAL_SEPARATORS = " \\t\\n\\xEF\\xBC\\x8C\\xE3\\x80\\x82";$/;"	m	namespace:cppjieba
SRCS	Makefile	/^SRCS = $(wildcard ${DIR_SRC}\/*.c) $(wildcard ${DIR_SRC}\/*.cpp)$/;"	m
SRCS	database/Makefile	/^SRCS = $(wildcard ${DIR_SRC}\/*.c) $(wildcard ${DIR_SRC}\/*.cpp)$/;"	m
SRCS	http/Makefile	/^SRCS = $(wildcard ${DIR_SRC}\/*.c) $(wildcard ${DIR_SRC}\/*.cpp) $/;"	m
STATIC_ASSERTION_FAILURE	rapidjson/rapidjson.h	/^template <> struct STATIC_ASSERTION_FAILURE<true> { enum { value = 1 }; };$/;"	s
STATUS_SUM	cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon16
STOP_WORD_PATH	http/HttpServer.cpp	/^static const char* const STOP_WORD_PATH = "dict\/stop_words.utf8";$/;"	v	file:
SValue	rapidjson/schema.h	/^    typedef GenericValue<EncodingType, AllocatorType> SValue;$/;"	t	class:internal::Schema
ScanCopyUnescapedString	rapidjson/reader.h	/^    static RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(InputStream&, OutputStream&) {$/;"	f	class:GenericReader
ScanCopyUnescapedString	rapidjson/reader.h	/^    static RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(InsituStringStream& is, InsituStringStream& os) {$/;"	f	class:GenericReader
ScanCopyUnescapedString	rapidjson/reader.h	/^    static RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(StringStream& is, StackStream<char>& os) {$/;"	f	class:GenericReader
ScanWriteUnescapedString	rapidjson/writer.h	/^    bool ScanWriteUnescapedString(GenericStringStream<SourceEncoding>& is, size_t length) {$/;"	f	class:Writer
ScanWriteUnescapedString	rapidjson/writer.h	/^inline bool Writer<StringBuffer>::ScanWriteUnescapedString(StringStream& is, size_t length) {$/;"	f	class:Writer
Schema	rapidjson/schema.h	/^    Schema(SchemaDocumentType* schemaDocument, const PointerType& p, const ValueType& value, const ValueType& document, AllocatorType* allocator) :$/;"	f	class:internal::Schema
Schema	rapidjson/schema.h	/^class Schema {$/;"	c	namespace:internal
SchemaArray	rapidjson/schema.h	/^        SchemaArray() : schemas(), count() {}$/;"	f	struct:internal::Schema::SchemaArray
SchemaArray	rapidjson/schema.h	/^    struct SchemaArray {$/;"	s	class:internal::Schema
SchemaDocument	rapidjson/fwd.h	/^typedef GenericSchemaDocument<Value, CrtAllocator> SchemaDocument;$/;"	t
SchemaDocument	rapidjson/schema.h	/^typedef GenericSchemaDocument<Value> SchemaDocument;$/;"	t
SchemaEntry	rapidjson/schema.h	/^        SchemaEntry(const PointerType& p, SchemaType* s, bool o, Allocator* allocator) : pointer(p, allocator), schema(s), owned(o) {}$/;"	f	struct:GenericSchemaDocument::SchemaEntry
SchemaEntry	rapidjson/schema.h	/^    struct SchemaEntry {$/;"	s	class:GenericSchemaDocument
SchemaRefEntry	rapidjson/schema.h	/^        SchemaRefEntry(const PointerType& s, const PointerType& t, const SchemaType** outSchema, Allocator *allocator) : source(s, allocator), target(t, allocator), schema(outSchema) {}$/;"	f	struct:GenericSchemaDocument::SchemaRefEntry
SchemaRefEntry	rapidjson/schema.h	/^    struct SchemaRefEntry {$/;"	s	class:GenericSchemaDocument
SchemaType	rapidjson/schema.h	/^    typedef Schema<SchemaDocumentType> SchemaType;$/;"	t	class:internal::Schema
SchemaType	rapidjson/schema.h	/^    typedef Schema<SchemaDocumentType> SchemaType;$/;"	t	struct:internal::SchemaValidationContext
SchemaType	rapidjson/schema.h	/^    typedef internal::Schema<GenericSchemaDocument> SchemaType;$/;"	t	class:GenericSchemaDocument
SchemaType	rapidjson/schema.h	/^    typedef typename SchemaDocumentType::SchemaType SchemaType;$/;"	t	class:GenericSchemaValidator
SchemaValidatingReader	rapidjson/schema.h	/^    SchemaValidatingReader(InputStream& is, const SchemaDocumentType& sd) : is_(is), sd_(sd), invalidSchemaKeyword_(), isValid_(true) {}$/;"	f	class:SchemaValidatingReader
SchemaValidatingReader	rapidjson/schema.h	/^class SchemaValidatingReader {$/;"	c
SchemaValidationContext	rapidjson/schema.h	/^    SchemaValidationContext(SchemaValidatorFactoryType& f, const SchemaType* s) :$/;"	f	struct:internal::SchemaValidationContext
SchemaValidationContext	rapidjson/schema.h	/^struct SchemaValidationContext {$/;"	s	namespace:internal
SchemaValidator	rapidjson/fwd.h	/^typedef GenericSchemaValidator<SchemaDocument, BaseReaderHandler<UTF8<char>, void>, CrtAllocator> SchemaValidator;$/;"	t
SchemaValidator	rapidjson/schema.h	/^typedef GenericSchemaValidator<SchemaDocument> SchemaValidator;$/;"	t
SchemaValidatorFactoryType	rapidjson/schema.h	/^    typedef ISchemaStateFactory<SchemaType> SchemaValidatorFactoryType;$/;"	t	struct:internal::SchemaValidationContext
SchemaValueType	rapidjson/schema.h	/^    enum SchemaValueType {$/;"	g	class:internal::Schema
Score	cppjieba/TextRankExtractor.hpp	/^      typedef double Score;$/;"	t	class:cppjieba::TextRankExtractor::WordGraph
Search	rapidjson/internal/regex.h	/^    bool Search(InputStream& is) {$/;"	f	class:internal::GenericRegexSearch
Search	rapidjson/internal/regex.h	/^    bool Search(const Ch* s) {$/;"	f	class:internal::GenericRegexSearch
SearchWithAnchoring	rapidjson/internal/regex.h	/^    bool SearchWithAnchoring(InputStream& is, bool anchorBegin, bool anchorEnd) {$/;"	f	class:internal::GenericRegexSearch
SegmentBase	cppjieba/SegmentBase.hpp	/^  SegmentBase() {$/;"	f	class:cppjieba::SegmentBase
SegmentBase	cppjieba/SegmentBase.hpp	/^class SegmentBase {$/;"	c	namespace:cppjieba
SegmentTagged	cppjieba/SegmentTagged.hpp	/^  SegmentTagged() {$/;"	f	class:cppjieba::SegmentTagged
SegmentTagged	cppjieba/SegmentTagged.hpp	/^class SegmentTagged : public SegmentBase{$/;"	c	namespace:cppjieba
SelectIf	rapidjson/internal/meta.h	/^template <typename C, typename T1, typename T2> struct SelectIf : SelectIfCond<C::Value, T1, T2> {};$/;"	s	namespace:internal
SelectIfCond	rapidjson/internal/meta.h	/^template <bool C, typename T1, typename T2> struct SelectIfCond : SelectIfImpl<C>::template Apply<T1,T2> {};$/;"	s	namespace:internal
SelectIfImpl	rapidjson/internal/meta.h	/^template <> struct SelectIfImpl<false> { template <typename T1, typename T2> struct Apply { typedef T2 Type; }; };$/;"	s	namespace:internal
SelectIfImpl	rapidjson/internal/meta.h	/^template <bool C> struct SelectIfImpl { template <typename T1, typename T2> struct Apply { typedef T1 Type; }; };$/;"	s	namespace:internal
SequentialLetterRule	cppjieba/HMMSegment.hpp	/^  RuneStrArray::const_iterator SequentialLetterRule(RuneStrArray::const_iterator begin, RuneStrArray::const_iterator end) const {$/;"	f	class:cppjieba::HMMSegment
Set	rapidjson/document.h	/^    ValueType& Set(const T& data) { return internal::TypeHelper<ValueType, T>::Set(*this, data); }$/;"	f	class:GenericValue
Set	rapidjson/document.h	/^    ValueType& Set(const T& data, AllocatorType& allocator) { return internal::TypeHelper<ValueType, T>::Set(*this, data, allocator); }$/;"	f	class:GenericValue
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, ArrayType data) { return v = data; }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, ArrayType data, typename ValueType::AllocatorType&) { return v = data; }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, ObjectType data) { return v = data; }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, ObjectType data, typename ValueType::AllocatorType&) { return v = data; }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, bool data) { return v.SetBool(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, bool data, typename ValueType::AllocatorType&) { return v.SetBool(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, const StringType data) { return v.SetString(typename ValueType::StringRefType(data)); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, const StringType data, typename ValueType::AllocatorType& a) { return v.SetString(data, a); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, const StringType& data, typename ValueType::AllocatorType& a) { return v.SetString(data, a); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, double data) { return v.SetDouble(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, double data, typename ValueType::AllocatorType&) { return v.SetDouble(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, float data) { return v.SetFloat(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, float data, typename ValueType::AllocatorType&) { return v.SetFloat(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, int data) { return v.SetInt(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, int data, typename ValueType::AllocatorType&) { return v.SetInt(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, int64_t data) { return v.SetInt64(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, int64_t data, typename ValueType::AllocatorType&) { return v.SetInt64(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, uint64_t data) { return v.SetUint64(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, uint64_t data, typename ValueType::AllocatorType&) { return v.SetUint64(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, unsigned data) { return v.SetUint(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/document.h	/^    static ValueType& Set(ValueType& v, unsigned data, typename ValueType::AllocatorType&) { return v.SetUint(data); }$/;"	f	struct:internal::TypeHelper
Set	rapidjson/error/error.h	/^    void Set(ParseErrorCode code, size_t offset = 0) { code_ = code; offset_ = offset; }$/;"	f	struct:ParseResult
Set	rapidjson/pointer.h	/^        Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, T value) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    Set(ValueType& root, T value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    ValueType& Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, ValueType& value) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    ValueType& Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const Ch* value) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    ValueType& Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const ValueType& value) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    ValueType& Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const std::basic_string<Ch>& value) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    ValueType& Set(ValueType& root, ValueType& value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    ValueType& Set(ValueType& root, const Ch* value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    ValueType& Set(ValueType& root, const ValueType& value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Set	rapidjson/pointer.h	/^    ValueType& Set(ValueType& root, const std::basic_string<Ch>& value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
SetArray	rapidjson/document.h	/^    GenericValue& SetArray() { this->~GenericValue(); new (this) GenericValue(kArrayType); return *this; }$/;"	f	class:GenericValue
SetArrayRaw	rapidjson/document.h	/^    void SetArrayRaw(GenericValue* values, SizeType count, Allocator& allocator) {$/;"	f	class:GenericValue
SetBool	rapidjson/document.h	/^    GenericValue& SetBool(bool b) { this->~GenericValue(); new (this) GenericValue(b); return *this; }$/;"	f	class:GenericValue
SetDouble	rapidjson/document.h	/^    GenericValue& SetDouble(double d)       { this->~GenericValue(); new (this) GenericValue(d);    return *this; }$/;"	f	class:GenericValue
SetElementsPointer	rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE GenericValue* SetElementsPointer(GenericValue* elements) { return RAPIDJSON_SETPOINTER(GenericValue, data_.a.elements, elements); }$/;"	f	class:GenericValue
SetFloat	rapidjson/document.h	/^    GenericValue& SetFloat(float f)         { this->~GenericValue(); new (this) GenericValue(static_cast<double>(f)); return *this; }$/;"	f	class:GenericValue
SetFormatOptions	rapidjson/prettywriter.h	/^    PrettyWriter& SetFormatOptions(PrettyFormatOptions options) {$/;"	f	class:PrettyWriter
SetIndent	rapidjson/prettywriter.h	/^    PrettyWriter& SetIndent(Ch indentChar, unsigned indentCharCount) {$/;"	f	class:PrettyWriter
SetInt	rapidjson/document.h	/^    GenericValue& SetInt(int i)             { this->~GenericValue(); new (this) GenericValue(i);    return *this; }$/;"	f	class:GenericValue
SetInt64	rapidjson/document.h	/^    GenericValue& SetInt64(int64_t i64)     { this->~GenericValue(); new (this) GenericValue(i64);  return *this; }$/;"	f	class:GenericValue
SetLength	rapidjson/document.h	/^        inline void     SetLength(SizeType len) { str[LenPos] = static_cast<Ch>(MaxSize -  len); }$/;"	f	struct:GenericValue::ShortString
SetMaxDecimalPlaces	rapidjson/writer.h	/^    void SetMaxDecimalPlaces(int maxDecimalPlaces) {$/;"	f	class:Writer
SetMembersPointer	rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE Member* SetMembersPointer(Member* members) { return RAPIDJSON_SETPOINTER(Member, data_.o.members, members); }$/;"	f	class:GenericValue
SetNull	rapidjson/document.h	/^    GenericValue& SetNull() { this->~GenericValue(); new (this) GenericValue(); return *this; }$/;"	f	class:GenericValue
SetObject	rapidjson/document.h	/^    GenericValue& SetObject() { this->~GenericValue(); new (this) GenericValue(kObjectType); return *this; }$/;"	f	class:GenericValue
SetObjectRaw	rapidjson/document.h	/^    void SetObjectRaw(Member* members, SizeType count, Allocator& allocator) {$/;"	f	class:GenericValue
SetParseError	rapidjson/reader.h	/^    void SetParseError(ParseErrorCode code, size_t offset) { parseResult_.Set(code, offset); }$/;"	f	class:GenericReader
SetStaticWordWeights	cppjieba/DictTrie.hpp	/^  void SetStaticWordWeights(UserWordWeightOption option) {$/;"	f	class:cppjieba::DictTrie
SetString	rapidjson/document.h	/^    GenericValue& SetString(StringRefType s) { this->~GenericValue(); SetStringRaw(s); return *this; }$/;"	f	class:GenericValue
SetString	rapidjson/document.h	/^    GenericValue& SetString(StringRefType s, Allocator& allocator) { this->~GenericValue(); SetStringRaw(s, allocator); return *this; }$/;"	f	class:GenericValue
SetString	rapidjson/document.h	/^    GenericValue& SetString(const Ch* s, Allocator& allocator) { return SetString(StringRef(s), allocator); }$/;"	f	class:GenericValue
SetString	rapidjson/document.h	/^    GenericValue& SetString(const Ch* s, SizeType length) { return SetString(StringRef(s, length)); }$/;"	f	class:GenericValue
SetString	rapidjson/document.h	/^    GenericValue& SetString(const Ch* s, SizeType length, Allocator& allocator) { return SetString(StringRef(s, length), allocator); }$/;"	f	class:GenericValue
SetString	rapidjson/document.h	/^    GenericValue& SetString(const std::basic_string<Ch>& s, Allocator& allocator) { return SetString(StringRef(s), allocator); }$/;"	f	class:GenericValue
SetStringPointer	rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE const Ch* SetStringPointer(const Ch* str) { return RAPIDJSON_SETPOINTER(Ch, data_.s.str, str); }$/;"	f	class:GenericValue
SetStringRaw	rapidjson/document.h	/^    void SetStringRaw(StringRefType s, Allocator& allocator) {$/;"	f	class:GenericValue
SetUint	rapidjson/document.h	/^    GenericValue& SetUint(unsigned u)       { this->~GenericValue(); new (this) GenericValue(u);    return *this; }$/;"	f	class:GenericValue
SetUint64	rapidjson/document.h	/^    GenericValue& SetUint64(uint64_t u64)   { this->~GenericValue(); new (this) GenericValue(u64);  return *this; }$/;"	f	class:GenericValue
SetValueByPointer	rapidjson/pointer.h	/^SetValueByPointer(DocumentType& document, const CharType(&source)[N], T2 value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, T2 value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^SetValueByPointer(T& root, const CharType(&source)[N], T2 value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, T2 value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const CharType(&source)[N], const std::basic_string<typename DocumentType::Ch>& value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const CharType(&source)[N], const typename DocumentType::Ch* value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const CharType(&source)[N], const typename DocumentType::ValueType& value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const CharType(&source)[N], typename DocumentType::ValueType& value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const std::basic_string<typename DocumentType::Ch>& value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::Ch* value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::ValueType& value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, typename DocumentType::ValueType& value) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const CharType(&source)[N], const std::basic_string<typename T::Ch>& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const CharType(&source)[N], const typename T::Ch* value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const CharType(&source)[N], const typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const CharType(&source)[N], typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const std::basic_string<typename T::Ch>& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::Ch* value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SfinaeTag	rapidjson/internal/meta.h	/^struct SfinaeTag {};$/;"	s	namespace:internal
ShortString	rapidjson/document.h	/^    struct ShortString {$/;"	s	class:GenericValue
Shrink	cppjieba/DictTrie.hpp	/^  void Shrink(vector<DictUnit>& units) const {$/;"	f	class:cppjieba::DictTrie
ShrinkToFit	rapidjson/internal/stack.h	/^    void ShrinkToFit() { $/;"	f	class:internal::Stack
ShrinkToFit	rapidjson/memorybuffer.h	/^    void ShrinkToFit() { stack_.ShrinkToFit(); }$/;"	f	struct:GenericMemoryBuffer
ShrinkToFit	rapidjson/stringbuffer.h	/^    void ShrinkToFit() {$/;"	f	class:GenericStringBuffer
Sign	rapidjson/internal/ieee754.h	/^    bool Sign() const { return (u_ & kSignMask) != 0; }$/;"	f	class:internal::Double
Significand	rapidjson/internal/ieee754.h	/^    uint64_t Significand() const { return u_ & kSignificandMask; }$/;"	f	class:internal::Double
Size	rapidjson/allocators.h	/^    size_t Size() const {$/;"	f	class:MemoryPoolAllocator
Size	rapidjson/document.h	/^    SizeType Size() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.size; }$/;"	f	class:GenericValue
Size	rapidjson/document.h	/^    SizeType Size() const { return value_.Size(); }$/;"	f	class:GenericArray
SizeType	rapidjson/rapidjson.h	/^typedef unsigned SizeType;$/;"	t
SkipUnescapedString	rapidjson/reader.h	/^    static RAPIDJSON_FORCEINLINE void SkipUnescapedString(InsituStringStream& is) {$/;"	f	class:GenericReader
SkipWhitespace	rapidjson/reader.h	/^inline const char* SkipWhitespace(const char* p, const char* end) {$/;"	f
SkipWhitespace	rapidjson/reader.h	/^template<> inline void SkipWhitespace(EncodedInputStream<UTF8<>, MemoryStream>& is) {$/;"	f
SkipWhitespace	rapidjson/reader.h	/^template<> inline void SkipWhitespace(InsituStringStream& is) {$/;"	f
SkipWhitespace	rapidjson/reader.h	/^template<> inline void SkipWhitespace(StringStream& is) {$/;"	f
SkipWhitespace	rapidjson/reader.h	/^void SkipWhitespace(InputStream& is) {$/;"	f
SkipWhitespaceAndComments	rapidjson/reader.h	/^    void SkipWhitespaceAndComments(InputStream& is) {$/;"	f	class:GenericReader
SkipWhitespace_SIMD	rapidjson/reader.h	/^inline const char *SkipWhitespace_SIMD(const char* p) {$/;"	f
SkipWhitespace_SIMD	rapidjson/reader.h	/^inline const char *SkipWhitespace_SIMD(const char* p, const char* end) {$/;"	f
Socket	Socket.cpp	/^Socket::Socket(int sockfd)$/;"	f	class:Socket
Socket	Socket.h	/^class Socket : private noncopyable$/;"	c
SpecialRule	cppjieba/PosTagger.hpp	/^  const char* SpecialRule(const RuneStrArray& unicode) const {$/;"	f	class:cppjieba::PosTagger
Stack	rapidjson/internal/stack.h	/^    Stack(Allocator* allocator, size_t stackCapacity) : allocator_(allocator), ownAllocator_(0), stack_(0), stackTop_(0), stackEnd_(0), initialCapacity_(stackCapacity) {$/;"	f	class:internal::Stack
Stack	rapidjson/internal/stack.h	/^    Stack(Stack&& rhs)$/;"	f	class:internal::Stack
Stack	rapidjson/internal/stack.h	/^class Stack {$/;"	c	namespace:internal
StackStream	rapidjson/reader.h	/^        StackStream(internal::Stack<StackAllocator>& stack) : stack_(stack), length_(0) {}$/;"	f	class:GenericReader::StackStream
StackStream	rapidjson/reader.h	/^    class StackStream {$/;"	c	class:GenericReader
StartArray	rapidjson/document.h	/^    bool StartArray() { new (stack_.template Push<ValueType>()) ValueType(kArrayType); return true; }$/;"	f	class:GenericDocument
StartArray	rapidjson/prettywriter.h	/^    bool StartArray() {$/;"	f	class:PrettyWriter
StartArray	rapidjson/reader.h	/^    bool StartArray() { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
StartArray	rapidjson/schema.h	/^    bool StartArray() { return true; }$/;"	f	class:internal::Hasher
StartArray	rapidjson/schema.h	/^    bool StartArray() {$/;"	f	class:GenericSchemaValidator
StartArray	rapidjson/schema.h	/^    bool StartArray(Context& context) const { $/;"	f	class:internal::Schema
StartArray	rapidjson/writer.h	/^    bool StartArray() {$/;"	f	class:Writer
StartObject	rapidjson/document.h	/^    bool StartObject() { new (stack_.template Push<ValueType>()) ValueType(kObjectType); return true; }$/;"	f	class:GenericDocument
StartObject	rapidjson/prettywriter.h	/^    bool StartObject() {$/;"	f	class:PrettyWriter
StartObject	rapidjson/reader.h	/^    bool StartObject() { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
StartObject	rapidjson/schema.h	/^    bool StartObject() { return true; }$/;"	f	class:internal::Hasher
StartObject	rapidjson/schema.h	/^    bool StartObject() {$/;"	f	class:GenericSchemaValidator
StartObject	rapidjson/schema.h	/^    bool StartObject(Context& context) const { $/;"	f	class:internal::Schema
StartObject	rapidjson/writer.h	/^    bool StartObject() {$/;"	f	class:Writer
State	rapidjson/internal/regex.h	/^    struct State {$/;"	s	class:internal::GenericRegex
State	rapidjson/internal/regex.h	/^    typedef typename RegexType::State State;$/;"	t	class:internal::GenericRegexSearch
StaticAssertTest	rapidjson/rapidjson.h	/^template <size_t x> struct StaticAssertTest {};$/;"	s
StrLen	rapidjson/internal/strfunc.h	/^inline SizeType StrLen(const Ch* s) {$/;"	f	namespace:internal
StrLen	rapidjson/internal/strfunc.h	/^inline SizeType StrLen(const char* s) {$/;"	f	namespace:internal
StrLen	rapidjson/internal/strfunc.h	/^inline SizeType StrLen(const wchar_t* s) {$/;"	f	namespace:internal
StreamLocalCopy	rapidjson/reader.h	/^    StreamLocalCopy(Stream& original) : s(original) {}$/;"	f	class:internal::StreamLocalCopy
StreamLocalCopy	rapidjson/reader.h	/^    StreamLocalCopy(Stream& original) : s(original), original_(original) {}$/;"	f	class:internal::StreamLocalCopy
StreamLocalCopy	rapidjson/reader.h	/^class StreamLocalCopy<Stream, 0> {$/;"	c	namespace:internal
StreamLocalCopy	rapidjson/reader.h	/^class StreamLocalCopy<Stream, 1> {$/;"	c	namespace:internal
StreamTraits	rapidjson/stream.h	/^struct StreamTraits {$/;"	s
StreamTraits	rapidjson/stream.h	/^struct StreamTraits<GenericInsituStringStream<Encoding> > {$/;"	s
StreamTraits	rapidjson/stream.h	/^struct StreamTraits<GenericStringStream<Encoding> > {$/;"	s
String	rapidjson/document.h	/^    bool String(const Ch* str, SizeType length, bool copy) { $/;"	f	class:GenericDocument
String	rapidjson/document.h	/^    struct String {$/;"	s	class:GenericValue
String	rapidjson/prettywriter.h	/^    bool String(const Ch* str) { return String(str, internal::StrLen(str)); }$/;"	f	class:PrettyWriter
String	rapidjson/prettywriter.h	/^    bool String(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:PrettyWriter
String	rapidjson/prettywriter.h	/^    bool String(const std::basic_string<Ch>& str) {$/;"	f	class:PrettyWriter
String	rapidjson/reader.h	/^    bool String(const Ch*, SizeType, bool) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
String	rapidjson/schema.h	/^    bool String(Context& context, const Ch* str, SizeType length, bool) const {$/;"	f	class:internal::Schema
String	rapidjson/schema.h	/^    bool String(const Ch* str, SizeType len, bool) {$/;"	f	class:internal::Hasher
String	rapidjson/schema.h	/^    bool String(const Ch* str, SizeType length, bool copy)$/;"	f	class:GenericSchemaValidator
String	rapidjson/writer.h	/^    bool String(const Ch* const& str) { return String(str, internal::StrLen(str)); }$/;"	f	class:Writer
String	rapidjson/writer.h	/^    bool String(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:Writer
String	rapidjson/writer.h	/^    bool String(const std::basic_string<Ch>& str) {$/;"	f	class:Writer
StringBuffer	rapidjson/fwd.h	/^typedef GenericStringBuffer<UTF8<char>, CrtAllocator> StringBuffer;$/;"	t
StringBuffer	rapidjson/stringbuffer.h	/^typedef GenericStringBuffer<UTF8<> > StringBuffer;$/;"	t
StringEqual	rapidjson/document.h	/^    bool StringEqual(const GenericValue<Encoding, SourceAllocator>& rhs) const {$/;"	f	class:GenericValue
StringRef	rapidjson/document.h	/^inline GenericStringRef<CharType> StringRef(const CharType* str) {$/;"	f
StringRef	rapidjson/document.h	/^inline GenericStringRef<CharType> StringRef(const CharType* str, size_t length) {$/;"	f
StringRef	rapidjson/document.h	/^inline GenericStringRef<CharType> StringRef(const std::basic_string<CharType>& str) {$/;"	f
StringRefType	rapidjson/document.h	/^    typedef GenericStringRef<Ch> StringRefType;     \/\/!< Reference to a constant string$/;"	t	class:GenericValue
StringRefType	rapidjson/document.h	/^    typedef typename ValueType::StringRefType StringRefType;$/;"	t	class:GenericArray
StringRefType	rapidjson/document.h	/^    typedef typename ValueType::StringRefType StringRefType;$/;"	t	class:GenericObject
StringStream	rapidjson/fwd.h	/^typedef GenericStringStream<UTF8<char> > StringStream;$/;"	t
StringStream	rapidjson/stream.h	/^typedef GenericStringStream<UTF8<> > StringStream;$/;"	t
StringToken	rapidjson/reader.h	/^        StringToken,$/;"	e	enum:GenericReader::Token
StringType	rapidjson/document.h	/^    typedef const typename ValueType::Ch* StringType;$/;"	t	struct:internal::TypeHelper
StringType	rapidjson/document.h	/^    typedef std::basic_string<typename ValueType::Ch> StringType;$/;"	t	struct:internal::TypeHelper
Stringify	rapidjson/pointer.h	/^    bool Stringify(OutputStream& os) const {$/;"	f	class:GenericPointer
StringifyUriFragment	rapidjson/pointer.h	/^    bool StringifyUriFragment(OutputStream& os) const {$/;"	f	class:GenericPointer
StrtodBigInteger	rapidjson/internal/strtod.h	/^inline double StrtodBigInteger(double approx, const char* decimals, size_t length, size_t decimalPosition, int exp) {$/;"	f	namespace:internal
StrtodDiyFp	rapidjson/internal/strtod.h	/^inline bool StrtodDiyFp(const char* decimals, size_t length, size_t decimalPosition, int exp, double* result) {$/;"	f	namespace:internal
StrtodFast	rapidjson/internal/strtod.h	/^inline bool StrtodFast(double d, int p, double* result) {$/;"	f	namespace:internal
StrtodFullPrecision	rapidjson/internal/strtod.h	/^inline double StrtodFullPrecision(double d, int p, const char* decimals, size_t length, size_t decimalPosition, int exp) {$/;"	f	namespace:internal
StrtodNormalPrecision	rapidjson/internal/strtod.h	/^inline double StrtodNormalPrecision(double d, int p) {$/;"	f	namespace:internal
Swap	rapidjson/pointer.h	/^    ValueType& Swap(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, ValueType& value) const {$/;"	f	class:GenericPointer
Swap	rapidjson/pointer.h	/^    ValueType& Swap(ValueType& root, ValueType& value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
SwapValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SwapValueByPointer(DocumentType& document, const CharType(&source)[N], typename DocumentType::ValueType& value) {$/;"	f
SwapValueByPointer	rapidjson/pointer.h	/^typename DocumentType::ValueType& SwapValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, typename DocumentType::ValueType& value) {$/;"	f
SwapValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SwapValueByPointer(T& root, const CharType(&source)[N], typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SwapValueByPointer	rapidjson/pointer.h	/^typename T::ValueType& SwapValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
TAIL	rapidjson/encodings.h	149;"	d
TAIL	rapidjson/encodings.h	175;"	d
TAIL	rapidjson/encodings.h	182;"	d
TAIL	rapidjson/encodings.h	201;"	d
TARGET	Makefile	/^TARGET = ${BIN_TAR_SERVER}$/;"	m
TARGET	database/Makefile	/^TARGET = ${BIN_TAR_SERVER}$/;"	m
TARGET	http/Makefile	/^TARGET = ${BIN_TAR_SERVER}$/;"	m
TAR_CLIENT	Makefile	/^TAR_CLIENT = client$/;"	m
TAR_CLIENT	database/Makefile	/^TAR_CLIENT = client$/;"	m
TAR_CLIENT	http/Makefile	/^TAR_CLIENT = client$/;"	m
TAR_SERVER	Makefile	/^TAR_SERVER = server$/;"	m
TAR_SERVER	database/Makefile	/^TAR_SERVER = server$/;"	m
TAR_SERVER	http/Makefile	/^TAR_SERVER = server$/;"	m
TRACE	Logging.h	/^        TRACE,$/;"	e	enum:Logger::LogLevel
TRANS	rapidjson/encodings.h	148;"	d
TRANS	rapidjson/encodings.h	174;"	d
TRANS	rapidjson/encodings.h	181;"	d
TRANS	rapidjson/encodings.h	200;"	d
TableContentList	http/DataBase.h	/^    typedef std::vector<std::vector<std::string>> TableContentList;$/;"	t	class:DataBase
TableInfoList	http/DataBase.h	/^    typedef std::vector<std::string> TableInfoList;$/;"	t	class:DataBase
TableInfoMap	http/DataBase.h	/^    typedef std::unordered_map<std::string, std::string> TableInfoMap;$/;"	t	class:DataBase
Tag	cppjieba/Jieba.hpp	/^  void Tag(const string& sentence, vector<pair<string, string> >& words) const {$/;"	f	class:cppjieba::Jieba
Tag	cppjieba/MPSegment.hpp	/^  bool Tag(const string& src, vector<pair<string, string> >& res) const {$/;"	f	class:cppjieba::MPSegment
Tag	cppjieba/MixSegment.hpp	/^  bool Tag(const string& src, vector<pair<string, string> >& res) const {$/;"	f	class:cppjieba::MixSegment
Tag	cppjieba/PosTagger.hpp	/^  bool Tag(const string& src, vector<pair<string, string> >& res, const SegmentTagged& segment) const {$/;"	f	class:cppjieba::PosTagger
Take	rapidjson/cursorstreamwrapper.h	/^    Ch Take() {$/;"	f	class:CursorStreamWrapper
Take	rapidjson/encodedstream.h	/^    Ch Take() { Ch c = current_; current_ = Encoding::Take(is_); return c; }$/;"	f	class:EncodedInputStream
Take	rapidjson/encodedstream.h	/^    Ch Take() { Ch c = current_; current_ = takeFunc_(*is_); return c; }$/;"	f	class:AutoUTFInputStream
Take	rapidjson/encodedstream.h	/^    Ch Take() { RAPIDJSON_ASSERT(false); return 0;}$/;"	f	class:AutoUTFOutputStream
Take	rapidjson/encodedstream.h	/^    Ch Take() { RAPIDJSON_ASSERT(false); return 0;}$/;"	f	class:EncodedOutputStream
Take	rapidjson/encodedstream.h	/^    Ch Take() { return is_.Take(); }$/;"	f	class:EncodedInputStream
Take	rapidjson/encodings.h	/^    static Ch Take(InputByteStream& is) {$/;"	f	struct:ASCII
Take	rapidjson/encodings.h	/^    static Ch Take(InputByteStream& is) {$/;"	f	struct:UTF8
Take	rapidjson/encodings.h	/^    static CharType Take(InputByteStream& is) {$/;"	f	struct:UTF16BE
Take	rapidjson/encodings.h	/^    static CharType Take(InputByteStream& is) {$/;"	f	struct:UTF16LE
Take	rapidjson/encodings.h	/^    static CharType Take(InputByteStream& is) {$/;"	f	struct:UTF32BE
Take	rapidjson/encodings.h	/^    static CharType Take(InputByteStream& is) {$/;"	f	struct:UTF32LE
Take	rapidjson/filereadstream.h	/^    Ch Take() { Ch c = *current_; Read(); return c; }$/;"	f	class:FileReadStream
Take	rapidjson/filewritestream.h	/^    char Take() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
Take	rapidjson/internal/regex.h	/^    unsigned Take() {$/;"	f	class:internal::DecodedStream
Take	rapidjson/istreamwrapper.h	/^    Ch Take() { $/;"	f	class:BasicIStreamWrapper
Take	rapidjson/memorystream.h	/^    Ch Take() { return RAPIDJSON_UNLIKELY(src_ == end_) ? '\\0' : *src_++; }$/;"	f	struct:MemoryStream
Take	rapidjson/ostreamwrapper.h	/^    char Take() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
Take	rapidjson/pointer.h	/^        Ch Take() {$/;"	f	class:GenericPointer::PercentDecodeStream
Take	rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch Take() { return Base::TakePush(); }$/;"	f	class:GenericReader::NumberStream
Take	rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch Take() { return is.Take(); }$/;"	f	class:GenericReader::NumberStream
Take	rapidjson/stream.h	/^    Ch Take() { return *src_++; }$/;"	f	struct:GenericInsituStringStream
Take	rapidjson/stream.h	/^    Ch Take() { return *src_++; }$/;"	f	struct:GenericStringStream
Take	rapidjson/stream.h	/^    Ch Take() { return is_.Take(); }$/;"	f	class:GenericStreamWrapper
TakeBOM	rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:ASCII
TakeBOM	rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF16BE
TakeBOM	rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF16LE
TakeBOM	rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF32BE
TakeBOM	rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF32LE
TakeBOM	rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF8
TakeFunc	rapidjson/encodedstream.h	/^    typedef Ch (*TakeFunc)(InputByteStream& is);$/;"	t	class:AutoUTFInputStream
TakePush	rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch TakePush() { return is.Take(); }$/;"	f	class:GenericReader::NumberStream
TakePush	rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch TakePush() {$/;"	f	class:GenericReader::NumberStream
TcpConnection	TcpConnection.cpp	/^TcpConnection::TcpConnection(EventLoop* loop, int sockfd, std::string name)$/;"	f	class:TcpConnection
TcpConnection	TcpConnection.h	/^class TcpConnection : private noncopyable,$/;"	c
TcpConnectionPtr	CallBack.h	/^typedef std::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t
TcpServer	TcpServer.cpp	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& inetAddress)$/;"	f	class:TcpServer
TcpServer	TcpServer.h	/^class TcpServer : private noncopyable$/;"	c
Tell	rapidjson/encodedstream.h	/^    size_t Tell() const { RAPIDJSON_ASSERT(false);  return 0; }$/;"	f	class:EncodedOutputStream
Tell	rapidjson/encodedstream.h	/^    size_t Tell() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFOutputStream
Tell	rapidjson/encodedstream.h	/^    size_t Tell() const { return is_->Tell(); }$/;"	f	class:AutoUTFInputStream
Tell	rapidjson/encodedstream.h	/^    size_t Tell() const { return is_.Tell(); }$/;"	f	class:EncodedInputStream
Tell	rapidjson/filereadstream.h	/^    size_t Tell() const { return count_ + static_cast<size_t>(current_ - buffer_); }$/;"	f	class:FileReadStream
Tell	rapidjson/filewritestream.h	/^    size_t Tell() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
Tell	rapidjson/istreamwrapper.h	/^    size_t Tell() const { return count_; }$/;"	f	class:BasicIStreamWrapper
Tell	rapidjson/memorystream.h	/^    size_t Tell() const { return static_cast<size_t>(src_ - begin_); }$/;"	f	struct:MemoryStream
Tell	rapidjson/ostreamwrapper.h	/^    size_t Tell() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
Tell	rapidjson/pointer.h	/^        size_t Tell() const { return static_cast<size_t>(src_ - head_); }$/;"	f	class:GenericPointer::PercentDecodeStream
Tell	rapidjson/reader.h	/^        size_t Tell() { return is.Tell(); }$/;"	f	class:GenericReader::NumberStream
Tell	rapidjson/stream.h	/^    size_t Tell() const { return static_cast<size_t>(src_ - head_); }$/;"	f	struct:GenericStringStream
Tell	rapidjson/stream.h	/^    size_t Tell() { return is_.Tell(); }$/;"	f	class:GenericStreamWrapper
Tell	rapidjson/stream.h	/^    size_t Tell() { return static_cast<size_t>(src_ - head_); }$/;"	f	struct:GenericInsituStringStream
TextRankExtractor	cppjieba/TextRankExtractor.hpp	/^    TextRankExtractor(const Jieba& jieba, const string& stopWordPath) : segment_(jieba.GetDictTrie(), jieba.GetHMMModel()) {$/;"	f	class:cppjieba::TextRankExtractor
TextRankExtractor	cppjieba/TextRankExtractor.hpp	/^  TextRankExtractor(const DictTrie* dictTrie, $/;"	f	class:cppjieba::TextRankExtractor
TextRankExtractor	cppjieba/TextRankExtractor.hpp	/^  TextRankExtractor(const string& dictPath, $/;"	f	class:cppjieba::TextRankExtractor
TextRankExtractor	cppjieba/TextRankExtractor.hpp	/^  class TextRankExtractor {$/;"	c	namespace:cppjieba
Thread	Thread.cpp	/^Thread::Thread()$/;"	f	class:Thread
Thread	Thread.h	/^class Thread : private noncopyable$/;"	c
ThreadCallBack	CallBack.h	/^typedef std::function<void()> ThreadCallBack;$/;"	t
ToBias	rapidjson/internal/ieee754.h	/^    uint64_t ToBias() const { return (u_ & kSignMask) ? ~u_ + 1 : u_ | kSignMask; }$/;"	f	class:internal::Double
ToDouble	rapidjson/internal/diyfp.h	/^    double ToDouble() const {$/;"	f	struct:internal::DiyFp
Token	rapidjson/pointer.h	/^    struct Token {$/;"	s	class:GenericPointer
Token	rapidjson/reader.h	/^    enum Token {$/;"	g	class:GenericReader
TokenHelper	rapidjson/schema.h	/^struct TokenHelper {$/;"	s	namespace:internal
TokenHelper	rapidjson/schema.h	/^struct TokenHelper<Stack, char> {$/;"	s	namespace:internal
Tokenize	rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE Token Tokenize(Ch c) {$/;"	f	class:GenericReader
Top	rapidjson/internal/stack.h	/^    T* Top() { $/;"	f	class:internal::Stack
Top	rapidjson/internal/stack.h	/^    const T* Top() const {$/;"	f	class:internal::Stack
Transcode	rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool Transcode(InputStream& is, OutputStream& os) {$/;"	f	struct:Transcoder
TranscodeUnsafe	rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool TranscodeUnsafe(InputStream& is, OutputStream& os) {$/;"	f	struct:Transcoder
Transcoder	rapidjson/encodings.h	/^struct Transcoder {$/;"	s
Transcoder	rapidjson/encodings.h	/^struct Transcoder<Encoding, Encoding> {$/;"	s
Transit	rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE IterativeParsingState Transit(IterativeParsingState src, Token token, IterativeParsingState dst, InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
Trie	cppjieba/Trie.hpp	/^  Trie(const vector<Unicode>& keys, const vector<const DictUnit*>& valuePointers)$/;"	f	class:cppjieba::Trie
Trie	cppjieba/Trie.hpp	/^class Trie {$/;"	c	namespace:cppjieba
TrieKey	cppjieba/Trie.hpp	/^typedef Rune TrieKey;$/;"	t	namespace:cppjieba
TrieNode	cppjieba/Trie.hpp	/^  TrieNode(): next(NULL), ptValue(NULL) {$/;"	f	class:cppjieba::TrieNode
TrieNode	cppjieba/Trie.hpp	/^class TrieNode {$/;"	c	namespace:cppjieba
TrueToken	rapidjson/reader.h	/^        TrueToken,$/;"	e	enum:GenericReader::Token
TrueType	rapidjson/internal/meta.h	/^typedef BoolType<true> TrueType;$/;"	t	namespace:internal
Type	rapidjson/internal/biginteger.h	/^    typedef uint64_t Type;$/;"	t	class:internal::BigInteger
Type	rapidjson/internal/meta.h	/^    typedef BoolType Type;$/;"	t	struct:internal::BoolType
Type	rapidjson/internal/meta.h	/^template <> struct SelectIfImpl<false> { template <typename T1, typename T2> struct Apply { typedef T2 Type; }; };$/;"	t	struct:internal::SelectIfImpl::Apply
Type	rapidjson/internal/meta.h	/^template <bool C> struct SelectIfImpl { template <typename T1, typename T2> struct Apply { typedef T1 Type; }; };$/;"	t	struct:internal::SelectIfImpl::Apply
Type	rapidjson/internal/meta.h	/^template <bool Condition, typename T = void> struct DisableIfCond { typedef T Type; };$/;"	t	struct:internal::DisableIfCond
Type	rapidjson/internal/meta.h	/^template <bool Condition, typename T = void> struct EnableIfCond  { typedef T Type; };$/;"	t	struct:internal::EnableIfCond
Type	rapidjson/internal/meta.h	/^template <typename T> struct AddConst { typedef const T Type; };$/;"	t	struct:internal::AddConst
Type	rapidjson/internal/meta.h	/^template <typename T> struct RemoveConst { typedef T Type; };$/;"	t	struct:internal::RemoveConst
Type	rapidjson/internal/meta.h	/^template <typename T> struct RemoveConst<const T> { typedef T Type; };$/;"	t	struct:internal::RemoveConst
Type	rapidjson/internal/meta.h	/^template <typename T> struct RemoveSfinaeTag<SfinaeTag&(*)(T)> { typedef T Type; };$/;"	t	struct:internal::RemoveSfinaeTag
Type	rapidjson/internal/meta.h	/^template <typename T> struct Void { typedef void Type; };$/;"	t	struct:internal::Void
Type	rapidjson/rapidjson.h	/^enum Type {$/;"	g
TypeHelper	rapidjson/document.h	/^struct TypeHelper {};$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, bool> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, const typename ValueType::Ch*> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, double> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, float> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, int64_t> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, int> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, std::basic_string<typename ValueType::Ch> > {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, typename ValueType::Array> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, typename ValueType::ConstArray> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, typename ValueType::ConstObject> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, typename ValueType::Object> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, uint64_t> {$/;"	s	namespace:internal
TypeHelper	rapidjson/document.h	/^struct TypeHelper<ValueType, unsigned> {$/;"	s	namespace:internal
U	rapidjson/document.h	/^        struct U {$/;"	s	union:GenericValue::Number
U	rapidjson/schema.h	/^        union U {$/;"	u	struct:internal::Hasher::Number
UINT16_C	rapidjson/msinttypes/stdint.h	282;"	d
UINT16_C	rapidjson/msinttypes/stdint.h	59;"	d
UINT16_C	rapidjson/msinttypes/stdint.h	71;"	d
UINT16_MAX	rapidjson/msinttypes/stdint.h	187;"	d
UINT32_C	rapidjson/msinttypes/stdint.h	283;"	d
UINT32_C	rapidjson/msinttypes/stdint.h	60;"	d
UINT32_C	rapidjson/msinttypes/stdint.h	72;"	d
UINT32_MAX	rapidjson/msinttypes/stdint.h	188;"	d
UINT64_C	rapidjson/msinttypes/stdint.h	284;"	d
UINT64_C	rapidjson/msinttypes/stdint.h	61;"	d
UINT64_C	rapidjson/msinttypes/stdint.h	73;"	d
UINT64_MAX	rapidjson/msinttypes/stdint.h	189;"	d
UINT8_C	rapidjson/msinttypes/stdint.h	281;"	d
UINT8_C	rapidjson/msinttypes/stdint.h	58;"	d
UINT8_C	rapidjson/msinttypes/stdint.h	70;"	d
UINT8_MAX	rapidjson/msinttypes/stdint.h	186;"	d
UINTMAX_C	rapidjson/msinttypes/stdint.h	293;"	d
UINTMAX_C	rapidjson/msinttypes/stdint.h	82;"	d
UINTMAX_MAX	rapidjson/msinttypes/stdint.h	233;"	d
UINTPTR_MAX	rapidjson/msinttypes/stdint.h	223;"	d
UINTPTR_MAX	rapidjson/msinttypes/stdint.h	227;"	d
UINT_FAST16_MAX	rapidjson/msinttypes/stdint.h	215;"	d
UINT_FAST32_MAX	rapidjson/msinttypes/stdint.h	216;"	d
UINT_FAST64_MAX	rapidjson/msinttypes/stdint.h	217;"	d
UINT_FAST8_MAX	rapidjson/msinttypes/stdint.h	214;"	d
UINT_LEAST16_MAX	rapidjson/msinttypes/stdint.h	201;"	d
UINT_LEAST32_MAX	rapidjson/msinttypes/stdint.h	202;"	d
UINT_LEAST64_MAX	rapidjson/msinttypes/stdint.h	203;"	d
UINT_LEAST8_MAX	rapidjson/msinttypes/stdint.h	200;"	d
UNKNOWN_TAG	cppjieba/DictTrie.hpp	/^const char* const UNKNOWN_TAG = "";$/;"	m	namespace:cppjieba
USER_DICT_PATH	http/HttpServer.cpp	/^static const char* const USER_DICT_PATH = "dict\/user.dict.utf8";$/;"	v	file:
USER_NAME	http/HttpServer.cpp	/^static const string USER_NAME = "root";$/;"	v	file:
UTF16	rapidjson/encodings.h	/^struct UTF16 {$/;"	s
UTF16BE	rapidjson/encodings.h	/^struct UTF16BE : UTF16<CharType> {$/;"	s
UTF16LE	rapidjson/encodings.h	/^struct UTF16LE : UTF16<CharType> {$/;"	s
UTF32	rapidjson/encodings.h	/^struct UTF32 {$/;"	s
UTF32BE	rapidjson/encodings.h	/^struct UTF32BE : UTF32<CharType> {$/;"	s
UTF32LE	rapidjson/encodings.h	/^struct UTF32LE : UTF32<CharType> {$/;"	s
UTF8	rapidjson/encodings.h	/^struct UTF8 {$/;"	s
UTFType	rapidjson/encodings.h	/^enum UTFType {$/;"	g
Uint	rapidjson/document.h	/^    bool Uint(unsigned i) { new (stack_.template Push<ValueType>()) ValueType(i); return true; }$/;"	f	class:GenericDocument
Uint	rapidjson/prettywriter.h	/^    bool Uint(unsigned u)       { PrettyPrefix(kNumberType); return Base::WriteUint(u); }$/;"	f	class:PrettyWriter
Uint	rapidjson/reader.h	/^    bool Uint(unsigned) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Uint	rapidjson/schema.h	/^    bool Uint(Context& context, unsigned u) const {$/;"	f	class:internal::Schema
Uint	rapidjson/schema.h	/^    bool Uint(unsigned u)   { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Uint,   (CurrentContext(), u), (u)); }$/;"	f	class:GenericSchemaValidator
Uint	rapidjson/schema.h	/^    bool Uint(unsigned u) { Number n; n.u.u = u; n.d = static_cast<double>(u); return WriteNumber(n); }$/;"	f	class:internal::Hasher
Uint	rapidjson/writer.h	/^    bool Uint(unsigned u)       { Prefix(kNumberType); return EndValue(WriteUint(u)); }$/;"	f	class:Writer
Uint64	rapidjson/document.h	/^    bool Uint64(uint64_t i) { new (stack_.template Push<ValueType>()) ValueType(i); return true; }$/;"	f	class:GenericDocument
Uint64	rapidjson/prettywriter.h	/^    bool Uint64(uint64_t u64)   { PrettyPrefix(kNumberType); return Base::WriteUint64(u64);  }$/;"	f	class:PrettyWriter
Uint64	rapidjson/reader.h	/^    bool Uint64(uint64_t) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Uint64	rapidjson/schema.h	/^    bool Uint64(Context& context, uint64_t u) const {$/;"	f	class:internal::Schema
Uint64	rapidjson/schema.h	/^    bool Uint64(uint64_t u) { Number n; n.u.u = u; n.d = static_cast<double>(u); return WriteNumber(n); }$/;"	f	class:internal::Hasher
Uint64	rapidjson/schema.h	/^    bool Uint64(uint64_t u) { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Uint64, (CurrentContext(), u), (u)); }$/;"	f	class:GenericSchemaValidator
Uint64	rapidjson/writer.h	/^    bool Uint64(uint64_t u64)   { Prefix(kNumberType); return EndValue(WriteUint64(u64)); }$/;"	f	class:Writer
Uint64Value	rapidjson/internal/ieee754.h	/^    uint64_t Uint64Value() const { return u_; }$/;"	f	class:internal::Double
Unicode	cppjieba/Unicode.hpp	/^typedef limonp::LocalVector<Rune> Unicode;$/;"	t	namespace:cppjieba
Usable	rapidjson/document.h	/^        inline static bool Usable(SizeType len) { return                       (MaxSize >= len); }$/;"	f	struct:GenericValue::ShortString
UserWordWeightOption	cppjieba/DictTrie.hpp	/^  enum UserWordWeightOption {$/;"	g	class:cppjieba::DictTrie
Validate	rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:AutoUTF
Validate	rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:Transcoder
Validate	rapidjson/encodings.h	/^    static bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:ASCII
Validate	rapidjson/encodings.h	/^    static bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:UTF16
Validate	rapidjson/encodings.h	/^    static bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:UTF32
Validate	rapidjson/encodings.h	/^    static bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:UTF8
Value	rapidjson/document.h	/^typedef GenericValue<UTF8<> > Value;$/;"	t
Value	rapidjson/fwd.h	/^typedef GenericValue<UTF8<char>, MemoryPoolAllocator<CrtAllocator> > Value;$/;"	t
Value	rapidjson/internal/ieee754.h	/^    double Value() const { return d_; }$/;"	f	class:internal::Double
Value	rapidjson/internal/meta.h	/^    enum { Value = (sizeof(Check(Host(), 0)) == sizeof(Yes)) };$/;"	e	enum:internal::IsBaseOfImpl::__anon9
Value	rapidjson/internal/meta.h	/^    static const bool Value = Cond;$/;"	m	struct:internal::BoolType
ValueIterator	rapidjson/document.h	/^    typedef GenericValue* ValueIterator;            \/\/!< Value iterator for iterating in array.$/;"	t	class:GenericValue
ValueIterator	rapidjson/document.h	/^    typedef ValueType* ValueIterator;  \/\/ This may be const or non-const iterator$/;"	t	class:GenericArray
ValueType	rapidjson/document.h	/^    typedef GenericValue<Encoding, Allocator> ValueType;    \/\/!< Value type of itself.$/;"	t	class:GenericValue
ValueType	rapidjson/document.h	/^    typedef GenericValue<Encoding, Allocator> ValueType;    \/\/!< Value type of the document.$/;"	t	class:GenericDocument
ValueType	rapidjson/document.h	/^    typedef typename internal::MaybeAddConst<Const,PlainType>::Type ValueType;$/;"	t	class:GenericArray
ValueType	rapidjson/document.h	/^    typedef typename internal::MaybeAddConst<Const,PlainType>::Type ValueType;$/;"	t	class:GenericMemberIterator
ValueType	rapidjson/document.h	/^    typedef typename internal::MaybeAddConst<Const,PlainType>::Type ValueType;$/;"	t	class:GenericObject
ValueType	rapidjson/schema.h	/^    typedef ValueT ValueType;$/;"	t	class:GenericSchemaDocument
ValueType	rapidjson/schema.h	/^    typedef typename SchemaDocumentType::ValueType ValueType;$/;"	t	class:internal::Schema
ValueType	rapidjson/schema.h	/^    typedef typename SchemaType::ValueType ValueType;$/;"	t	struct:internal::SchemaValidationContext
Viterbi	cppjieba/HMMSegment.hpp	/^  void Viterbi(RuneStrArray::const_iterator begin, $/;"	f	class:cppjieba::HMMSegment
Void	rapidjson/internal/meta.h	/^template <typename T> struct Void { typedef void Type; };$/;"	s	namespace:internal
WCHAR_MAX	rapidjson/msinttypes/stdint.h	261;"	d
WCHAR_MIN	rapidjson/msinttypes/stdint.h	258;"	d
WINT_MAX	rapidjson/msinttypes/stdint.h	265;"	d
WINT_MIN	rapidjson/msinttypes/stdint.h	264;"	d
WIStreamWrapper	rapidjson/istreamwrapper.h	/^typedef BasicIStreamWrapper<std::wistream> WIStreamWrapper;$/;"	t
WORD_TABLE_NAME	http/HttpServer.cpp	/^static const string WORD_TABLE_NAME = "word";$/;"	v	file:
WOStreamWrapper	rapidjson/ostreamwrapper.h	/^typedef BasicOStreamWrapper<std::wostream> WOStreamWrapper;$/;"	t
WeightCompare	cppjieba/DictTrie.hpp	/^  static bool WeightCompare(const DictUnit& lhs, const DictUnit& rhs) {$/;"	f	class:cppjieba::DictTrie
Word	cppjieba/KeywordExtractor.hpp	/^  struct Word {$/;"	s	class:cppjieba::KeywordExtractor
Word	cppjieba/TextRankExtractor.hpp	/^    typedef struct _Word {string word;vector<size_t> offsets;double weight;}    Word; \/\/ struct Word$/;"	t	class:cppjieba::TextRankExtractor	typeref:struct:cppjieba::TextRankExtractor::_Word
Word	cppjieba/Unicode.hpp	/^  Word(const string& w, uint32_t o)$/;"	f	struct:cppjieba::Word
Word	cppjieba/Unicode.hpp	/^  Word(const string& w, uint32_t o, uint32_t unicode_offset, uint32_t unicode_length)$/;"	f	struct:cppjieba::Word
Word	cppjieba/Unicode.hpp	/^struct Word {$/;"	s	namespace:cppjieba
WordGraph	cppjieba/TextRankExtractor.hpp	/^      WordGraph(): d(0.85) {};$/;"	f	class:cppjieba::TextRankExtractor::WordGraph
WordGraph	cppjieba/TextRankExtractor.hpp	/^      WordGraph(double in_d): d(in_d) {};$/;"	f	class:cppjieba::TextRankExtractor::WordGraph
WordGraph	cppjieba/TextRankExtractor.hpp	/^    class WordGraph{$/;"	c	class:cppjieba::TextRankExtractor
WordMap	cppjieba/TextRankExtractor.hpp	/^    typedef std::map<string,Word> WordMap;$/;"	t	class:cppjieba::TextRankExtractor
WordRange	cppjieba/Unicode.hpp	/^  WordRange(RuneStrArray::const_iterator l, RuneStrArray::const_iterator r)$/;"	f	struct:cppjieba::WordRange
WordRange	cppjieba/Unicode.hpp	/^struct WordRange {$/;"	s	namespace:cppjieba
WordWeightMax	cppjieba/DictTrie.hpp	/^    WordWeightMax,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
WordWeightMedian	cppjieba/DictTrie.hpp	/^    WordWeightMedian,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
WordWeightMin	cppjieba/DictTrie.hpp	/^    WordWeightMin,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
WriteBool	rapidjson/writer.h	/^    bool WriteBool(bool b)  {$/;"	f	class:Writer
WriteBuffer	rapidjson/schema.h	/^    bool WriteBuffer(Type type, const void* data, size_t len) {$/;"	f	class:internal::Hasher
WriteDouble	rapidjson/writer.h	/^    bool WriteDouble(double d) {$/;"	f	class:Writer
WriteDouble	rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteDouble(double d) {$/;"	f	class:Writer
WriteEndArray	rapidjson/writer.h	/^    bool WriteEndArray()    { os_->Put(']'); return true; }$/;"	f	class:Writer
WriteEndObject	rapidjson/writer.h	/^    bool WriteEndObject()   { os_->Put('}'); return true; }$/;"	f	class:Writer
WriteExponent	rapidjson/internal/dtoa.h	/^inline char* WriteExponent(int K, char* buffer) {$/;"	f	namespace:internal
WriteFlag	rapidjson/writer.h	/^enum WriteFlag {$/;"	g
WriteIndent	rapidjson/prettywriter.h	/^    void WriteIndent()  {$/;"	f	class:PrettyWriter
WriteInt	rapidjson/writer.h	/^    bool WriteInt(int i) {$/;"	f	class:Writer
WriteInt	rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteInt(int i) {$/;"	f	class:Writer
WriteInt64	rapidjson/writer.h	/^    bool WriteInt64(int64_t i64) {$/;"	f	class:Writer
WriteInt64	rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteInt64(int64_t i64) {$/;"	f	class:Writer
WriteNull	rapidjson/writer.h	/^    bool WriteNull()  {$/;"	f	class:Writer
WriteNumber	rapidjson/schema.h	/^    bool WriteNumber(const Number& n) { return WriteBuffer(kNumberType, &n, sizeof(n)); }$/;"	f	class:internal::Hasher
WriteRawValue	rapidjson/writer.h	/^    bool WriteRawValue(const Ch* json, size_t length) {$/;"	f	class:Writer
WriteStartArray	rapidjson/writer.h	/^    bool WriteStartArray()  { os_->Put('['); return true; }$/;"	f	class:Writer
WriteStartObject	rapidjson/writer.h	/^    bool WriteStartObject() { os_->Put('{'); return true; }$/;"	f	class:Writer
WriteString	rapidjson/writer.h	/^    bool WriteString(const Ch* str, SizeType length)  {$/;"	f	class:Writer
WriteType	rapidjson/schema.h	/^    bool WriteType(Type type) { return WriteBuffer(type, 0, 0); }$/;"	f	class:internal::Hasher
WriteUint	rapidjson/writer.h	/^    bool WriteUint(unsigned u) {$/;"	f	class:Writer
WriteUint	rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteUint(unsigned u) {$/;"	f	class:Writer
WriteUint64	rapidjson/writer.h	/^    bool WriteUint64(uint64_t u64) {$/;"	f	class:Writer
WriteUint64	rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteUint64(uint64_t u) {$/;"	f	class:Writer
Writer	rapidjson/writer.h	/^    Writer(OutputStream& os, StackAllocator* stackAllocator = 0, size_t levelDepth = kDefaultLevelDepth) : $/;"	f	class:Writer
Writer	rapidjson/writer.h	/^    Writer(StackAllocator* allocator = 0, size_t levelDepth = kDefaultLevelDepth) :$/;"	f	class:Writer
Writer	rapidjson/writer.h	/^    Writer(Writer&& rhs) :$/;"	f	class:Writer
Writer	rapidjson/writer.h	/^class Writer {$/;"	c
Yes	rapidjson/internal/meta.h	/^    typedef char (&Yes)[1];$/;"	t	struct:internal::IsBaseOfImpl
Z16	rapidjson/reader.h	1000;"	d
Z16	rapidjson/reader.h	992;"	d
Z16	rapidjson/writer.h	381;"	d
Z16	rapidjson/writer.h	389;"	d
_MSC_INTTYPES_H_	rapidjson/msinttypes/inttypes.h	42;"	d
_MSC_STDINT_H_	rapidjson/msinttypes/stdint.h	42;"	d
_W64	rapidjson/msinttypes/stdint.h	106;"	d
_W64	rapidjson/msinttypes/stdint.h	108;"	d
_Word	cppjieba/TextRankExtractor.hpp	/^    typedef struct _Word {string word;vector<size_t> offsets;double weight;}    Word; \/\/ struct Word$/;"	s	class:cppjieba::TextRankExtractor
a	rapidjson/document.h	/^        ArrayData a;$/;"	m	union:GenericValue::Data
accept	Socket.cpp	/^int Socket::accept(InetAddress *localaddr)$/;"	f	class:Socket
accept	SocketsOps.cpp	/^int sockets::accept(int sockfd, struct sockaddr_in* sockaddr)$/;"	f	class:sockets
acceptChannel_	Acceptor.h	/^    std::shared_ptr<Channel> acceptChannel_;$/;"	m	class:Acceptor
acceptEncoding_	http/HttpRequest.cpp	/^    AcceptEncodingList acceptEncoding_;$/;"	m	class:HttpRequest::Impl	file:
acceptLanguage_	http/HttpRequest.cpp	/^    AcceptLanguageList acceptLanguage_;$/;"	m	class:HttpRequest::Impl	file:
acceptSocket_	Acceptor.h	/^    std::unique_ptr<Socket> acceptSocket_;$/;"	m	class:Acceptor
accept_	http/HttpRequest.cpp	/^    string       accept_;$/;"	m	class:HttpRequest::Impl	file:
acceptor_	TcpServer.h	/^    std::unique_ptr<Acceptor> acceptor_;$/;"	m	class:TcpServer
activeChannels_	EventLoop.h	/^    ChannelList activeChannels_;$/;"	m	class:EventLoop
active_node_infos_	cppjieba/DictTrie.hpp	/^  deque<DictUnit> active_node_infos_; \/\/ must not be vector$/;"	m	class:cppjieba::DictTrie
addEdge	cppjieba/TextRankExtractor.hpp	/^      void addEdge(Node start,Node end,double weight){$/;"	f	class:cppjieba::TextRankExtractor::WordGraph
additionalItemsSchema_	rapidjson/schema.h	/^    const SchemaType* additionalItemsSchema_;$/;"	m	class:internal::Schema
additionalItems_	rapidjson/schema.h	/^    bool additionalItems_;$/;"	m	class:internal::Schema
additionalPropertiesSchema_	rapidjson/schema.h	/^    const SchemaType* additionalPropertiesSchema_;$/;"	m	class:internal::Schema
additionalProperties_	rapidjson/schema.h	/^    bool additionalProperties_;$/;"	m	class:internal::Schema
allOf_	rapidjson/schema.h	/^    SchemaArray allOf_;$/;"	m	class:internal::Schema
allocator_	rapidjson/document.h	/^    Allocator* allocator_;$/;"	m	class:GenericDocument
allocator_	rapidjson/internal/regex.h	/^    Allocator* allocator_;$/;"	m	class:internal::GenericRegexSearch
allocator_	rapidjson/internal/stack.h	/^    Allocator* allocator_;$/;"	m	class:internal::Stack
allocator_	rapidjson/pointer.h	/^    Allocator* allocator_;                  \/\/!< The current allocator. It is either user-supplied or equal to ownAllocator_.$/;"	m	class:GenericPointer
allocator_	rapidjson/schema.h	/^    Allocator *allocator_;$/;"	m	class:GenericSchemaDocument
allocator_	rapidjson/schema.h	/^    AllocatorType* allocator_;$/;"	m	class:internal::Schema
anchorBegin_	rapidjson/internal/regex.h	/^    bool anchorBegin_;$/;"	m	class:internal::GenericRegex
anchorEnd_	rapidjson/internal/regex.h	/^    bool anchorEnd_;$/;"	m	class:internal::GenericRegex
answerId_	http/Question.h	/^    string answerId_;$/;"	m	class:Question
anyOf_	rapidjson/schema.h	/^    SchemaArray anyOf_;$/;"	m	class:internal::Schema
append	Buffer.cpp	/^void Buffer::append(char* buf, int len)$/;"	f	class:Buffer
append	Buffer.cpp	/^void Buffer::append(const char* buf, int len)$/;"	f	class:Buffer
arguments_	http/HttpRequest.cpp	/^    ArgumentMap arguments_; $/;"	m	class:HttpRequest::Impl	file:
arrayElementHashCodes	rapidjson/schema.h	/^    void* arrayElementHashCodes; \/\/ Only validator access this$/;"	m	struct:internal::SchemaValidationContext
arrayElementIndex	rapidjson/schema.h	/^    SizeType arrayElementIndex;$/;"	m	struct:internal::SchemaValidationContext
arrayUniqueness	rapidjson/schema.h	/^    bool arrayUniqueness;$/;"	m	struct:internal::SchemaValidationContext
baseAllocator_	rapidjson/allocators.h	/^    BaseAllocator* baseAllocator_;  \/\/!< base allocator for allocating memory chunks.$/;"	m	class:MemoryPoolAllocator
begin	cppjieba/Jieba.hpp	/^    size_t begin;$/;"	m	struct:cppjieba::Jieba::LocWord
begin	cppjieba/PreFilter.hpp	/^    RuneStrArray::const_iterator begin;$/;"	m	struct:cppjieba::PreFilter::Range
begin	rapidjson/document.h	/^    MemberIterator begin() const { return value_.MemberBegin(); }$/;"	f	class:GenericObject
begin	rapidjson/document.h	/^    ValueIterator begin() const { return value_.Begin(); }$/;"	f	class:GenericArray
begin	rapidjson/schema.h	/^        SizeType begin; \/\/ begin index of context.validators$/;"	m	struct:internal::Schema::SchemaArray
begin_	rapidjson/memorystream.h	/^    const Ch* begin_;   \/\/!< Original head of the string.$/;"	m	struct:MemoryStream
bindAddress	Socket.cpp	/^void Socket::bindAddress(const InetAddress& localaddr)$/;"	f	class:Socket
bindAddress	SocketsOps.cpp	/^void sockets::bindAddress(int sockfd, const struct sockaddr_in* sockaddr)$/;"	f	class:sockets
bufferEnd_	rapidjson/filewritestream.h	/^    char *bufferEnd_;$/;"	m	class:FileWriteStream
bufferLast_	rapidjson/filereadstream.h	/^    Ch *bufferLast_;$/;"	m	class:FileReadStream
bufferSize_	rapidjson/filereadstream.h	/^    size_t bufferSize_;$/;"	m	class:FileReadStream
buffer_	Buffer.h	/^    std::vector<char> buffer_;$/;"	m	class:Buffer
buffer_	LogStream.h	/^    Buffer buffer_;$/;"	m	class:LogStream
buffer_	rapidjson/filereadstream.h	/^    Ch *buffer_;$/;"	m	class:FileReadStream
buffer_	rapidjson/filewritestream.h	/^    char *buffer_;$/;"	m	class:FileWriteStream
cIterativeParsingStateCount	rapidjson/reader.h	/^        cIterativeParsingStateCount$/;"	e	enum:GenericReader::IterativeParsingState
capacity	rapidjson/allocators.h	/^        size_t capacity;    \/\/!< Capacity of the chunk in bytes (excluding the header itself).$/;"	m	struct:MemoryPoolAllocator::ChunkHeader
capacity	rapidjson/document.h	/^        SizeType capacity;$/;"	m	struct:GenericValue::ArrayData
capacity	rapidjson/document.h	/^        SizeType capacity;$/;"	m	struct:GenericValue::ObjectData
channel_	TcpConnection.h	/^    std::shared_ptr<Channel> channel_;$/;"	m	class:TcpConnection
channels_	Poller.h	/^    ChannelMap channels_;$/;"	m	class:Poller
chunkHead_	rapidjson/allocators.h	/^    ChunkHeader *chunkHead_;    \/\/!< Head of the chunk linked-list. Only the head chunk serves allocation.$/;"	m	class:MemoryPoolAllocator
chunk_capacity_	rapidjson/allocators.h	/^    size_t chunk_capacity_;     \/\/!< The minimum capacity of chunk when they are allocated.$/;"	m	class:MemoryPoolAllocator
clear	http/HttpRequest.cpp	/^void HttpRequest::Impl::clear()$/;"	f	class:HttpRequest::Impl
closeCallBack_	Channel.h	/^    EventCallBack closeCallBack_;$/;"	m	class:Channel
closeCallBack_	TcpConnection.h	/^    CloseCallBack closeCallBack_;$/;"	m	class:TcpConnection
code_	http/HttpResponse.cpp	/^    int    code_;$/;"	m	class:HttpResponse::Impl	file:
code_	rapidjson/error/error.h	/^    ParseErrorCode code_;$/;"	m	struct:ParseResult
codepoint	rapidjson/internal/regex.h	/^        unsigned codepoint;$/;"	m	struct:internal::GenericRegex::State
codepoint_	rapidjson/internal/regex.h	/^    unsigned codepoint_;$/;"	m	class:internal::DecodedStream
col_	rapidjson/cursorstreamwrapper.h	/^    size_t col_;    \/\/!< Current Column$/;"	m	class:CursorStreamWrapper
cond_	Condition.h	/^    pthread_cond_t cond_;$/;"	m	class:Condition
cond_	EventLoopThread.h	/^    std::unique_ptr<Condition> cond_;$/;"	m	class:EventLoopThread
conn_	database/DataBase.h	/^    MYSQL conn_;$/;"	m	class:DataBase
conn_	http/DataBase.h	/^    MYSQL conn_;$/;"	m	class:DataBase
connectDestroy	TcpConnection.cpp	/^void TcpConnection::connectDestroy()$/;"	f	class:TcpConnection
connectEstablish	TcpConnection.cpp	/^void TcpConnection::connectEstablish()$/;"	f	class:TcpConnection
connectionCallBack_	TcpConnection.h	/^    ConnectionCallBack connectionCallBack_;$/;"	m	class:TcpConnection
connectionCallBack_	TcpServer.h	/^    ConnectionCallBack connectionCallBack_;$/;"	m	class:TcpServer
connection_	http/HttpRequest.cpp	/^    string       connection_;$/;"	m	class:HttpRequest::Impl	file:
connections_	TcpServer.h	/^    ConnectionMap connections_;$/;"	m	class:TcpServer
contentLength_	http/HttpRequest.cpp	/^    uint64_t     contentLength_;$/;"	m	class:HttpRequest::Impl	file:
contentType	http/HttpRequest.cpp	/^string HttpRequest::contentType() const$/;"	f	class:HttpRequest
contentType_	http/HttpRequest.cpp	/^    string       contentType_;$/;"	m	class:HttpRequest::Impl	file:
contentType_	http/HttpResponse.cpp	/^    string contentType_;$/;"	m	class:HttpResponse::Impl	file:
cookie_	http/HttpRequest.cpp	/^    string       cookie_;$/;"	m	class:HttpRequest::Impl	file:
copyOptimization	rapidjson/stream.h	/^    enum { copyOptimization = 0 };$/;"	e	enum:StreamTraits::__anon11
copyOptimization	rapidjson/stream.h	/^    enum { copyOptimization = 1 };$/;"	e	enum:StreamTraits::__anon12
copyOptimization	rapidjson/stream.h	/^    enum { copyOptimization = 1 };$/;"	e	enum:StreamTraits::__anon13
count	rapidjson/schema.h	/^        SizeType count;$/;"	m	struct:internal::Schema::SchemaArray
count_	rapidjson/filereadstream.h	/^    size_t count_;  \/\/!< Number of characters read$/;"	m	class:FileReadStream
count_	rapidjson/internal/biginteger.h	/^    size_t count_;$/;"	m	class:internal::BigInteger
count_	rapidjson/istreamwrapper.h	/^    size_t count_;  \/\/!< Number of characters read. Note:$/;"	m	class:BasicIStreamWrapper
cppjieba	cppjieba/DictTrie.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/FullSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/HMMModel.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/HMMSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/Jieba.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/KeywordExtractor.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/MPSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/MixSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/PosTagger.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/PreFilter.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/QuerySegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/SegmentBase.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/SegmentTagged.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/TextRankExtractor.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/Trie.hpp	/^namespace cppjieba {$/;"	n
cppjieba	cppjieba/Unicode.hpp	/^namespace cppjieba {$/;"	n
createBlockSocket	SocketsOps.cpp	/^int sockets::createBlockSocket(sa_family_t family)$/;"	f	class:sockets
createNonBlockSocket	SocketsOps.cpp	/^int sockets::createNonBlockSocket(sa_family_t family)$/;"	f	class:sockets
current_	rapidjson/encodedstream.h	/^    Ch current_;$/;"	m	class:AutoUTFInputStream
current_	rapidjson/encodedstream.h	/^    Ch current_;$/;"	m	class:EncodedInputStream
current_	rapidjson/filereadstream.h	/^    Ch *current_;$/;"	m	class:FileReadStream
current_	rapidjson/filewritestream.h	/^    char *current_;$/;"	m	class:FileWriteStream
cursor_	cppjieba/PreFilter.hpp	/^  RuneStrArray::const_iterator cursor_;$/;"	m	class:cppjieba::PreFilter
d	cppjieba/TextRankExtractor.hpp	/^      double d;$/;"	m	class:cppjieba::TextRankExtractor::WordGraph
d	rapidjson/document.h	/^        double d;$/;"	m	union:GenericValue::Number
d	rapidjson/schema.h	/^        double d;$/;"	m	struct:internal::Hasher::Number
d_	rapidjson/document.h	/^        GenericDocument& d_;$/;"	m	struct:GenericDocument::ClearStackOnExit
d_	rapidjson/internal/ieee754.h	/^        double d_;$/;"	m	union:internal::Double::__anon8
dataBase_	http/HttpServer.h	/^    std::unique_ptr<DataBase> dataBase_;$/;"	m	class:HttpServer
data_	rapidjson/document.h	/^        : data_() {$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    Data data_;$/;"	m	class:GenericValue
data_	rapidjson/document.h	/^    GenericValue() RAPIDJSON_NOEXCEPT : data_() { data_.f.flags = kNullFlag; }$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    GenericValue(Array a) RAPIDJSON_NOEXCEPT : data_(a.value_.data_) {$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    GenericValue(GenericValue&& rhs) RAPIDJSON_NOEXCEPT : data_(rhs.data_) {$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    GenericValue(Object o) RAPIDJSON_NOEXCEPT : data_(o.value_.data_) {$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    GenericValue(const Ch* s, SizeType length) RAPIDJSON_NOEXCEPT : data_() { SetStringRaw(StringRef(s, length)); }$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    explicit GenericValue(StringRefType s) RAPIDJSON_NOEXCEPT : data_() { SetStringRaw(s); }$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    explicit GenericValue(Type type) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    explicit GenericValue(double d) RAPIDJSON_NOEXCEPT : data_() { data_.n.d = d; data_.f.flags = kNumberDoubleFlag; }$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    explicit GenericValue(float f) RAPIDJSON_NOEXCEPT : data_() { data_.n.d = static_cast<double>(f); data_.f.flags = kNumberDoubleFlag; }$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    explicit GenericValue(int i) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    explicit GenericValue(int64_t i64) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    explicit GenericValue(uint64_t u64) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
data_	rapidjson/document.h	/^    explicit GenericValue(unsigned u) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
date_	http/HttpResponse.cpp	/^    string date_;$/;"	m	class:HttpResponse::Impl	file:
date_	http/Question.h	/^    string date_;$/;"	m	class:Question
defaultFlush	Logging.cpp	/^void defaultFlush()$/;"	f
defaultOutput	Logging.cpp	/^void defaultOutput(const char* msg, int len)$/;"	f
deleteFromTable	database/DataBase.cpp	/^bool DataBase::deleteFromTable(const string& table, const string& key, const string& value)$/;"	f	class:DataBase
deleteFromTable	http/DataBase.cpp	/^bool DataBase::deleteFromTable(const string& table, const string& key, const string& value)$/;"	f	class:DataBase
dependencies	rapidjson/schema.h	/^        bool* dependencies;$/;"	m	struct:internal::Schema::Property
dependenciesSchema	rapidjson/schema.h	/^        const SchemaType* dependenciesSchema;$/;"	m	struct:internal::Schema::Property
dependenciesValidatorIndex	rapidjson/schema.h	/^        SizeType dependenciesValidatorIndex;$/;"	m	struct:internal::Schema::Property
depth_	rapidjson/schema.h	/^    unsigned depth_;$/;"	m	class:GenericSchemaValidator
dictTrie_	cppjieba/FullSegment.hpp	/^  const DictTrie* dictTrie_;$/;"	m	class:cppjieba::FullSegment
dictTrie_	cppjieba/MPSegment.hpp	/^  const DictTrie* dictTrie_;$/;"	m	class:cppjieba::MPSegment
dict_trie_	cppjieba/Jieba.hpp	/^  DictTrie dict_trie_;$/;"	m	class:cppjieba::Jieba
digits_	rapidjson/internal/biginteger.h	/^    Type digits_[kCapacity];$/;"	m	class:internal::BigInteger
dir	Makefile	/^dir=$(notdir $(SRCS))$/;"	m
dir	database/Makefile	/^dir=$(notdir $(SRCS))$/;"	m
dir	http/Makefile	/^dir=$(notdir $(SRCS))$/;"	m
disableAll	Channel.h	/^    void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:Channel
disableReading	Channel.h	/^    void disableReading() { events_ &= (~kReadEvent); update(); }$/;"	f	class:Channel
disableWriting	Channel.h	/^    void disableWriting() { events_ &= (~kWriteEvent); update(); }$/;"	f	class:Channel
doPendingFunctors	EventLoop.cpp	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
documentStack_	rapidjson/schema.h	/^    internal::Stack<StateAllocator> documentStack_;  \/\/!< stack to store the current path of validating document (Ch)$/;"	m	class:GenericSchemaValidator
dst_	rapidjson/stream.h	/^    Ch* dst_;$/;"	m	struct:GenericInsituStringStream
dtoa	rapidjson/internal/dtoa.h	/^inline char* dtoa(double value, char* buffer, int maxDecimalPlaces = 324) {$/;"	f	namespace:internal
e	rapidjson/internal/diyfp.h	/^    int e;$/;"	m	struct:internal::DiyFp
elements	rapidjson/document.h	/^        GenericValue* elements;$/;"	m	struct:GenericValue::ArrayData
emitProbB	cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbB;$/;"	m	struct:cppjieba::HMMModel
emitProbE	cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbE;$/;"	m	struct:cppjieba::HMMModel
emitProbM	cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbM;$/;"	m	struct:cppjieba::HMMModel
emitProbS	cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbS;$/;"	m	struct:cppjieba::HMMModel
emitProbVec	cppjieba/HMMModel.hpp	/^  vector<EmitProbMap* > emitProbVec;$/;"	m	struct:cppjieba::HMMModel
emptyString	rapidjson/document.h	/^    static const Ch emptyString[];$/;"	m	struct:GenericStringRef
emptyString	rapidjson/document.h	/^const CharType GenericStringRef<CharType>::emptyString[] = { CharType() };$/;"	m	class:GenericStringRef
enableReading	Channel.h	/^    void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:Channel
enableWritableBytes	Buffer.cpp	/^void Buffer::enableWritableBytes(int len)$/;"	f	class:Buffer
enableWriting	Channel.h	/^    void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:Channel
end	cppjieba/Jieba.hpp	/^    size_t end;$/;"	m	struct:cppjieba::Jieba::LocWord
end	cppjieba/PreFilter.hpp	/^    RuneStrArray::const_iterator end;$/;"	m	struct:cppjieba::PreFilter::Range
end	rapidjson/document.h	/^    MemberIterator end() const { return value_.MemberEnd(); }$/;"	f	class:GenericObject
end	rapidjson/document.h	/^    ValueIterator end() const { return value_.End(); }$/;"	f	class:GenericArray
end	rapidjson/internal/regex.h	/^        unsigned end;$/;"	m	struct:internal::GenericRegex::Range
end_	rapidjson/memorystream.h	/^    const Ch* end_;     \/\/!< End of stream.$/;"	m	struct:MemoryStream
end_	rapidjson/pointer.h	/^        const Ch* end_;     \/\/!< Past-the-end position.$/;"	m	class:GenericPointer::PercentDecodeStream
enumCount_	rapidjson/schema.h	/^    SizeType enumCount_;$/;"	m	class:internal::Schema
enum_	rapidjson/schema.h	/^    uint64_t* enum_;$/;"	m	class:internal::Schema
eof_	rapidjson/filereadstream.h	/^    bool eof_;$/;"	m	class:FileReadStream
epollfd_	EPollPoller.h	/^    int epollfd_;$/;"	m	class:EPollPoller
eventLoopThreadPool_	TcpServer.h	/^    std::unique_ptr<EventLoopThreadPool> eventLoopThreadPool_;$/;"	m	class:TcpServer
eventLoopThreads_	EventLoopThreadPool.h	/^    std::vector<EventLoopThreadPtr> eventLoopThreads_;$/;"	m	class:EventLoopThreadPool
eventLoops_	EventLoopThreadPool.h	/^    std::vector<EventLoop*> eventLoops_;$/;"	m	class:EventLoopThreadPool
events	Channel.h	/^    unsigned short events() { return events_; }$/;"	f	class:Channel
events_	Channel.h	/^    unsigned short events_;$/;"	m	class:Channel
events_	EPollPoller.h	/^    EventList events_;$/;"	m	class:EPollPoller
exclusiveMaximum_	rapidjson/schema.h	/^    bool exclusiveMaximum_;$/;"	m	class:internal::Schema
exclusiveMinimum_	rapidjson/schema.h	/^    bool exclusiveMinimum_;$/;"	m	class:internal::Schema
extractor	cppjieba/Jieba.hpp	/^  KeywordExtractor extractor;$/;"	m	class:cppjieba::Jieba
f	rapidjson/document.h	/^        Flag f;$/;"	m	union:GenericValue::Data
f	rapidjson/internal/diyfp.h	/^    uint64_t f;$/;"	m	struct:internal::DiyFp
factory	rapidjson/schema.h	/^    SchemaValidatorFactoryType& factory;$/;"	m	struct:internal::SchemaValidationContext
fd	Channel.h	/^    int fd() { return fd_; }$/;"	f	class:Channel
fd	Socket.h	/^    int fd()  { return sockfd_; }$/;"	f	class:Socket
fd_	Channel.h	/^    int fd_;$/;"	m	class:Channel
filename_	Logging.h	/^        std::string filename_;$/;"	m	class:Logger::Impl
fillActiveQueue	EPollPoller.cpp	/^void EPollPoller::fillActiveQueue(ChannelList& activeChannels, int numEvents)$/;"	f	class:EPollPoller
finish	Logging.cpp	/^void Logger::Impl::finish()$/;"	f	class:Logger::Impl
flags	rapidjson/document.h	/^        uint16_t flags;$/;"	m	struct:GenericValue::Flag
formatArgument	http/HttpRequest.cpp	/^void HttpRequest::Impl::formatArgument(const string& header)$/;"	f	class:HttpRequest::Impl
formatDate	http/HttpResponse.cpp	/^void HttpResponse::Impl::formatDate()$/;"	f	class:HttpResponse::Impl
formatLevel	Logging.cpp	/^void Logger::Impl::formatLevel()$/;"	f	class:Logger::Impl
formatMethod	http/HttpRequest.cpp	/^void HttpRequest::Impl::formatMethod(const string& header, $/;"	f	class:HttpRequest::Impl
formatOptions_	rapidjson/prettywriter.h	/^    PrettyFormatOptions formatOptions_;$/;"	m	class:PrettyWriter
formatRequestHeader	http/HttpRequest.cpp	/^void HttpRequest::Impl::formatRequestHeader(const string& header, const string& pattern,$/;"	f	class:HttpRequest::Impl
formatSource	http/HttpRequest.cpp	/^void HttpRequest::Impl::formatSource(const string& header,$/;"	f	class:HttpRequest::Impl
formatThreadId	Logging.cpp	/^void Logger::Impl::formatThreadId()$/;"	f	class:Logger::Impl
formatTime	Logging.cpp	/^void Logger::Impl::formatTime()$/;"	f	class:Logger::Impl
formatVersion	http/HttpRequest.cpp	/^void HttpRequest::Impl::formatVersion(const string& header,$/;"	f	class:HttpRequest::Impl
fp_	rapidjson/filereadstream.h	/^    std::FILE* fp_;$/;"	m	class:FileReadStream
fp_	rapidjson/filewritestream.h	/^    std::FILE* fp_;$/;"	m	class:FileWriteStream
freq_sum_	cppjieba/DictTrie.hpp	/^  double freq_sum_;$/;"	m	class:cppjieba::DictTrie
full_seg_	cppjieba/Jieba.hpp	/^  FullSegment full_seg_;$/;"	m	class:cppjieba::Jieba
funcname_	Logging.h	/^        std::string funcname_;$/;"	m	class:Logger::Impl
g_flush	Logging.cpp	/^static FlushCallBack g_flush = std::bind(defaultFlush);$/;"	v	file:
g_output	Logging.cpp	/^static OuputCallBack g_output = std::bind(defaultOutput, std::placeholders::_1, std::placeholders::_2);$/;"	v	file:
generateResponse	http/HttpResponse.cpp	/^string HttpResponse::generateResponse(const string& body)$/;"	f	class:HttpResponse
getAllTables	database/DataBase.cpp	/^vector<string> DataBase::getAllTables()$/;"	f	class:DataBase
getAllTables	http/DataBase.cpp	/^vector<string> DataBase::getAllTables()$/;"	f	class:DataBase
getArguments	http/HttpRequest.cpp	/^HttpRequest::ArgumentMap HttpRequest::getArguments() const$/;"	f	class:HttpRequest
getLocalAddress	SocketsOps.cpp	/^void sockets::getLocalAddress(int sockfd, InetAddress& localAddress)$/;"	f	class:sockets
getLoop	TcpConnection.h	/^    EventLoop* getLoop() { return loop_; }$/;"	f	class:TcpConnection
getPeerAddress	SocketsOps.cpp	/^void sockets::getPeerAddress(int sockfd, InetAddress& peerAddress)$/;"	f	class:sockets
getSockAddr	InetAddress.h	/^    const struct sockaddr_in* getSockAddr() const { return &sockaddr_; }$/;"	f	class:InetAddress
getSockAddr	InetAddress.h	/^    struct sockaddr_in* getSockAddr() { return &sockaddr_; }$/;"	f	class:InetAddress
getTableContent	database/DataBase.cpp	/^vector<vector<string>> DataBase::getTableContent(const string& table)$/;"	f	class:DataBase
getTableContent	http/DataBase.cpp	/^DataBase::TableContentList DataBase::getTableContent(const string& table)$/;"	f	class:DataBase
graph	cppjieba/TextRankExtractor.hpp	/^      Graph graph;$/;"	m	class:cppjieba::TextRankExtractor::WordGraph
handleClose	EventLoop.cpp	/^void EventLoop::handleClose()$/;"	f	class:EventLoop
handleClose	TcpConnection.cpp	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleEvent	Channel.cpp	/^void Channel::handleEvent()$/;"	f	class:Channel
handleEventWithGuard	Channel.cpp	/^void Channel::handleEventWithGuard()$/;"	f	class:Channel
handleGetMethod	http/HttpServer.cpp	/^void HttpServer::handleGetMethod(const TcpConnectionPtr& conn)$/;"	f	class:HttpServer
handlePostMethod	http/HttpServer.cpp	/^void HttpServer::handlePostMethod(const TcpConnectionPtr& conn)$/;"	f	class:HttpServer
handleRead	Acceptor.cpp	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	EventLoop.cpp	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	TcpConnection.cpp	/^void TcpConnection::handleRead()$/;"	f	class:TcpConnection
handleWrite	TcpConnection.cpp	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
hasBOM_	rapidjson/encodedstream.h	/^    bool hasBOM_;$/;"	m	class:AutoUTFInputStream
hasDependencies_	rapidjson/schema.h	/^    bool hasDependencies_;$/;"	m	class:internal::Schema
hasRequired_	rapidjson/schema.h	/^    bool hasRequired_;$/;"	m	class:internal::Schema
hasRoot_	rapidjson/writer.h	/^    bool hasRoot_;$/;"	m	class:Writer
hasSchemaDependencies_	rapidjson/schema.h	/^    bool hasSchemaDependencies_;$/;"	m	class:internal::Schema
hashcode	rapidjson/document.h	/^        SizeType hashcode;  \/\/!< reserved$/;"	m	struct:GenericValue::String
hasher	rapidjson/schema.h	/^    void* hasher; \/\/ Only validator access$/;"	m	struct:internal::SchemaValidationContext
head_	rapidjson/pointer.h	/^        const Ch* head_;    \/\/!< Original head of the string.$/;"	m	class:GenericPointer::PercentDecodeStream
head_	rapidjson/stream.h	/^    Ch* head_;$/;"	m	struct:GenericInsituStringStream
head_	rapidjson/stream.h	/^    const Ch* head_;    \/\/!< Original head of the string.$/;"	m	struct:GenericStringStream
hmmSeg_	cppjieba/MixSegment.hpp	/^  HMMSegment hmmSeg_;$/;"	m	class:cppjieba::MixSegment
hmm_seg_	cppjieba/Jieba.hpp	/^  HMMSegment hmm_seg_;$/;"	m	class:cppjieba::Jieba
host_	http/HttpRequest.cpp	/^    string       host_;$/;"	m	class:HttpRequest::Impl	file:
httpRequest_	http/HttpServer.h	/^    std::unique_ptr<HttpRequest> httpRequest_;$/;"	m	class:HttpServer
httpResponse_	http/HttpServer.h	/^    std::unique_ptr<HttpResponse> httpResponse_;$/;"	m	class:HttpServer
httpServer_	http/AnswerServer.h	/^    HttpServer httpServer_;$/;"	m	class:AnswerServer
i	rapidjson/document.h	/^            int i;$/;"	m	struct:GenericValue::Number::I
i	rapidjson/document.h	/^        }i;$/;"	m	union:GenericValue::Number	typeref:struct:GenericValue::Number::I
i	rapidjson/schema.h	/^            int64_t i;$/;"	m	union:internal::Hasher::Number::U
i32toa	rapidjson/internal/itoa.h	/^inline char* i32toa(int32_t value, char* buffer) {$/;"	f	namespace:internal
i64	rapidjson/document.h	/^        int64_t i64;$/;"	m	union:GenericValue::Number
i64toa	rapidjson/internal/itoa.h	/^inline char* i64toa(int64_t value, char* buffer) {$/;"	f	namespace:internal
idfAverage_	cppjieba/KeywordExtractor.hpp	/^  double idfAverage_;$/;"	m	class:cppjieba::KeywordExtractor
idfMap_	cppjieba/KeywordExtractor.hpp	/^  unordered_map<string, double> idfMap_;$/;"	m	class:cppjieba::KeywordExtractor
idleFd_	Acceptor.h	/^    int idleFd_;$/;"	m	class:Acceptor
imaxabs	rapidjson/msinttypes/inttypes.h	279;"	d
imaxdiv	rapidjson/msinttypes/inttypes.h	/^imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)$/;"	f
imaxdiv_t	rapidjson/msinttypes/inttypes.h	/^} imaxdiv_t;$/;"	t	typeref:struct:__anon10
impl_	Logging.h	/^    Impl impl_;$/;"	m	class:Logger
impl_	http/HttpRequest.h	/^    std::unique_ptr<Impl> impl_;$/;"	m	class:HttpRequest
impl_	http/HttpResponse.h	/^    std::unique_ptr<Impl> impl_;$/;"	m	class:HttpResponse
inArray	rapidjson/schema.h	/^    bool inArray;$/;"	m	struct:internal::SchemaValidationContext
inArray	rapidjson/writer.h	/^        bool inArray;       \/\/!< true if in array, otherwise in object$/;"	m	struct:Writer::Level
indentCharCount_	rapidjson/prettywriter.h	/^    unsigned indentCharCount_;$/;"	m	class:PrettyWriter
indentChar_	rapidjson/prettywriter.h	/^    Ch indentChar_;$/;"	m	class:PrettyWriter
index	rapidjson/pointer.h	/^        SizeType index;             \/\/!< A valid array index, if it is not equal to kPointerInvalidIndex.$/;"	m	struct:GenericPointer::Token
inetAddress_	Acceptor.h	/^    InetAddress inetAddress_;   $/;"	m	class:Acceptor
initialCapacity_	rapidjson/internal/stack.h	/^    size_t initialCapacity_;$/;"	m	class:internal::Stack
inputBuffer_	TcpConnection.h	/^    Buffer inputBuffer_;$/;"	m	class:TcpConnection
insertIntoTable	database/DataBase.cpp	/^bool DataBase::insertIntoTable(const string& table, const vector<string>& values)$/;"	f	class:DataBase
insertIntoTable	http/DataBase.cpp	/^bool DataBase::insertIntoTable(const string& table, const vector<string>& values)$/;"	f	class:DataBase
int16_t	rapidjson/msinttypes/stdint.h	/^   typedef signed __int16    int16_t;$/;"	t
int16_t	rapidjson/msinttypes/stdint.h	/^   typedef signed short      int16_t;$/;"	t
int32_t	rapidjson/msinttypes/stdint.h	/^   typedef signed __int32    int32_t;$/;"	t
int32_t	rapidjson/msinttypes/stdint.h	/^   typedef signed int        int32_t;$/;"	t
int64_t	rapidjson/msinttypes/stdint.h	/^typedef signed __int64       int64_t;$/;"	t
int8_t	rapidjson/msinttypes/stdint.h	/^   typedef signed __int8     int8_t;$/;"	t
int8_t	rapidjson/msinttypes/stdint.h	/^   typedef signed char       int8_t;$/;"	t
int_fast16_t	rapidjson/msinttypes/stdint.h	/^typedef int16_t   int_fast16_t;$/;"	t
int_fast32_t	rapidjson/msinttypes/stdint.h	/^typedef int32_t   int_fast32_t;$/;"	t
int_fast64_t	rapidjson/msinttypes/stdint.h	/^typedef int64_t   int_fast64_t;$/;"	t
int_fast8_t	rapidjson/msinttypes/stdint.h	/^typedef int8_t    int_fast8_t;$/;"	t
int_least16_t	rapidjson/msinttypes/stdint.h	/^typedef int16_t   int_least16_t;$/;"	t
int_least32_t	rapidjson/msinttypes/stdint.h	/^typedef int32_t   int_least32_t;$/;"	t
int_least64_t	rapidjson/msinttypes/stdint.h	/^typedef int64_t   int_least64_t;$/;"	t
int_least8_t	rapidjson/msinttypes/stdint.h	/^typedef int8_t    int_least8_t;$/;"	t
internal	rapidjson/document.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/biginteger.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/diyfp.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/dtoa.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/ieee754.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/itoa.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/meta.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/pow10.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/regex.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/stack.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/strfunc.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/strtod.h	/^namespace internal {$/;"	n
internal	rapidjson/internal/swap.h	/^namespace internal {$/;"	n
internal	rapidjson/reader.h	/^namespace internal {$/;"	n
internal	rapidjson/schema.h	/^namespace internal {$/;"	n
intmax_t	rapidjson/msinttypes/stdint.h	/^typedef int64_t   intmax_t;$/;"	t
intptr_t	rapidjson/msinttypes/stdint.h	/^   typedef _W64 signed int   intptr_t;$/;"	t
intptr_t	rapidjson/msinttypes/stdint.h	/^   typedef signed __int64    intptr_t;$/;"	t
invalidDocumentPointer_	rapidjson/schema.h	/^    PointerType invalidDocumentPointer_;$/;"	m	class:SchemaValidatingReader
invalidKeyword	rapidjson/schema.h	/^    const Ch* invalidKeyword;$/;"	m	struct:internal::SchemaValidationContext
invalidSchemaKeyword_	rapidjson/schema.h	/^    const Ch* invalidSchemaKeyword_;$/;"	m	class:SchemaValidatingReader
invalidSchemaPointer_	rapidjson/schema.h	/^    PointerType invalidSchemaPointer_;$/;"	m	class:SchemaValidatingReader
is	rapidjson/reader.h	/^        InputStream& is;$/;"	m	class:GenericReader::NumberStream
isGetMethod	http/HttpRequest.cpp	/^bool HttpRequest::isGetMethod() const$/;"	f	class:HttpRequest
isNeedDestroy_	cppjieba/FullSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::FullSegment
isNeedDestroy_	cppjieba/HMMSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::HMMSegment
isNeedDestroy_	cppjieba/MPSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::MPSegment
isNoneEvent	Channel.h	/^    bool isNoneEvent() { return events_ == kNoneEvent; }$/;"	f	class:Channel
isPostMethod	http/HttpRequest.cpp	/^bool HttpRequest::isPostMethod() const$/;"	f	class:HttpRequest
isReading	Channel.h	/^    bool isReading() { return events_ & kReadEvent; }$/;"	f	class:Channel
isValid_	rapidjson/schema.h	/^    bool isValid_;$/;"	m	class:SchemaValidatingReader
isWriting	Channel.h	/^    bool isWriting() { return events_ & kWriteEvent; }$/;"	f	class:Channel
is_	rapidjson/encodedstream.h	/^    InputByteStream& is_;$/;"	m	class:EncodedInputStream
is_	rapidjson/encodedstream.h	/^    InputByteStream* is_;$/;"	m	class:AutoUTFInputStream
is_	rapidjson/encodedstream.h	/^    MemoryStream& is_;$/;"	m	class:EncodedInputStream
is_	rapidjson/schema.h	/^    InputStream& is_;$/;"	m	class:SchemaValidatingReader
is_	rapidjson/stream.h	/^    InputStream& is_;$/;"	m	class:GenericStreamWrapper
itemsList_	rapidjson/schema.h	/^    const SchemaType* itemsList_;$/;"	m	class:internal::Schema
itemsTupleCount_	rapidjson/schema.h	/^    SizeType itemsTupleCount_;$/;"	m	class:internal::Schema
itemsTuple_	rapidjson/schema.h	/^    const SchemaType** itemsTuple_;$/;"	m	class:internal::Schema
jieba_	http/HttpServer.h	/^    std::unique_ptr<cppjieba::Jieba> jieba_;$/;"	m	class:HttpServer
kAdd	EPollPoller.cpp	/^static const int kAdd = 0;$/;"	v	file:
kAlternation	rapidjson/internal/regex.h	/^        kAlternation,$/;"	e	enum:internal::GenericRegex::Operator
kAnyCharacterClass	rapidjson/internal/regex.h	/^    static const unsigned kAnyCharacterClass = 0xFFFFFFFF;   \/\/!< For '.'$/;"	m	class:internal::GenericRegex
kArrayFlag	rapidjson/document.h	/^        kArrayFlag = kArrayType,$/;"	e	enum:GenericValue::__anon1
kArraySchemaType	rapidjson/schema.h	/^        kArraySchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kArrayType	rapidjson/rapidjson.h	/^    kArrayType = 4,     \/\/!< array $/;"	e	enum:Type
kBitCount	rapidjson/internal/biginteger.h	/^    static const size_t kBitCount = 3328;  \/\/ 64bit * 54 > 10^1000$/;"	m	class:internal::BigInteger
kBoolFlag	rapidjson/document.h	/^        kBoolFlag       = 0x0008,$/;"	e	enum:GenericValue::__anon1
kBooleanSchemaType	rapidjson/schema.h	/^        kBooleanSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kBufferInitSize	Buffer.cpp	/^const int Buffer::kBufferInitSize = 4000;$/;"	m	class:Buffer	file:
kBufferInitSize	Buffer.h	/^    static const int kBufferInitSize;$/;"	m	class:Buffer
kCapacity	rapidjson/internal/biginteger.h	/^    static const size_t kCapacity = kBitCount \/ sizeof(Type);$/;"	m	class:internal::BigInteger
kConcatenation	rapidjson/internal/regex.h	/^        kConcatenation,$/;"	e	enum:internal::GenericRegex::Operator
kConstStringFlag	rapidjson/document.h	/^        kConstStringFlag = kStringType | kStringFlag,$/;"	e	enum:GenericValue::__anon1
kCopyFlag	rapidjson/document.h	/^        kCopyFlag       = 0x0800,$/;"	e	enum:GenericValue::__anon1
kCopyStringFlag	rapidjson/document.h	/^        kCopyStringFlag = kStringType | kStringFlag | kCopyFlag,$/;"	e	enum:GenericValue::__anon1
kDefaultArrayCapacity	rapidjson/document.h	/^    static const SizeType kDefaultArrayCapacity = 16;$/;"	m	class:GenericValue
kDefaultCapacity	rapidjson/memorybuffer.h	/^    static const size_t kDefaultCapacity = 256;$/;"	m	struct:GenericMemoryBuffer
kDefaultCapacity	rapidjson/stringbuffer.h	/^    static const size_t kDefaultCapacity = 256;$/;"	m	class:GenericStringBuffer
kDefaultChunkCapacity	rapidjson/allocators.h	/^    static const int kDefaultChunkCapacity = 64 * 1024; \/\/!< Default chunk capacity.$/;"	m	class:MemoryPoolAllocator
kDefaultContentType	http/HttpRequest.h	/^    static std::string kDefaultContentType;$/;"	m	class:HttpRequest
kDefaultDocumentStackCapacity	rapidjson/schema.h	/^    static const size_t kDefaultDocumentStackCapacity = 256;$/;"	m	class:GenericSchemaValidator
kDefaultLevelDepth	rapidjson/writer.h	/^    static const size_t kDefaultLevelDepth = 32;$/;"	m	class:Writer
kDefaultMaxDecimalPlaces	rapidjson/writer.h	/^    static const int kDefaultMaxDecimalPlaces = 324;$/;"	m	class:Writer
kDefaultObjectCapacity	rapidjson/document.h	/^    static const SizeType kDefaultObjectCapacity = 16;$/;"	m	class:GenericValue
kDefaultSchemaStackCapacity	rapidjson/schema.h	/^    static const size_t kDefaultSchemaStackCapacity = 1024;$/;"	m	class:GenericSchemaValidator
kDefaultSize	rapidjson/schema.h	/^    static const size_t kDefaultSize = 256;$/;"	m	class:internal::Hasher
kDefaultStackCapacity	rapidjson/document.h	/^    static const size_t kDefaultStackCapacity = 1024;$/;"	m	class:GenericDocument
kDefaultStackCapacity	rapidjson/reader.h	/^    static const size_t kDefaultStackCapacity = 256;    \/\/!< Default stack capacity in bytes for storing a single decoded string.$/;"	m	class:GenericReader
kDelete	EPollPoller.cpp	/^static const int kDelete = 1;$/;"	v	file:
kDenormalExponent	rapidjson/internal/ieee754.h	/^    static const int kDenormalExponent = 1 - kExponentBias;$/;"	m	class:internal::Double
kDiySignificandSize	rapidjson/internal/diyfp.h	/^    static const int kDiySignificandSize = 64;$/;"	m	struct:internal::DiyFp
kDoubleFlag	rapidjson/document.h	/^        kDoubleFlag     = 0x0200,$/;"	e	enum:GenericValue::__anon1
kDpDenormalExponent	rapidjson/internal/diyfp.h	/^    static const int kDpDenormalExponent = -kDpExponentBias + 1;$/;"	m	struct:internal::DiyFp
kDpExponentBias	rapidjson/internal/diyfp.h	/^    static const int kDpExponentBias = 0x3FF + kDpSignificandSize;$/;"	m	struct:internal::DiyFp
kDpExponentMask	rapidjson/internal/diyfp.h	/^    static const uint64_t kDpExponentMask = RAPIDJSON_UINT64_C2(0x7FF00000, 0x00000000);$/;"	m	struct:internal::DiyFp
kDpHiddenBit	rapidjson/internal/diyfp.h	/^    static const uint64_t kDpHiddenBit = RAPIDJSON_UINT64_C2(0x00100000, 0x00000000);$/;"	m	struct:internal::DiyFp
kDpMaxExponent	rapidjson/internal/diyfp.h	/^    static const int kDpMaxExponent = 0x7FF - kDpExponentBias;$/;"	m	struct:internal::DiyFp
kDpMinExponent	rapidjson/internal/diyfp.h	/^    static const int kDpMinExponent = -kDpExponentBias;$/;"	m	struct:internal::DiyFp
kDpSignificandMask	rapidjson/internal/diyfp.h	/^    static const uint64_t kDpSignificandMask = RAPIDJSON_UINT64_C2(0x000FFFFF, 0xFFFFFFFF);$/;"	m	struct:internal::DiyFp
kDpSignificandSize	rapidjson/internal/diyfp.h	/^    static const int kDpSignificandSize = 52;$/;"	m	struct:internal::DiyFp
kEPollEventSize	EPollPoller.cpp	/^int EPollPoller::kEPollEventSize = 1000;$/;"	m	class:EPollPoller	file:
kEPollEventSize	EPollPoller.h	/^    static int kEPollEventSize;$/;"	m	class:EPollPoller
kExponentBias	rapidjson/internal/ieee754.h	/^    static const int kExponentBias = 0x3FF;$/;"	m	class:internal::Double
kExponentMask	rapidjson/internal/ieee754.h	/^    static const uint64_t kExponentMask = RAPIDJSON_UINT64_C2(0x7FF00000, 0x00000000);$/;"	m	class:internal::Double
kFalseFlag	rapidjson/document.h	/^        kFalseFlag = kFalseType | kBoolFlag,$/;"	e	enum:GenericValue::__anon1
kFalseType	rapidjson/rapidjson.h	/^    kFalseType = 1,     \/\/!< false$/;"	e	enum:Type
kFormatDefault	rapidjson/prettywriter.h	/^    kFormatDefault = 0,         \/\/!< Default pretty formatting.$/;"	e	enum:PrettyFormatOptions
kFormatSingleLineArray	rapidjson/prettywriter.h	/^    kFormatSingleLineArray = 1  \/\/!< Format arrays on a single line.$/;"	e	enum:PrettyFormatOptions
kHeaders	http/HttpRequest.cpp	/^    static const std::vector<string> kHeaders;$/;"	m	class:HttpRequest::Impl	file:
kHeaders	http/HttpRequest.cpp	/^const std::vector<string> HttpRequest::Impl::kHeaders = {$/;"	m	class:HttpRequest::Impl	file:
kHiddenBit	rapidjson/internal/ieee754.h	/^    static const uint64_t kHiddenBit = RAPIDJSON_UINT64_C2(0x00100000, 0x00000000);$/;"	m	class:internal::Double
kInfinityQuantifier	rapidjson/internal/regex.h	/^    static const unsigned kInfinityQuantifier = ~0u;$/;"	m	class:internal::GenericRegex
kInitialSchemaMapSize	rapidjson/schema.h	/^    static const size_t kInitialSchemaMapSize = 64;$/;"	m	class:GenericSchemaDocument
kInitialSchemaRefSize	rapidjson/schema.h	/^    static const size_t kInitialSchemaRefSize = 64;$/;"	m	class:GenericSchemaDocument
kInlineStrFlag	rapidjson/document.h	/^        kInlineStrFlag  = 0x1000,$/;"	e	enum:GenericValue::__anon1
kInt64Flag	rapidjson/document.h	/^        kInt64Flag      = 0x0080,$/;"	e	enum:GenericValue::__anon1
kIntFlag	rapidjson/document.h	/^        kIntFlag        = 0x0020,$/;"	e	enum:GenericValue::__anon1
kIntegerSchemaType	rapidjson/schema.h	/^        kIntegerSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kLeftParenthesis	rapidjson/internal/regex.h	/^        kLeftParenthesis$/;"	e	enum:internal::GenericRegex::Operator
kNeedFree	rapidjson/allocators.h	/^    static const bool kNeedFree = false;    \/\/!< Tell users that no need to call Free() with this allocator. (concept Allocator)$/;"	m	class:MemoryPoolAllocator
kNeedFree	rapidjson/allocators.h	/^    static const bool kNeedFree = true;$/;"	m	class:CrtAllocator
kNew	EPollPoller.cpp	/^static const int kNew = -1;$/;"	v	file:
kNoneEvent	Channel.cpp	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	Channel.h	/^    static const int kNoneEvent;$/;"	m	class:Channel
kNullFlag	rapidjson/document.h	/^        kNullFlag = kNullType,$/;"	e	enum:GenericValue::__anon1
kNullSchemaType	rapidjson/schema.h	/^        kNullSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kNullType	rapidjson/rapidjson.h	/^    kNullType = 0,      \/\/!< null$/;"	e	enum:Type
kNumEventLoopThreads	EventLoopThreadPool.cpp	/^const int EventLoopThreadPool::kNumEventLoopThreads = 100;$/;"	m	class:EventLoopThreadPool	file:
kNumEventLoopThreads	EventLoopThreadPool.h	/^    static const int kNumEventLoopThreads;$/;"	m	class:EventLoopThreadPool
kNumberAnyFlag	rapidjson/document.h	/^        kNumberAnyFlag = kNumberType | kNumberFlag | kIntFlag | kInt64Flag | kUintFlag | kUint64Flag | kDoubleFlag,$/;"	e	enum:GenericValue::__anon1
kNumberDoubleFlag	rapidjson/document.h	/^        kNumberDoubleFlag = kNumberType | kNumberFlag | kDoubleFlag,$/;"	e	enum:GenericValue::__anon1
kNumberFlag	rapidjson/document.h	/^        kNumberFlag     = 0x0010,$/;"	e	enum:GenericValue::__anon1
kNumberInt64Flag	rapidjson/document.h	/^        kNumberInt64Flag = kNumberType | kNumberFlag | kInt64Flag,$/;"	e	enum:GenericValue::__anon1
kNumberIntFlag	rapidjson/document.h	/^        kNumberIntFlag = kNumberType | kNumberFlag | kIntFlag | kInt64Flag,$/;"	e	enum:GenericValue::__anon1
kNumberSchemaType	rapidjson/schema.h	/^        kNumberSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kNumberType	rapidjson/rapidjson.h	/^    kNumberType = 6     \/\/!< number$/;"	e	enum:Type
kNumberUint64Flag	rapidjson/document.h	/^        kNumberUint64Flag = kNumberType | kNumberFlag | kUint64Flag,$/;"	e	enum:GenericValue::__anon1
kNumberUintFlag	rapidjson/document.h	/^        kNumberUintFlag = kNumberType | kNumberFlag | kUintFlag | kUint64Flag | kInt64Flag,$/;"	e	enum:GenericValue::__anon1
kObjectFlag	rapidjson/document.h	/^        kObjectFlag = kObjectType,$/;"	e	enum:GenericValue::__anon1
kObjectSchemaType	rapidjson/schema.h	/^        kObjectSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kObjectType	rapidjson/rapidjson.h	/^    kObjectType = 3,    \/\/!< object$/;"	e	enum:Type
kOneOrMore	rapidjson/internal/regex.h	/^        kOneOrMore,$/;"	e	enum:internal::GenericRegex::Operator
kParseCommentsFlag	rapidjson/reader.h	/^    kParseCommentsFlag = 32,        \/\/!< Allow one-line (\/\/) and multi-line (\/**\/) comments.$/;"	e	enum:ParseFlag
kParseDefaultFlags	rapidjson/reader.h	/^    kParseDefaultFlags = RAPIDJSON_PARSE_DEFAULT_FLAGS  \/\/!< Default parse flags. Can be customized by defining RAPIDJSON_PARSE_DEFAULT_FLAGS$/;"	e	enum:ParseFlag
kParseErrorArrayMissCommaOrSquareBracket	rapidjson/error/error.h	/^    kParseErrorArrayMissCommaOrSquareBracket,   \/\/!< Missing a comma or ']' after an array element.$/;"	e	enum:ParseErrorCode
kParseErrorDocumentEmpty	rapidjson/error/error.h	/^    kParseErrorDocumentEmpty,                   \/\/!< The document is empty.$/;"	e	enum:ParseErrorCode
kParseErrorDocumentRootNotSingular	rapidjson/error/error.h	/^    kParseErrorDocumentRootNotSingular,         \/\/!< The document root must not follow by other values.$/;"	e	enum:ParseErrorCode
kParseErrorNone	rapidjson/error/error.h	/^    kParseErrorNone = 0,                        \/\/!< No error.$/;"	e	enum:ParseErrorCode
kParseErrorNumberMissExponent	rapidjson/error/error.h	/^    kParseErrorNumberMissExponent,              \/\/!< Miss exponent in number.$/;"	e	enum:ParseErrorCode
kParseErrorNumberMissFraction	rapidjson/error/error.h	/^    kParseErrorNumberMissFraction,              \/\/!< Miss fraction part in number.$/;"	e	enum:ParseErrorCode
kParseErrorNumberTooBig	rapidjson/error/error.h	/^    kParseErrorNumberTooBig,                    \/\/!< Number too big to be stored in double.$/;"	e	enum:ParseErrorCode
kParseErrorObjectMissColon	rapidjson/error/error.h	/^    kParseErrorObjectMissColon,                 \/\/!< Missing a colon after a name of object member.$/;"	e	enum:ParseErrorCode
kParseErrorObjectMissCommaOrCurlyBracket	rapidjson/error/error.h	/^    kParseErrorObjectMissCommaOrCurlyBracket,   \/\/!< Missing a comma or '}' after an object member.$/;"	e	enum:ParseErrorCode
kParseErrorObjectMissName	rapidjson/error/error.h	/^    kParseErrorObjectMissName,                  \/\/!< Missing a name for object member.$/;"	e	enum:ParseErrorCode
kParseErrorStringEscapeInvalid	rapidjson/error/error.h	/^    kParseErrorStringEscapeInvalid,             \/\/!< Invalid escape character in string.$/;"	e	enum:ParseErrorCode
kParseErrorStringInvalidEncoding	rapidjson/error/error.h	/^    kParseErrorStringInvalidEncoding,           \/\/!< Invalid encoding in string.$/;"	e	enum:ParseErrorCode
kParseErrorStringMissQuotationMark	rapidjson/error/error.h	/^    kParseErrorStringMissQuotationMark,         \/\/!< Missing a closing quotation mark in string.$/;"	e	enum:ParseErrorCode
kParseErrorStringUnicodeEscapeInvalidHex	rapidjson/error/error.h	/^    kParseErrorStringUnicodeEscapeInvalidHex,   \/\/!< Incorrect hex digit after \\\\u escape in string.$/;"	e	enum:ParseErrorCode
kParseErrorStringUnicodeSurrogateInvalid	rapidjson/error/error.h	/^    kParseErrorStringUnicodeSurrogateInvalid,   \/\/!< The surrogate pair in string is invalid.$/;"	e	enum:ParseErrorCode
kParseErrorTermination	rapidjson/error/error.h	/^    kParseErrorTermination,                     \/\/!< Parsing was terminated.$/;"	e	enum:ParseErrorCode
kParseErrorUnspecificSyntaxError	rapidjson/error/error.h	/^    kParseErrorUnspecificSyntaxError            \/\/!< Unspecific syntax error.$/;"	e	enum:ParseErrorCode
kParseErrorValueInvalid	rapidjson/error/error.h	/^    kParseErrorValueInvalid,                    \/\/!< Invalid value.$/;"	e	enum:ParseErrorCode
kParseFullPrecisionFlag	rapidjson/reader.h	/^    kParseFullPrecisionFlag = 16,   \/\/!< Parse number in full precision (but slower).$/;"	e	enum:ParseFlag
kParseInsituFlag	rapidjson/reader.h	/^    kParseInsituFlag = 1,           \/\/!< In-situ(destructive) parsing.$/;"	e	enum:ParseFlag
kParseIterativeFlag	rapidjson/reader.h	/^    kParseIterativeFlag = 4,        \/\/!< Iterative(constant complexity in terms of function call stack size) parsing.$/;"	e	enum:ParseFlag
kParseNanAndInfFlag	rapidjson/reader.h	/^    kParseNanAndInfFlag = 256,      \/\/!< Allow parsing NaN, Inf, Infinity, -Inf and -Infinity as doubles.$/;"	e	enum:ParseFlag
kParseNoFlags	rapidjson/reader.h	/^    kParseNoFlags = 0,              \/\/!< No flags are set.$/;"	e	enum:ParseFlag
kParseNumbersAsStringsFlag	rapidjson/reader.h	/^    kParseNumbersAsStringsFlag = 64,    \/\/!< Parse all numbers (ints\/doubles) as strings.$/;"	e	enum:ParseFlag
kParseStopWhenDoneFlag	rapidjson/reader.h	/^    kParseStopWhenDoneFlag = 8,     \/\/!< After parsing a complete JSON root from stream, stop further processing the rest of stream. When this flag is used, parser will not generate kParseErrorDocumentRootNotSingular error.$/;"	e	enum:ParseFlag
kParseTrailingCommasFlag	rapidjson/reader.h	/^    kParseTrailingCommasFlag = 128, \/\/!< Allow trailing commas at the end of objects and arrays.$/;"	e	enum:ParseFlag
kParseValidateEncodingFlag	rapidjson/reader.h	/^    kParseValidateEncodingFlag = 2, \/\/!< Validate encoding of JSON strings.$/;"	e	enum:ParseFlag
kPatternValidatorOnly	rapidjson/schema.h	/^        kPatternValidatorOnly,$/;"	e	enum:internal::SchemaValidationContext::PatternValidatorType
kPatternValidatorWithAdditionalProperty	rapidjson/schema.h	/^        kPatternValidatorWithAdditionalProperty$/;"	e	enum:internal::SchemaValidationContext::PatternValidatorType
kPatternValidatorWithProperty	rapidjson/schema.h	/^        kPatternValidatorWithProperty,$/;"	e	enum:internal::SchemaValidationContext::PatternValidatorType
kPointerInvalidIndex	rapidjson/pointer.h	/^static const SizeType kPointerInvalidIndex = ~SizeType(0);  \/\/!< Represents an invalid index in GenericPointer::Token$/;"	v
kPointerParseErrorCharacterMustPercentEncode	rapidjson/pointer.h	/^    kPointerParseErrorCharacterMustPercentEncode    \/\/!< A character must percent encoded in URI fragment$/;"	e	enum:PointerParseErrorCode
kPointerParseErrorInvalidEscape	rapidjson/pointer.h	/^    kPointerParseErrorInvalidEscape,                \/\/!< Invalid escape$/;"	e	enum:PointerParseErrorCode
kPointerParseErrorInvalidPercentEncoding	rapidjson/pointer.h	/^    kPointerParseErrorInvalidPercentEncoding,       \/\/!< Invalid percent encoding in URI fragment$/;"	e	enum:PointerParseErrorCode
kPointerParseErrorNone	rapidjson/pointer.h	/^    kPointerParseErrorNone = 0,                     \/\/!< The parse is successful$/;"	e	enum:PointerParseErrorCode
kPointerParseErrorTokenMustBeginWithSolidus	rapidjson/pointer.h	/^    kPointerParseErrorTokenMustBeginWithSolidus,    \/\/!< A token must begin with a '\/'$/;"	e	enum:PointerParseErrorCode
kQueryAnswer	http/HttpServer.cpp	/^const int HttpServer::kQueryAnswer = 2;$/;"	m	class:HttpServer	file:
kQueryAnswer	http/HttpServer.h	/^    static const int kQueryAnswer;$/;"	m	class:HttpServer
kQueryComment	http/HttpServer.cpp	/^const int HttpServer::kQueryComment = 3;$/;"	m	class:HttpServer	file:
kQueryComment	http/HttpServer.h	/^    static const int kQueryComment;$/;"	m	class:HttpServer
kQueryQuestion	http/HttpServer.cpp	/^const int HttpServer::kQueryQuestion = 1;$/;"	m	class:HttpServer	file:
kQueryQuestion	http/HttpServer.h	/^    static const int kQueryQuestion;$/;"	m	class:HttpServer
kRangeCharacterClass	rapidjson/internal/regex.h	/^    static const unsigned kRangeCharacterClass = 0xFFFFFFFE;$/;"	m	class:internal::GenericRegex
kRangeNegationFlag	rapidjson/internal/regex.h	/^    static const unsigned kRangeNegationFlag = 0x80000000;$/;"	m	class:internal::GenericRegex
kReadEvent	Channel.cpp	/^const int Channel::kReadEvent = EPOLLIN;$/;"	m	class:Channel	file:
kReadEvent	Channel.h	/^    static const int kReadEvent;$/;"	m	class:Channel
kRegexInvalidRange	rapidjson/internal/regex.h	/^static const SizeType kRegexInvalidRange = ~SizeType(0);$/;"	m	namespace:internal
kRegexInvalidState	rapidjson/internal/regex.h	/^static const SizeType kRegexInvalidState = ~SizeType(0);  \/\/!< Represents an invalid index in GenericRegex::State::out, out1$/;"	m	namespace:internal
kShortStringFlag	rapidjson/document.h	/^        kShortStringFlag = kStringType | kStringFlag | kCopyFlag | kInlineStrFlag,$/;"	e	enum:GenericValue::__anon1
kSignMask	rapidjson/internal/ieee754.h	/^    static const uint64_t kSignMask = RAPIDJSON_UINT64_C2(0x80000000, 0x00000000);$/;"	m	class:internal::Double
kSignificandMask	rapidjson/internal/ieee754.h	/^    static const uint64_t kSignificandMask = RAPIDJSON_UINT64_C2(0x000FFFFF, 0xFFFFFFFF);$/;"	m	class:internal::Double
kSignificandSize	rapidjson/internal/ieee754.h	/^    static const int kSignificandSize = 52;$/;"	m	class:internal::Double
kSocketListenSize	SocketsOps.cpp	/^static const int kSocketListenSize = 1000;$/;"	m	namespace:__anon15	file:
kStringFlag	rapidjson/document.h	/^        kStringFlag     = 0x0400,$/;"	e	enum:GenericValue::__anon1
kStringSchemaType	rapidjson/schema.h	/^        kStringSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kStringType	rapidjson/rapidjson.h	/^    kStringType = 5,    \/\/!< string$/;"	e	enum:Type
kTokenCount	rapidjson/reader.h	/^        kTokenCount$/;"	e	enum:GenericReader::Token
kTotalSchemaType	rapidjson/schema.h	/^        kTotalSchemaType$/;"	e	enum:internal::Schema::SchemaValueType
kTrueFlag	rapidjson/document.h	/^        kTrueFlag = kTrueType | kBoolFlag,$/;"	e	enum:GenericValue::__anon1
kTrueType	rapidjson/rapidjson.h	/^    kTrueType = 2,      \/\/!< true$/;"	e	enum:Type
kTypeBit	rapidjson/internal/biginteger.h	/^    static const size_t kTypeBit = sizeof(Type) * 8;$/;"	m	class:internal::BigInteger
kTypeMask	rapidjson/document.h	/^        kTypeMask = 0x07$/;"	e	enum:GenericValue::__anon1
kUTF16BE	rapidjson/encodings.h	/^    kUTF16BE = 2,   \/\/!< UTF-16 big endian.$/;"	e	enum:UTFType
kUTF16LE	rapidjson/encodings.h	/^    kUTF16LE = 1,   \/\/!< UTF-16 little endian.$/;"	e	enum:UTFType
kUTF32BE	rapidjson/encodings.h	/^    kUTF32BE = 4    \/\/!< UTF-32 big endian.$/;"	e	enum:UTFType
kUTF32LE	rapidjson/encodings.h	/^    kUTF32LE = 3,   \/\/!< UTF-32 little endian.$/;"	e	enum:UTFType
kUTF8	rapidjson/encodings.h	/^    kUTF8 = 0,      \/\/!< UTF-8.$/;"	e	enum:UTFType
kUint64Flag	rapidjson/document.h	/^        kUint64Flag     = 0x0100,$/;"	e	enum:GenericValue::__anon1
kUintFlag	rapidjson/document.h	/^        kUintFlag       = 0x0040,$/;"	e	enum:GenericValue::__anon1
kWriteDefaultFlags	rapidjson/writer.h	/^    kWriteDefaultFlags = RAPIDJSON_WRITE_DEFAULT_FLAGS  \/\/!< Default write flags. Can be customized by defining RAPIDJSON_WRITE_DEFAULT_FLAGS$/;"	e	enum:WriteFlag
kWriteEvent	Channel.cpp	/^const int Channel::kWriteEvent = EPOLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	Channel.h	/^    static const int kWriteEvent;$/;"	m	class:Channel
kWriteNanAndInfFlag	rapidjson/writer.h	/^    kWriteNanAndInfFlag = 2,        \/\/!< Allow writing of Infinity, -Infinity and NaN.$/;"	e	enum:WriteFlag
kWriteNoFlags	rapidjson/writer.h	/^    kWriteNoFlags = 0,              \/\/!< No flags are set.$/;"	e	enum:WriteFlag
kWriteValidateEncodingFlag	rapidjson/writer.h	/^    kWriteValidateEncodingFlag = 1, \/\/!< Validate encoding of JSON strings.$/;"	e	enum:WriteFlag
kZeroOrMore	rapidjson/internal/regex.h	/^        kZeroOrMore,$/;"	e	enum:internal::GenericRegex::Operator
kZeroOrOne	rapidjson/internal/regex.h	/^        kZeroOrOne,$/;"	e	enum:internal::GenericRegex::Operator
left	cppjieba/Unicode.hpp	/^  RuneStrArray::const_iterator left;$/;"	m	struct:cppjieba::WordRange
len	cppjieba/Unicode.hpp	/^  uint32_t len;$/;"	m	struct:cppjieba::RuneStr
len	cppjieba/Unicode.hpp	/^  uint32_t len;$/;"	m	struct:cppjieba::RuneStrLite
length	rapidjson/document.h	/^        SizeType length;$/;"	m	struct:GenericValue::String
length	rapidjson/document.h	/^    const SizeType length; \/\/!< length of the string (excluding the trailing NULL terminator)$/;"	m	struct:GenericStringRef
length	rapidjson/pointer.h	/^        SizeType length;            \/\/!< Length of the name.$/;"	m	struct:GenericPointer::Token
length_	rapidjson/reader.h	/^        SizeType length_;$/;"	m	class:GenericReader::StackStream
level_	Logging.h	/^        Logger::LogLevel level_;$/;"	m	class:Logger::Impl
level_stack_	rapidjson/writer.h	/^    internal::Stack<StackAllocator> level_stack_;$/;"	m	class:Writer
line_	Logging.h	/^        int line_;$/;"	m	class:Logger::Impl
line_	rapidjson/cursorstreamwrapper.h	/^    size_t line_;   \/\/!< Current Line$/;"	m	class:CursorStreamWrapper
listen	Socket.cpp	/^void Socket::listen()$/;"	f	class:Socket
listen	SocketsOps.cpp	/^void sockets::listen(int sockfd)$/;"	f	class:sockets
loop	EventLoop.cpp	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop_	Acceptor.h	/^    EventLoop* loop_;$/;"	m	class:Acceptor
loop_	Channel.h	/^    EventLoop* loop_;$/;"	m	class:Channel
loop_	EventLoopThread.h	/^    EventLoop *loop_;$/;"	m	class:EventLoopThread
loop_	EventLoopThreadPool.h	/^    EventLoop* loop_;$/;"	m	class:EventLoopThreadPool
loop_	TcpConnection.h	/^    EventLoop* loop_;$/;"	m	class:TcpConnection
loop_	TcpServer.h	/^    EventLoop *loop_;$/;"	m	class:TcpServer
loop_	http/HttpServer.h	/^    EventLoop* loop_;$/;"	m	class:HttpServer
main	client.cpp	/^int main()$/;"	f
main	http/server.cpp	/^int main()$/;"	f
main	server.cpp	/^int main()$/;"	f
maxDecimalPlaces_	rapidjson/writer.h	/^    int maxDecimalPlaces_;$/;"	m	class:Writer
maxItems_	rapidjson/schema.h	/^    SizeType maxItems_;$/;"	m	class:internal::Schema
maxLength_	rapidjson/schema.h	/^    SizeType maxLength_;$/;"	m	class:internal::Schema
maxProperties_	rapidjson/schema.h	/^    SizeType maxProperties_;$/;"	m	class:internal::Schema
max_weight_	cppjieba/DictTrie.hpp	/^  double max_weight_;$/;"	m	class:cppjieba::DictTrie
maximum_	rapidjson/schema.h	/^    SValue maximum_;$/;"	m	class:internal::Schema
median_weight_	cppjieba/DictTrie.hpp	/^  double median_weight_;$/;"	m	class:cppjieba::DictTrie
members	rapidjson/document.h	/^        Member* members;$/;"	m	struct:GenericValue::ObjectData
messageCallBack_	TcpConnection.h	/^    MessageCallBack messageCallBack_;$/;"	m	class:TcpConnection
messageCallBack_	TcpServer.h	/^    MessageCallBack messageCallBack_;$/;"	m	class:TcpServer
method_	http/HttpRequest.cpp	/^    HttpRequest::HttpMethod method_;$/;"	m	class:HttpRequest::Impl	file:
minIndex	rapidjson/internal/regex.h	/^        SizeType minIndex;$/;"	m	struct:internal::GenericRegex::Frag
minItems_	rapidjson/schema.h	/^    SizeType minItems_;$/;"	m	class:internal::Schema
minLength_	rapidjson/schema.h	/^    SizeType minLength_;$/;"	m	class:internal::Schema
minProperties_	rapidjson/schema.h	/^    SizeType minProperties_;$/;"	m	class:internal::Schema
min_weight_	cppjieba/DictTrie.hpp	/^  double min_weight_;$/;"	m	class:cppjieba::DictTrie
minimum_	rapidjson/schema.h	/^    SValue minimum_;$/;"	m	class:internal::Schema
mixSeg_	cppjieba/QuerySegment.hpp	/^  MixSegment mixSeg_;$/;"	m	class:cppjieba::QuerySegment
mix_seg_	cppjieba/Jieba.hpp	/^  MixSegment mix_seg_;$/;"	m	class:cppjieba::Jieba
model_	cppjieba/HMMSegment.hpp	/^  const HMMModel* model_;$/;"	m	class:cppjieba::HMMSegment
model_	cppjieba/Jieba.hpp	/^  HMMModel model_;$/;"	m	class:cppjieba::Jieba
move	rapidjson/schema.h	/^        schemaRef_(std::move(rhs.schemaRef_))$/;"	f	class:GenericSchemaDocument
mpSeg_	cppjieba/MixSegment.hpp	/^  MPSegment mpSeg_;$/;"	m	class:cppjieba::MixSegment
mp_seg_	cppjieba/Jieba.hpp	/^  MPSegment mp_seg_;$/;"	m	class:cppjieba::Jieba
multipleOf_	rapidjson/schema.h	/^    SValue multipleOf_;$/;"	m	class:internal::Schema
mutex	MutexLock.h	/^    pthread_mutex_t& mutex() { return mutex_; }$/;"	f	class:MutexLock
mutex_	Condition.h	/^    pthread_mutex_t& mutex_;$/;"	m	class:Condition
mutex_	EventLoop.h	/^    std::unique_ptr<MutexLock> mutex_; $/;"	m	class:EventLoop
mutex_	EventLoopThread.h	/^    std::unique_ptr<MutexLock> mutex_;$/;"	m	class:EventLoopThread
mutex_	MutexLock.h	/^    pthread_mutex_t mutex_;$/;"	m	class:MutexLock
mutex_	MutexLockGuard.h	/^    pthread_mutex_t& mutex_;$/;"	m	class:MutexLockGuard
n	rapidjson/document.h	/^        Number n;$/;"	m	union:GenericValue::Data
name	TcpConnection.h	/^    std::string name() { return name_; }$/;"	f	class:TcpConnection
name	rapidjson/document.h	/^    GenericValue<Encoding, Allocator> name;     \/\/!< name of member (must be a string)$/;"	m	struct:GenericMember
name	rapidjson/pointer.h	/^        const Ch* name;             \/\/!< Name of the token. It has null character at the end but it can contain null character.$/;"	m	struct:GenericPointer::Token
name	rapidjson/schema.h	/^        SValue name;$/;"	m	struct:internal::Schema::Property
nameBuffer_	rapidjson/pointer.h	/^    Ch* nameBuffer_;                        \/\/!< A buffer containing all names in tokens.$/;"	m	class:GenericPointer
name_	TcpConnection.h	/^    std::string name_;$/;"	m	class:TcpConnection
newConnection	TcpServer.cpp	/^void TcpServer::newConnection(int sockfd)$/;"	f	class:TcpServer
newConnectionCallBack_	Acceptor.h	/^    NewConnectionCallBack newConnectionCallBack_;$/;"	m	class:Acceptor
next	cppjieba/Trie.hpp	/^  NextMap *next;$/;"	m	class:cppjieba::TrieNode
next	rapidjson/allocators.h	/^        ChunkHeader *next;  \/\/!< Next chunk in the linked list.$/;"	m	struct:MemoryPoolAllocator::ChunkHeader
next	rapidjson/internal/regex.h	/^        SizeType next;$/;"	m	struct:internal::GenericRegex::Range
nextLoop	EventLoopThreadPool.cpp	/^EventLoop* EventLoopThreadPool::nextLoop()$/;"	f	class:EventLoopThreadPool
nextPos	cppjieba/Trie.hpp	/^  size_t nextPos; \/\/ TODO$/;"	m	struct:cppjieba::Dag
next_	EventLoopThreadPool.h	/^    int next_;$/;"	m	class:EventLoopThreadPool
nexts	cppjieba/Trie.hpp	/^  limonp::LocalVector<pair<size_t, const DictUnit*> > nexts;$/;"	m	struct:cppjieba::Dag
nodeSet	cppjieba/TextRankExtractor.hpp	/^      NodeSet nodeSet;$/;"	m	class:cppjieba::TextRankExtractor::WordGraph
noncopyable	noncopyable.h	/^class noncopyable$/;"	c
notValidatorIndex_	rapidjson/schema.h	/^    SizeType notValidatorIndex_;$/;"	m	class:internal::Schema
not_	rapidjson/schema.h	/^    const SchemaType* not_;$/;"	m	class:internal::Schema
notify	Condition.cpp	/^void Condition::notify()$/;"	f	class:Condition
notifyAll	Condition.cpp	/^void Condition::notifyAll()$/;"	f	class:Condition
o	rapidjson/document.h	/^        ObjectData o;$/;"	m	union:GenericValue::Data
objectPatternValidatorType	rapidjson/schema.h	/^    PatternValidatorType objectPatternValidatorType;$/;"	m	struct:internal::SchemaValidationContext
offset	cppjieba/Unicode.hpp	/^  uint32_t offset;$/;"	m	struct:cppjieba::RuneStr
offset	cppjieba/Unicode.hpp	/^  uint32_t offset;$/;"	m	struct:cppjieba::Word
offset_	rapidjson/error/error.h	/^    size_t offset_;$/;"	m	struct:ParseResult
offsets	cppjieba/KeywordExtractor.hpp	/^    vector<size_t> offsets;$/;"	m	struct:cppjieba::KeywordExtractor::Word
offsets	cppjieba/TextRankExtractor.hpp	/^    typedef struct _Word {string word;vector<size_t> offsets;double weight;}    Word; \/\/ struct Word$/;"	m	struct:cppjieba::TextRankExtractor::_Word
onConnectionCallBack	http/HttpServer.cpp	/^void HttpServer::onConnectionCallBack(const TcpConnectionPtr& conn)$/;"	f	class:HttpServer
onConnectionCallBack	server.cpp	/^    void onConnectionCallBack(const TcpConnectionPtr& conn)$/;"	f	class:EchoServer	file:
onMessageCallBack	http/HttpServer.cpp	/^void HttpServer::onMessageCallBack(const TcpConnectionPtr& conn, Buffer& buffer)$/;"	f	class:HttpServer
onMessageCallBack	server.cpp	/^    void onMessageCallBack(const TcpConnectionPtr& conn, Buffer& buffer)$/;"	f	class:EchoServer	file:
oneOf_	rapidjson/schema.h	/^    SchemaArray oneOf_;$/;"	m	class:internal::Schema
operator !=	rapidjson/document.h	/^    bool operator!=(ConstIterator that) const { return ptr_ != that.ptr_; }$/;"	f	class:GenericMemberIterator
operator !=	rapidjson/document.h	/^    bool operator!=(const Ch* rhs) const { return !(*this == rhs); }$/;"	f	class:GenericValue
operator !=	rapidjson/document.h	/^    bool operator!=(const GenericValue<Encoding, SourceAllocator>& rhs) const { return !(*this == rhs); }$/;"	f	class:GenericValue
operator !=	rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::IsGenericValue<T>), (bool)) operator!=(const T& rhs) const { return !(*this == rhs); }$/;"	f	class:GenericValue
operator !=	rapidjson/document.h	/^    template <typename T> friend RAPIDJSON_DISABLEIF_RETURN((internal::IsGenericValue<T>), (bool)) operator!=(const T& lhs, const GenericValue& rhs) { return !(rhs == lhs); }$/;"	f	class:GenericValue
operator !=	rapidjson/error/error.h	/^    bool operator!=(ParseErrorCode code) const { return !(*this == code); }$/;"	f	struct:ParseResult
operator !=	rapidjson/error/error.h	/^    bool operator!=(const ParseResult& that) const { return !(*this == that); }$/;"	f	struct:ParseResult
operator !=	rapidjson/error/error.h	/^    friend bool operator!=(ParseErrorCode code, const ParseResult & err) { return err != code; }$/;"	f	struct:ParseResult
operator !=	rapidjson/pointer.h	/^    bool operator!=(const GenericPointer& rhs) const { return !(*this == rhs); }$/;"	f	class:GenericPointer
operator ()	http/HttpServer.h	/^        bool operator()(const std::pair<std::string, int>& lhs, $/;"	f	struct:HttpServer::ComByValue
operator ()	rapidjson/schema.h	/^    bool operator()(Handler& handler) {$/;"	f	class:SchemaValidatingReader
operator *	rapidjson/document.h	/^    Reference operator*() const { return *ptr_; }$/;"	f	class:GenericMemberIterator
operator *	rapidjson/internal/diyfp.h	/^    DiyFp operator*(const DiyFp& rhs) const {$/;"	f	struct:internal::DiyFp
operator *=	rapidjson/internal/biginteger.h	/^    BigInteger& operator*=(uint32_t u) {$/;"	f	class:internal::BigInteger
operator *=	rapidjson/internal/biginteger.h	/^    BigInteger& operator*=(uint64_t u) {$/;"	f	class:internal::BigInteger
operator +	rapidjson/document.h	/^    Iterator operator+(DifferenceType n) const { return Iterator(ptr_+n); }$/;"	f	class:GenericMemberIterator
operator ++	rapidjson/document.h	/^    Iterator  operator++(int){ Iterator old(*this); ++ptr_; return old; }$/;"	f	class:GenericMemberIterator
operator ++	rapidjson/document.h	/^    Iterator& operator++(){ ++ptr_; return *this; }$/;"	f	class:GenericMemberIterator
operator +=	rapidjson/document.h	/^    Iterator& operator+=(DifferenceType n) { ptr_+=n; return *this; }$/;"	f	class:GenericMemberIterator
operator +=	rapidjson/internal/biginteger.h	/^    BigInteger& operator+=(uint64_t u) {$/;"	f	class:internal::BigInteger
operator -	rapidjson/document.h	/^    DifferenceType operator-(ConstIterator that) const { return ptr_-that.ptr_; }$/;"	f	class:GenericMemberIterator
operator -	rapidjson/document.h	/^    Iterator operator-(DifferenceType n) const { return Iterator(ptr_-n); }$/;"	f	class:GenericMemberIterator
operator -	rapidjson/internal/diyfp.h	/^    DiyFp operator-(const DiyFp& rhs) const {$/;"	f	struct:internal::DiyFp
operator --	rapidjson/document.h	/^    Iterator  operator--(int){ Iterator old(*this); --ptr_; return old; }$/;"	f	class:GenericMemberIterator
operator --	rapidjson/document.h	/^    Iterator& operator--(){ --ptr_; return *this; }$/;"	f	class:GenericMemberIterator
operator -=	rapidjson/document.h	/^    Iterator& operator-=(DifferenceType n) { ptr_-=n; return *this; }$/;"	f	class:GenericMemberIterator
operator ->	rapidjson/document.h	/^    Pointer   operator->() const { return ptr_; }$/;"	f	class:GenericMemberIterator
operator <	rapidjson/document.h	/^    bool operator< (ConstIterator that) const { return ptr_ < that.ptr_; }$/;"	f	class:GenericMemberIterator
operator <<	LogStream.h	/^    self& operator<<(char* msg)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(const char* msg)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(const std::string& msg)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(double n)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(int n)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(long long int n)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(long n)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(std::string& msg)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(uint64_t n)$/;"	f	class:LogStream
operator <<	LogStream.h	/^    self& operator<<(unsigned int n)$/;"	f	class:LogStream
operator <<	cppjieba/KeywordExtractor.hpp	/^inline ostream& operator << (ostream& os, const KeywordExtractor::Word& word) {$/;"	f	namespace:cppjieba
operator <<	cppjieba/TextRankExtractor.hpp	/^  inline ostream& operator << (ostream& os, const TextRankExtractor::Word& word) {$/;"	f	namespace:cppjieba
operator <<	cppjieba/Unicode.hpp	/^inline std::ostream& operator << (std::ostream& os, const RuneStr& r) {$/;"	f	namespace:cppjieba
operator <<	cppjieba/Unicode.hpp	/^inline std::ostream& operator << (std::ostream& os, const Word& w) {$/;"	f	namespace:cppjieba
operator <<=	rapidjson/internal/biginteger.h	/^    BigInteger& operator<<=(size_t shift) {$/;"	f	class:internal::BigInteger
operator <=	rapidjson/document.h	/^    bool operator<=(ConstIterator that) const { return ptr_ <= that.ptr_; }$/;"	f	class:GenericMemberIterator
operator =	rapidjson/document.h	/^    GenericArray& operator=(const GenericArray& rhs) { value_ = rhs.value_; return *this; }$/;"	f	class:GenericArray
operator =	rapidjson/document.h	/^    GenericObject& operator=(const GenericObject& rhs) { value_ = rhs.value_; return *this; }$/;"	f	class:GenericObject
operator =	rapidjson/document.h	/^    Iterator& operator=(const NonConstIterator & it) { ptr_ = it.ptr_; return *this; }$/;"	f	class:GenericMemberIterator
operator =	rapidjson/document.h	/^    operator=(T value) {$/;"	f	class:GenericValue
operator =	rapidjson/internal/biginteger.h	/^    BigInteger& operator=(const BigInteger &rhs)$/;"	f	class:internal::BigInteger
operator =	rapidjson/internal/biginteger.h	/^    BigInteger& operator=(uint64_t u) {$/;"	f	class:internal::BigInteger
operator =	rapidjson/internal/stack.h	/^    Stack& operator=(Stack&& rhs) {$/;"	f	class:internal::Stack
operator =	rapidjson/pointer.h	/^    GenericPointer& operator=(const GenericPointer& rhs) {$/;"	f	class:GenericPointer
operator =	rapidjson/stringbuffer.h	/^    GenericStringBuffer& operator=(GenericStringBuffer&& rhs) {$/;"	f	class:GenericStringBuffer
operator ==	rapidjson/document.h	/^    bool operator==(ConstIterator that) const { return ptr_ == that.ptr_; }$/;"	f	class:GenericMemberIterator
operator ==	rapidjson/document.h	/^    bool operator==(const Ch* rhs) const { return *this == GenericValue(StringRef(rhs)); }$/;"	f	class:GenericValue
operator ==	rapidjson/document.h	/^    bool operator==(const GenericValue<Encoding, SourceAllocator>& rhs) const {$/;"	f	class:GenericValue
operator ==	rapidjson/document.h	/^    bool operator==(const std::basic_string<Ch>& rhs) const { return *this == GenericValue(StringRef(rhs)); }$/;"	f	class:GenericValue
operator ==	rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>,internal::IsGenericValue<T> >), (bool)) operator==(const T& rhs) const { return *this == GenericValue(rhs); }$/;"	f	class:GenericValue
operator ==	rapidjson/document.h	/^    template <typename T> friend RAPIDJSON_DISABLEIF_RETURN((internal::IsGenericValue<T>), (bool)) operator==(const T& lhs, const GenericValue& rhs) { return rhs == lhs; }$/;"	f	class:GenericValue
operator ==	rapidjson/error/error.h	/^    bool operator==(ParseErrorCode code) const { return code_ == code; }$/;"	f	struct:ParseResult
operator ==	rapidjson/error/error.h	/^    bool operator==(const ParseResult& that) const { return code_ == that.code_; }$/;"	f	struct:ParseResult
operator ==	rapidjson/error/error.h	/^    friend bool operator==(ParseErrorCode code, const ParseResult & err) { return code == err.code_; }$/;"	f	struct:ParseResult
operator ==	rapidjson/internal/biginteger.h	/^    bool operator==(const BigInteger& rhs) const {$/;"	f	class:internal::BigInteger
operator ==	rapidjson/internal/biginteger.h	/^    bool operator==(const Type rhs) const {$/;"	f	class:internal::BigInteger
operator ==	rapidjson/pointer.h	/^    bool operator==(const GenericPointer& rhs) const {$/;"	f	class:GenericPointer
operator >	rapidjson/document.h	/^    bool operator> (ConstIterator that) const { return ptr_ > that.ptr_; }$/;"	f	class:GenericMemberIterator
operator >=	rapidjson/document.h	/^    bool operator>=(ConstIterator that) const { return ptr_ >= that.ptr_; }$/;"	f	class:GenericMemberIterator
operator BooleanType	rapidjson/error/error.h	/^    operator BooleanType() const { return !IsError() ? &ParseResult::IsError : NULL; }$/;"	f	struct:ParseResult
operator ParseResult	rapidjson/document.h	/^    operator ParseResult() const { return parseResult_; }$/;"	f	class:GenericDocument
operator []	rapidjson/document.h	/^    GenericValue& operator[](SizeType index) {$/;"	f	class:GenericValue
operator []	rapidjson/document.h	/^    GenericValue& operator[](const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
operator []	rapidjson/document.h	/^    GenericValue& operator[](const std::basic_string<Ch>& name) { return (*this)[GenericValue(StringRef(name))]; }$/;"	f	class:GenericValue
operator []	rapidjson/document.h	/^    RAPIDJSON_DISABLEIF_RETURN((internal::NotExpr<internal::IsSame<typename internal::RemoveConst<T>::Type, Ch> >),(GenericValue&)) operator[](T* name) {$/;"	f	class:GenericValue
operator []	rapidjson/document.h	/^    RAPIDJSON_DISABLEIF_RETURN((internal::NotExpr<internal::IsSame<typename internal::RemoveConst<T>::Type, Ch> >),(const GenericValue&)) operator[](T* name) const { return const_cast<GenericValue&>(*this)[name]; }$/;"	f	class:GenericValue
operator []	rapidjson/document.h	/^    Reference operator[](DifferenceType n) const { return ptr_[n]; }$/;"	f	class:GenericMemberIterator
operator []	rapidjson/document.h	/^    ValueType& operator[](SizeType index) const {  return value_[index]; }$/;"	f	class:GenericArray
operator []	rapidjson/document.h	/^    ValueType& operator[](const std::basic_string<Ch>& name) const { return value_[name]; }$/;"	f	class:GenericObject
operator []	rapidjson/document.h	/^    const GenericValue& operator[](SizeType index) const { return const_cast<GenericValue&>(*this)[index]; }$/;"	f	class:GenericValue
operator []	rapidjson/document.h	/^    const GenericValue& operator[](const GenericValue<Encoding, SourceAllocator>& name) const { return const_cast<GenericValue&>(*this)[name]; }$/;"	f	class:GenericValue
operator []	rapidjson/document.h	/^    const GenericValue& operator[](const std::basic_string<Ch>& name) const { return (*this)[GenericValue(StringRef(name))]; }$/;"	f	class:GenericValue
operator []	rapidjson/document.h	/^    template <typename SourceAllocator> ValueType& operator[](const GenericValue<EncodingType, SourceAllocator>& name) const { return value_[name]; }$/;"	f	class:GenericObject
operator []	rapidjson/document.h	/^    template <typename T> ValueType& operator[](T* name) const { return value_[name]; }$/;"	f	class:GenericObject
operator const Ch *	rapidjson/document.h	/^    operator const Ch *() const { return s; }$/;"	f	struct:GenericStringRef
original_	rapidjson/reader.h	/^    Stream& original_;$/;"	m	class:internal::StreamLocalCopy
os_	rapidjson/encodedstream.h	/^    OutputByteStream& os_;$/;"	m	class:EncodedOutputStream
os_	rapidjson/encodedstream.h	/^    OutputByteStream* os_;$/;"	m	class:AutoUTFOutputStream
os_	rapidjson/pointer.h	/^        OutputStream& os_;$/;"	m	class:GenericPointer::PercentEncodeStream
os_	rapidjson/writer.h	/^    OutputStream* os_;$/;"	m	class:Writer
out	rapidjson/internal/regex.h	/^        SizeType out;     \/\/!< Equals to kInvalid for matching state$/;"	m	struct:internal::GenericRegex::State
out	rapidjson/internal/regex.h	/^        SizeType out; \/\/!< link-list of all output states$/;"	m	struct:internal::GenericRegex::Frag
out1	rapidjson/internal/regex.h	/^        SizeType out1;    \/\/!< Equals to non-kInvalid for split$/;"	m	struct:internal::GenericRegex::State
outputBuffer_	TcpConnection.h	/^    Buffer outputBuffer_;$/;"	m	class:TcpConnection
outputHandler_	rapidjson/schema.h	/^    OutputHandler* outputHandler_;$/;"	m	class:GenericSchemaValidator
ownAllocator_	rapidjson/document.h	/^    Allocator* ownAllocator_;$/;"	m	class:GenericDocument
ownAllocator_	rapidjson/internal/regex.h	/^    Allocator* ownAllocator_;$/;"	m	class:internal::GenericRegexSearch
ownAllocator_	rapidjson/internal/stack.h	/^    Allocator* ownAllocator_;$/;"	m	class:internal::Stack
ownAllocator_	rapidjson/pointer.h	/^    Allocator* ownAllocator_;               \/\/!< Allocator owned by this Pointer.$/;"	m	class:GenericPointer
ownAllocator_	rapidjson/schema.h	/^    Allocator *ownAllocator_;$/;"	m	class:GenericSchemaDocument
ownBaseAllocator_	rapidjson/allocators.h	/^    BaseAllocator* ownBaseAllocator_;   \/\/!< base allocator created by this object.$/;"	m	class:MemoryPoolAllocator
ownStateAllocator_	rapidjson/schema.h	/^    StateAllocator* ownStateAllocator_;$/;"	m	class:GenericSchemaValidator
owned	rapidjson/schema.h	/^        bool owned;$/;"	m	struct:GenericSchemaDocument::SchemaEntry
pInfo	cppjieba/Trie.hpp	/^  const DictUnit * pInfo;$/;"	m	struct:cppjieba::Dag
padding	rapidjson/document.h	/^            char padding[4];$/;"	m	struct:GenericValue::Number::I
padding2	rapidjson/document.h	/^            char padding2[4];$/;"	m	struct:GenericValue::Number::U
parseErrorCode_	rapidjson/pointer.h	/^    PointerParseErrorCode parseErrorCode_;  \/\/!< Parsing error code.$/;"	m	class:GenericPointer
parseErrorOffset_	rapidjson/pointer.h	/^    size_t parseErrorOffset_;               \/\/!< Offset in code unit when parsing fail.$/;"	m	class:GenericPointer
parseHeader	http/HttpRequest.cpp	/^void HttpRequest::Impl::parseHeader(const string& header)$/;"	f	class:HttpRequest::Impl
parseHeader	http/HttpRequest.cpp	/^void HttpRequest::parseHeader(const string& header)$/;"	f	class:HttpRequest
parseRequestHeader	http/HttpRequest.cpp	/^void HttpRequest::Impl::parseRequestHeader(const string& header, const string& pattern)$/;"	f	class:HttpRequest::Impl
parseResult_	rapidjson/document.h	/^          parseResult_(rhs.parseResult_)$/;"	f	class:GenericDocument
parseResult_	rapidjson/document.h	/^    ParseResult parseResult_;$/;"	m	class:GenericDocument
parseResult_	rapidjson/reader.h	/^    ParseResult parseResult_;$/;"	m	class:GenericReader
parseResult_	rapidjson/schema.h	/^    ParseResult parseResult_;$/;"	m	class:SchemaValidatingReader
pattern	rapidjson/schema.h	/^        RegexType* pattern;$/;"	m	struct:internal::Schema::PatternProperty
patternPropertiesSchemaCount	rapidjson/schema.h	/^    SizeType patternPropertiesSchemaCount;$/;"	m	struct:internal::SchemaValidationContext
patternPropertiesSchemas	rapidjson/schema.h	/^    const SchemaType** patternPropertiesSchemas;$/;"	m	struct:internal::SchemaValidationContext
patternPropertiesValidatorCount	rapidjson/schema.h	/^    SizeType patternPropertiesValidatorCount;$/;"	m	struct:internal::SchemaValidationContext
patternPropertiesValidators	rapidjson/schema.h	/^    ISchemaValidator** patternPropertiesValidators;$/;"	m	struct:internal::SchemaValidationContext
patternProperties_	rapidjson/schema.h	/^    PatternProperty* patternProperties_;$/;"	m	class:internal::Schema
patternPropertyCount_	rapidjson/schema.h	/^    SizeType patternPropertyCount_;$/;"	m	class:internal::Schema
pattern_	rapidjson/schema.h	/^    RegexType* pattern_;$/;"	m	class:internal::Schema
payload	rapidjson/document.h	/^        char payload[sizeof(SizeType) * 2 + 6];     \/\/ 2 x SizeType + lower 48-bit pointer$/;"	m	struct:GenericValue::Flag
peek	Buffer.h	/^    const char* peek() { return &*(buffer_.begin() + readerIndex); }$/;"	f	class:Buffer
peekBuffer_	rapidjson/istreamwrapper.h	/^    mutable Ch peekBuffer_[4];$/;"	m	class:BasicIStreamWrapper
pendingFunctors_	EventLoop.h	/^    FunctorList pendingFunctors_;$/;"	m	class:EventLoop
pointer	rapidjson/schema.h	/^        PointerType pointer;$/;"	m	struct:GenericSchemaDocument::SchemaEntry
poll	EPollPoller.cpp	/^void EPollPoller::poll(ChannelList& activeChannels)$/;"	f	class:EPollPoller
poller_	EventLoop.h	/^    std::unique_ptr<Poller> poller_;$/;"	m	class:EventLoop
polling_	EventLoop.h	/^    std::atomic<bool> polling_;$/;"	m	class:EventLoop
process_signal	client.cpp	/^void process_signal(int)$/;"	f
properties_	rapidjson/schema.h	/^    Property* properties_;$/;"	m	class:internal::Schema
propertyCount_	rapidjson/schema.h	/^    SizeType propertyCount_;$/;"	m	class:internal::Schema
propertyExist	rapidjson/schema.h	/^    bool* propertyExist;$/;"	m	struct:internal::SchemaValidationContext
ptValue	cppjieba/Trie.hpp	/^  const DictUnit *ptValue;$/;"	m	class:cppjieba::TrieNode
ptr_	rapidjson/document.h	/^    Pointer ptr_; \/\/!< raw pointer$/;"	m	class:GenericMemberIterator
putFunc_	rapidjson/encodedstream.h	/^    PutFunc putFunc_;$/;"	m	class:AutoUTFOutputStream
queryFromTable	database/DataBase.cpp	/^string DataBase::queryFromTable(const string& table, const string& key)$/;"	f	class:DataBase
queryFromTable	http/DataBase.cpp	/^DataBase::queryFromTable(const string& table, const unordered_map<string, string>& queryMap)$/;"	f	class:DataBase
queryQuestion	http/HttpServer.cpp	/^vector<Question> HttpServer::queryQuestion(const string& keyWords)$/;"	f	class:HttpServer
query_seg_	cppjieba/Jieba.hpp	/^  QuerySegment query_seg_;$/;"	m	class:cppjieba::Jieba
questionId_	http/Question.h	/^    string questionId_;$/;"	m	class:Question
question_	http/Question.h	/^    string question_;$/;"	m	class:Question
queueInLoop	EventLoop.cpp	/^void EventLoop::queueInLoop(Functor cb)$/;"	f	class:EventLoop
quit	EventLoop.cpp	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit_	EventLoop.h	/^    std::atomic<bool> quit_;$/;"	m	class:EventLoop
quot	rapidjson/msinttypes/inttypes.h	/^   intmax_t quot;$/;"	m	struct:__anon10
r_	rapidjson/reader.h	/^        GenericReader& r_;$/;"	m	struct:GenericReader::ClearStackOnExit
rangeCount_	rapidjson/internal/regex.h	/^    SizeType rangeCount_;$/;"	m	class:internal::GenericRegex
rangeStart	rapidjson/internal/regex.h	/^        SizeType rangeStart;$/;"	m	struct:internal::GenericRegex::State
ranges_	rapidjson/internal/regex.h	/^    Stack<Allocator> ranges_;$/;"	m	class:internal::GenericRegex
rank	cppjieba/TextRankExtractor.hpp	/^      void rank(WordMap &ws,size_t rankTime=10){$/;"	f	class:cppjieba::TextRankExtractor::WordGraph
readCallBack_	Channel.h	/^    EventCallBack readCallBack_;$/;"	m	class:Channel
readCount_	rapidjson/filereadstream.h	/^    size_t readCount_;$/;"	m	class:FileReadStream
readFd	Buffer.cpp	/^int Buffer::readFd(int sockfd)$/;"	f	class:Buffer
readableBytes	Buffer.h	/^    int readableBytes() { return writerIndex - readerIndex; }$/;"	f	class:Buffer
readerIndex	Buffer.h	/^    int readerIndex;$/;"	m	class:Buffer
referer_	http/HttpRequest.cpp	/^    string       referer_;$/;"	m	class:HttpRequest::Impl	file:
regex_	rapidjson/internal/regex.h	/^    const RegexType& regex_;$/;"	m	class:internal::GenericRegexSearch
rem	rapidjson/msinttypes/inttypes.h	/^   intmax_t rem;$/;"	m	struct:__anon10
remoteProvider_	rapidjson/schema.h	/^    IRemoteSchemaDocumentProviderType* remoteProvider_;$/;"	m	class:GenericSchemaDocument
removeChannel	EPollPoller.cpp	/^void EPollPoller::removeChannel(Channel* channel)$/;"	f	class:EPollPoller
removeConnection	TcpServer.cpp	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnectionInLoop	TcpServer.cpp	/^void TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
required	rapidjson/schema.h	/^        bool required;$/;"	m	struct:internal::Schema::Property
retrieve	Buffer.cpp	/^std::string Buffer::retrieve(int len)$/;"	f	class:Buffer
revents_	Channel.h	/^    unsigned short revents_;$/;"	m	class:Channel
right	cppjieba/Unicode.hpp	/^  RuneStrArray::const_iterator right;$/;"	m	struct:cppjieba::WordRange
root_	cppjieba/Trie.hpp	/^  TrieNode* root_;$/;"	m	class:cppjieba::Trie
root_	rapidjson/internal/regex.h	/^    SizeType root_;$/;"	m	class:internal::GenericRegex
root_	rapidjson/schema.h	/^    const SchemaType& root_;$/;"	m	class:GenericSchemaValidator
root_	rapidjson/schema.h	/^    const SchemaType* root_;                \/\/!< Root schema.$/;"	m	class:GenericSchemaDocument
runInLoop	EventLoop.cpp	/^void EventLoop::runInLoop(Functor cb)$/;"	f	class:EventLoop
rune	cppjieba/Unicode.hpp	/^  Rune rune;$/;"	m	struct:cppjieba::RuneStr
rune	cppjieba/Unicode.hpp	/^  uint32_t rune;$/;"	m	struct:cppjieba::RuneStrLite
runestr	cppjieba/Trie.hpp	/^  RuneStr runestr;$/;"	m	struct:cppjieba::Dag
s	rapidjson/document.h	/^        String s;$/;"	m	union:GenericValue::Data
s	rapidjson/document.h	/^    const Ch* const s; \/\/!< plain CharType pointer$/;"	m	struct:GenericStringRef
s	rapidjson/reader.h	/^    Stream s;$/;"	m	class:internal::StreamLocalCopy
s	rapidjson/reader.h	/^    Stream& s;$/;"	m	class:internal::StreamLocalCopy
schema	rapidjson/schema.h	/^        SchemaType* schema;$/;"	m	struct:GenericSchemaDocument::SchemaEntry
schema	rapidjson/schema.h	/^        const SchemaType* schema;$/;"	m	struct:internal::Schema::PatternProperty
schema	rapidjson/schema.h	/^        const SchemaType* schema;$/;"	m	struct:internal::Schema::Property
schema	rapidjson/schema.h	/^        const SchemaType** schema;$/;"	m	struct:GenericSchemaDocument::SchemaRefEntry
schema	rapidjson/schema.h	/^    const SchemaType* schema;$/;"	m	struct:internal::SchemaValidationContext
schemaDocument_	rapidjson/schema.h	/^    const SchemaDocumentType* schemaDocument_;$/;"	m	class:GenericSchemaValidator
schemaMap_	rapidjson/schema.h	/^    internal::Stack<Allocator> schemaMap_;  \/\/ Stores created Pointer -> Schemas$/;"	m	class:GenericSchemaDocument
schemaRef_	rapidjson/schema.h	/^    internal::Stack<Allocator> schemaRef_;  \/\/ Stores Pointer from $ref and schema which holds the $ref$/;"	m	class:GenericSchemaDocument
schemaStack_	rapidjson/schema.h	/^    internal::Stack<StateAllocator> schemaStack_;    \/\/!< stack to store the current path of schema (BaseSchemaType *)$/;"	m	class:GenericSchemaValidator
schemas	rapidjson/schema.h	/^        const SchemaType** schemas;$/;"	m	struct:internal::Schema::SchemaArray
sd_	rapidjson/schema.h	/^    const SchemaDocumentType& sd_;$/;"	m	class:SchemaValidatingReader
segment_	cppjieba/KeywordExtractor.hpp	/^  MixSegment segment_;$/;"	m	class:cppjieba::KeywordExtractor
segment_	cppjieba/TextRankExtractor.hpp	/^    MixSegment segment_;$/;"	m	class:cppjieba::TextRankExtractor
self	LogStream.h	/^    typedef LogStream self;$/;"	t	class:LogStream
send	SocketsOps.cpp	/^int sockets::send(int sockfd, const char* msg, int len)$/;"	f	class:sockets
send	TcpConnection.cpp	/^void TcpConnection::send(const std::string& msg)$/;"	f	class:TcpConnection
sentence_	cppjieba/PreFilter.hpp	/^  RuneStrArray sentence_;$/;"	m	class:cppjieba::PreFilter
server_	http/HttpServer.h	/^    TcpServer server_;$/;"	m	class:HttpServer
server_	server.cpp	/^    TcpServer server_;$/;"	m	class:EchoServer	file:
setAnswerId	http/Question.h	/^    void setAnswerId(const string& answerId) { answerId_ = answerId; }$/;"	f	class:Question
setCloseCallBack	Channel.h	/^    void setCloseCallBack(EventCallBack cb) { closeCallBack_ = std::move(cb); }$/;"	f	class:Channel
setCloseCallBack	TcpConnection.h	/^    void setCloseCallBack(const CloseCallBack& cb) { closeCallBack_ = cb; }$/;"	f	class:TcpConnection
setCode	http/HttpResponse.cpp	/^void HttpResponse::setCode(int code)$/;"	f	class:HttpResponse
setConnectionCallBack	Acceptor.h	/^    void setConnectionCallBack(NewConnectionCallBack cb) { newConnectionCallBack_ = std::move(cb); }$/;"	f	class:Acceptor
setConnectionCallBack	TcpConnection.h	/^    void setConnectionCallBack(ConnectionCallBack& cb) { connectionCallBack_ = cb; }$/;"	f	class:TcpConnection
setConnectionCallBack	TcpServer.h	/^    void setConnectionCallBack(ConnectionCallBack cb) { connectionCallBack_ = cb; }$/;"	f	class:TcpServer
setContentType	http/HttpResponse.cpp	/^void HttpResponse::setContentType(const string& contentType)$/;"	f	class:HttpResponse
setDate	http/Question.h	/^    void setDate(const string& date) { date_ = date; }$/;"	f	class:Question
setMessageCallBack	TcpConnection.h	/^    void setMessageCallBack(MessageCallBack& cb) { messageCallBack_ = cb ; }$/;"	f	class:TcpConnection
setMessageCallBack	TcpServer.h	/^    void setMessageCallBack(MessageCallBack cb) { messageCallBack_ = cb; }$/;"	f	class:TcpServer
setQuestion	http/Question.h	/^    void setQuestion(const string& question) { question_ = question; }$/;"	f	class:Question
setQuestionId	http/Question.h	/^    void setQuestionId(const string& questionId) { questionId_ = questionId; }$/;"	f	class:Question
setReadCallBack	Channel.h	/^    void setReadCallBack(EventCallBack cb) { readCallBack_ = std::move(cb); }$/;"	f	class:Channel
setReuseAddr	Socket.cpp	/^void Socket::setReuseAddr()$/;"	f	class:Socket
setReuseAddr	SocketsOps.cpp	/^void sockets::setReuseAddr(int sockfd)$/;"	f	class:sockets
setSocketBlock	SocketsOps.cpp	/^void sockets::setSocketBlock(int sockfd)$/;"	f	class:sockets
setSocketNonBlock	SocketsOps.cpp	/^void sockets::setSocketNonBlock(int sockfd)$/;"	f	class:sockets
setThreadCallBack	Thread.h	/^    void setThreadCallBack(ThreadCallBack cb) { threadCallBack_ = std::move(cb); }$/;"	f	class:Thread
setUser	http/Question.h	/^    void setUser(const string& user) { user_ = user; }$/;"	f	class:Question
setVersion	http/HttpResponse.cpp	/^void HttpResponse::setVersion(double version)$/;"	f	class:HttpResponse
setWriteCallBack	Channel.h	/^    void setWriteCallBack(EventCallBack cb) { writeCallBack_ = std::move(cb); }$/;"	f	class:Channel
set_revents	Channel.h	/^    void set_revents(unsigned short revents) { revents_ = revents ; }$/;"	f	class:Channel
set_sockaddr	InetAddress.cpp	/^void InetAddress::set_sockaddr(struct sockaddr_in& sockaddr)$/;"	f	class:InetAddress
set_state	Channel.h	/^    void set_state(int state) { state_ = state; }$/;"	f	class:Channel
shutdownWrite	SocketsOps.cpp	/^void sockets::shutdownWrite(int sockfd)$/;"	f	class:sockets
shutdownWrite	TcpConnection.cpp	/^void TcpConnection::shutdownWrite()$/;"	f	class:TcpConnection
size	rapidjson/allocators.h	/^        size_t size;        \/\/!< Current size of allocated memory in bytes.$/;"	m	struct:MemoryPoolAllocator::ChunkHeader
size	rapidjson/document.h	/^        SizeType size;$/;"	m	struct:GenericValue::ArrayData
size	rapidjson/document.h	/^        SizeType size;$/;"	m	struct:GenericValue::ObjectData
size_	rapidjson/memorystream.h	/^    size_t size_;       \/\/!< Size of the stream.$/;"	m	struct:MemoryStream
sockaddr_	InetAddress.h	/^    struct sockaddr_in sockaddr_;$/;"	m	class:InetAddress	typeref:struct:InetAddress::sockaddr_in
socket_	TcpConnection.h	/^    std::unique_ptr<Socket> socket_;$/;"	m	class:TcpConnection
sockets	SocketsOps.h	/^namespace sockets$/;"	n
sockfd_	Socket.h	/^    const int sockfd_;$/;"	m	class:Socket
source	rapidjson/schema.h	/^        PointerType source;$/;"	m	struct:GenericSchemaDocument::SchemaRefEntry
source_	http/HttpRequest.cpp	/^    string       source_;$/;"	m	class:HttpRequest::Impl	file:
src_	rapidjson/memorystream.h	/^    const Ch* src_;     \/\/!< Current read position.$/;"	m	struct:MemoryStream
src_	rapidjson/pointer.h	/^        const Ch* src_;     \/\/!< Current read position.$/;"	m	class:GenericPointer::PercentDecodeStream
src_	rapidjson/stream.h	/^    Ch* src_;$/;"	m	struct:GenericInsituStringStream
src_	rapidjson/stream.h	/^    const Ch* src_;     \/\/!< Current read position.$/;"	m	struct:GenericStringStream
ss	rapidjson/document.h	/^        ShortString ss;$/;"	m	union:GenericValue::Data
ss_	rapidjson/internal/regex.h	/^    SourceStream& ss_;$/;"	m	class:internal::DecodedStream
stackEnd_	rapidjson/internal/stack.h	/^    char *stackEnd_;$/;"	m	class:internal::Stack
stackStream	rapidjson/reader.h	/^        StackStream<char> stackStream;$/;"	m	class:GenericReader::NumberStream
stackTop_	rapidjson/internal/stack.h	/^    char *stackTop_;$/;"	m	class:internal::Stack
stack_	rapidjson/document.h	/^    internal::Stack<StackAllocator> stack_;$/;"	m	class:GenericDocument
stack_	rapidjson/internal/stack.h	/^    char *stack_;$/;"	m	class:internal::Stack
stack_	rapidjson/memorybuffer.h	/^    mutable internal::Stack<Allocator> stack_;$/;"	m	struct:GenericMemoryBuffer
stack_	rapidjson/reader.h	/^        internal::Stack<StackAllocator>& stack_;$/;"	m	class:GenericReader::StackStream
stack_	rapidjson/reader.h	/^    internal::Stack<StackAllocator> stack_;  \/\/!< A stack for storing decoded string temporarily during non-destructive parsing.$/;"	m	class:GenericReader
stack_	rapidjson/schema.h	/^    Stack<Allocator> stack_;$/;"	m	class:internal::Hasher
stack_	rapidjson/stringbuffer.h	/^    mutable internal::Stack<Allocator> stack_;$/;"	m	class:GenericStringBuffer
start	Acceptor.cpp	/^void Acceptor::start()$/;"	f	class:Acceptor
start	EventLoopThreadPool.cpp	/^void EventLoopThreadPool::start(int numThreads)$/;"	f	class:EventLoopThreadPool
start	TcpServer.cpp	/^void TcpServer::start()$/;"	f	class:TcpServer
start	Thread.cpp	/^void Thread::start()$/;"	f	class:Thread
start	http/AnswerServer.h	/^    void start() { httpServer_.start(); }$/;"	f	class:AnswerServer
start	http/HttpServer.h	/^    void start() { server_.start(); }$/;"	f	class:HttpServer
start	rapidjson/internal/regex.h	/^        SizeType start;$/;"	m	struct:internal::GenericRegex::Frag
start	rapidjson/internal/regex.h	/^        unsigned start; \/\/ $/;"	m	struct:internal::GenericRegex::Range
start	server.cpp	/^    void start()$/;"	f	class:EchoServer
startLoop	EventLoopThread.cpp	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startProb	cppjieba/HMMModel.hpp	/^  double startProb[STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
statMap	cppjieba/HMMModel.hpp	/^  char statMap[STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
state	Channel.h	/^    int state() { return state_; }$/;"	f	class:Channel
state0_	rapidjson/internal/regex.h	/^    Stack<Allocator> state0_;$/;"	m	class:internal::GenericRegexSearch
state1_	rapidjson/internal/regex.h	/^    Stack<Allocator> state1_;$/;"	m	class:internal::GenericRegexSearch
stateAllocator_	rapidjson/schema.h	/^    StateAllocator* stateAllocator_;$/;"	m	class:GenericSchemaValidator
stateCount_	rapidjson/internal/regex.h	/^    SizeType stateCount_;$/;"	m	class:internal::GenericRegex
stateSet_	rapidjson/internal/regex.h	/^    uint32_t* stateSet_;$/;"	m	class:internal::GenericRegexSearch
state_	Channel.h	/^    int state_;$/;"	m	class:Channel
state_	http/HttpResponse.cpp	/^    string state_;$/;"	m	class:HttpResponse::Impl	file:
state_	rapidjson/reader.h	/^    IterativeParsingState state_;$/;"	m	class:GenericReader
states_	rapidjson/internal/regex.h	/^    Stack<Allocator> states_;$/;"	m	class:internal::GenericRegex
static_node_infos_	cppjieba/DictTrie.hpp	/^  vector<DictUnit> static_node_infos_;$/;"	m	class:cppjieba::DictTrie
stop	TcpServer.h	/^    void stop() {}$/;"	f	class:TcpServer
stopWords_	cppjieba/KeywordExtractor.hpp	/^  unordered_set<string> stopWords_;$/;"	m	class:cppjieba::KeywordExtractor
stopWords_	cppjieba/TextRankExtractor.hpp	/^    unordered_set<string> stopWords_;$/;"	m	class:cppjieba::TextRankExtractor
str	rapidjson/document.h	/^        Ch str[MaxChars];$/;"	m	struct:GenericValue::ShortString
str	rapidjson/document.h	/^        const Ch* str;$/;"	m	struct:GenericValue::String
stream	Logging.h	/^    LogStream& stream() { return impl_.stream_; }$/;"	f	class:Logger
stream_	Logging.h	/^        LogStream stream_;$/;"	m	class:Logger::Impl
stream_	rapidjson/istreamwrapper.h	/^    StreamType& stream_;$/;"	m	class:BasicIStreamWrapper
stream_	rapidjson/ostreamwrapper.h	/^    StreamType& stream_;$/;"	m	class:BasicOStreamWrapper
strtoimax	rapidjson/msinttypes/inttypes.h	307;"	d
strtoumax	rapidjson/msinttypes/inttypes.h	308;"	d
supportUnicode	rapidjson/encodings.h	/^    enum { supportUnicode = 0 };$/;"	e	enum:ASCII::__anon6
supportUnicode	rapidjson/encodings.h	/^    enum { supportUnicode = 1 };$/;"	e	enum:AutoUTF::__anon7
supportUnicode	rapidjson/encodings.h	/^    enum { supportUnicode = 1 };$/;"	e	enum:UTF16::__anon4
supportUnicode	rapidjson/encodings.h	/^    enum { supportUnicode = 1 };$/;"	e	enum:UTF32::__anon5
supportUnicode	rapidjson/encodings.h	/^    enum { supportUnicode = 1 };$/;"	e	enum:UTF8::__anon3
symbols_	cppjieba/PreFilter.hpp	/^  const unordered_set<Rune>& symbols_;$/;"	m	class:cppjieba::PreFilter
symbols_	cppjieba/SegmentBase.hpp	/^  unordered_set<Rune> symbols_;$/;"	m	class:cppjieba::SegmentBase
tag	cppjieba/Trie.hpp	/^  string tag;$/;"	m	struct:cppjieba::DictUnit
tagger_	cppjieba/MPSegment.hpp	/^  PosTagger tagger_;$/;"	m	class:cppjieba::MPSegment
tagger_	cppjieba/MixSegment.hpp	/^  PosTagger tagger_;$/;"	m	class:cppjieba::MixSegment
takeFunc_	rapidjson/encodedstream.h	/^    TakeFunc takeFunc_;$/;"	m	class:AutoUTFInputStream
target	rapidjson/schema.h	/^        PointerType target;$/;"	m	struct:GenericSchemaDocument::SchemaRefEntry
threadCallBack_	Thread.h	/^    ThreadCallBack threadCallBack_;$/;"	m	class:Thread
threadFunc	EventLoopThread.cpp	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	Thread.cpp	/^void* Thread::threadFunc(void *arg)$/;"	f	class:Thread
thread_	EventLoopThread.h	/^    std::unique_ptr<Thread> thread_;$/;"	m	class:EventLoopThread
tid	CurrentThread.h	/^inline long tid()$/;"	f	namespace:CurrentThread
tid_	EventLoop.h	/^    int tid_;$/;"	m	class:EventLoop
tid_	Thread.h	/^    pthread_t tid_;$/;"	m	class:Thread
tie	Channel.cpp	/^void Channel::tie(const std::shared_ptr<TcpConnection>& tcpConnection)$/;"	f	class:Channel
tie_	Channel.h	/^    std::weak_ptr<TcpConnection> tie_;$/;"	m	class:Channel
tied_	Channel.h	/^    bool tied_;$/;"	m	class:Channel
toIpString	InetAddress.cpp	/^std::string InetAddress::toIpString()$/;"	f	class:InetAddress
toIpString	SocketsOps.cpp	/^std::string sockets::toIpString(const struct sockaddr_in* sockaddr)$/;"	f	class:sockets
toMap	http/Question.h	/^    unordered_map<string, string> toMap()$/;"	f	class:Question
toPortString	InetAddress.cpp	/^std::string InetAddress::toPortString()$/;"	f	class:InetAddress
toPortString	SocketsOps.cpp	/^std::string sockets::toPortString(const struct sockaddr_in* sockaddr)$/;"	f	class:sockets
toString	Buffer.h	/^    std::string toString() { return std::string(buffer_.begin() + readerIndex, buffer_.begin() + readableBytes()); }$/;"	f	class:Buffer
toString	LogStream.h	/^    std::string toString()$/;"	f	class:LogStream
tokenCount_	rapidjson/pointer.h	/^    size_t tokenCount_;                     \/\/!< Number of tokens in tokens_.$/;"	m	class:GenericPointer
tokens_	rapidjson/pointer.h	/^    Token* tokens_;                         \/\/!< A list of tokens.$/;"	m	class:GenericPointer
transProb	cppjieba/HMMModel.hpp	/^  double transProb[STATUS_SUM][STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
trie_	cppjieba/DictTrie.hpp	/^  Trie * trie_;$/;"	m	class:cppjieba::DictTrie
trie_	cppjieba/QuerySegment.hpp	/^  const DictTrie* trie_;$/;"	m	class:cppjieba::QuerySegment
type_	rapidjson/encodedstream.h	/^    UTFType type_;$/;"	m	class:AutoUTFInputStream
type_	rapidjson/encodedstream.h	/^    UTFType type_;$/;"	m	class:AutoUTFOutputStream
type_	rapidjson/schema.h	/^    unsigned type_; \/\/ bitmask of kSchemaType$/;"	m	class:internal::Schema
typeless_	rapidjson/schema.h	/^    SchemaType* typeless_;$/;"	m	class:GenericSchemaDocument
typeless_	rapidjson/schema.h	/^    const SchemaType* typeless_;$/;"	m	class:internal::Schema
u	rapidjson/document.h	/^            unsigned u;$/;"	m	struct:GenericValue::Number::U
u	rapidjson/document.h	/^        }u;$/;"	m	union:GenericValue::Number	typeref:struct:GenericValue::Number::U
u	rapidjson/schema.h	/^            uint64_t u;$/;"	m	union:internal::Hasher::Number::U
u	rapidjson/schema.h	/^        }u;$/;"	m	struct:internal::Hasher::Number	typeref:union:internal::Hasher::Number::U
u32toa	rapidjson/internal/itoa.h	/^inline char* u32toa(uint32_t value, char* buffer) {$/;"	f	namespace:internal
u64	rapidjson/document.h	/^        uint64_t u64;$/;"	m	union:GenericValue::Number
u64toa	rapidjson/internal/itoa.h	/^inline char* u64toa(uint64_t value, char* buffer) {$/;"	f	namespace:internal
u_	rapidjson/internal/ieee754.h	/^        uint64_t u_;$/;"	m	union:internal::Double::__anon8
uint16_t	rapidjson/msinttypes/stdint.h	/^   typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	rapidjson/msinttypes/stdint.h	/^   typedef unsigned short    uint16_t;$/;"	t
uint32_t	rapidjson/msinttypes/stdint.h	/^   typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	rapidjson/msinttypes/stdint.h	/^   typedef unsigned int      uint32_t;$/;"	t
uint64_t	rapidjson/msinttypes/stdint.h	/^typedef unsigned __int64     uint64_t;$/;"	t
uint8_t	rapidjson/msinttypes/stdint.h	/^   typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	rapidjson/msinttypes/stdint.h	/^   typedef unsigned char     uint8_t;$/;"	t
uint_fast16_t	rapidjson/msinttypes/stdint.h	/^typedef uint16_t  uint_fast16_t;$/;"	t
uint_fast32_t	rapidjson/msinttypes/stdint.h	/^typedef uint32_t  uint_fast32_t;$/;"	t
uint_fast64_t	rapidjson/msinttypes/stdint.h	/^typedef uint64_t  uint_fast64_t;$/;"	t
uint_fast8_t	rapidjson/msinttypes/stdint.h	/^typedef uint8_t   uint_fast8_t;$/;"	t
uint_least16_t	rapidjson/msinttypes/stdint.h	/^typedef uint16_t  uint_least16_t;$/;"	t
uint_least32_t	rapidjson/msinttypes/stdint.h	/^typedef uint32_t  uint_least32_t;$/;"	t
uint_least64_t	rapidjson/msinttypes/stdint.h	/^typedef uint64_t  uint_least64_t;$/;"	t
uint_least8_t	rapidjson/msinttypes/stdint.h	/^typedef uint8_t   uint_least8_t;$/;"	t
uintmax_t	rapidjson/msinttypes/stdint.h	/^typedef uint64_t  uintmax_t;$/;"	t
uintptr_t	rapidjson/msinttypes/stdint.h	/^   typedef _W64 unsigned int uintptr_t;$/;"	t
uintptr_t	rapidjson/msinttypes/stdint.h	/^   typedef unsigned __int64  uintptr_t;$/;"	t
unicode_length	cppjieba/Unicode.hpp	/^  uint32_t unicode_length;$/;"	m	struct:cppjieba::RuneStr
unicode_length	cppjieba/Unicode.hpp	/^  uint32_t unicode_length;$/;"	m	struct:cppjieba::Word
unicode_offset	cppjieba/Unicode.hpp	/^  uint32_t unicode_offset;$/;"	m	struct:cppjieba::RuneStr
unicode_offset	cppjieba/Unicode.hpp	/^  uint32_t unicode_offset;$/;"	m	struct:cppjieba::Word
uniqueItems_	rapidjson/schema.h	/^    bool uniqueItems_;$/;"	m	class:internal::Schema
update	Channel.cpp	/^void Channel::update()$/;"	f	class:Channel
update	EPollPoller.cpp	/^void EPollPoller::update(int opt, Channel* channel)$/;"	f	class:EPollPoller
updateChannel	EPollPoller.cpp	/^void EPollPoller::updateChannel(Channel* channel)$/;"	f	class:EPollPoller
updateChannel	EventLoop.cpp	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateTable	database/DataBase.cpp	/^bool DataBase::updateTable(const string& table,$/;"	f	class:DataBase
updateTable	http/DataBase.cpp	/^bool DataBase::updateTable(const string& table,$/;"	f	class:DataBase
userAgent_	http/HttpRequest.cpp	/^    string       userAgent_;$/;"	m	class:HttpRequest::Impl	file:
userBuffer_	rapidjson/allocators.h	/^    void *userBuffer_;          \/\/!< User supplied buffer.$/;"	m	class:MemoryPoolAllocator
user_	http/Question.h	/^    string user_;$/;"	m	class:Question
user_dict_single_chinese_word_	cppjieba/DictTrie.hpp	/^  unordered_set<Rune> user_dict_single_chinese_word_;$/;"	m	class:cppjieba::DictTrie
user_word_default_weight_	cppjieba/DictTrie.hpp	/^  double user_word_default_weight_;$/;"	m	class:cppjieba::DictTrie
valid_	rapidjson/pointer.h	/^        bool valid_;        \/\/!< Whether the parsing is valid.$/;"	m	class:GenericPointer::PercentDecodeStream
valid_	rapidjson/schema.h	/^    bool valid_;$/;"	m	class:GenericSchemaValidator
validatorCount	rapidjson/schema.h	/^    SizeType validatorCount;$/;"	m	struct:internal::SchemaValidationContext
validatorCount_	rapidjson/schema.h	/^    SizeType validatorCount_;$/;"	m	class:internal::Schema
validators	rapidjson/schema.h	/^    ISchemaValidator** validators;$/;"	m	struct:internal::SchemaValidationContext
value	rapidjson/document.h	/^    GenericValue<Encoding, Allocator> value;    \/\/!< value of member.$/;"	m	struct:GenericMember
value	rapidjson/rapidjson.h	/^template <> struct STATIC_ASSERTION_FAILURE<true> { enum { value = 1 }; };$/;"	e	enum:STATIC_ASSERTION_FAILURE::__anon14
valueCount	rapidjson/writer.h	/^        size_t valueCount;  \/\/!< number of values in this level$/;"	m	struct:Writer::Level
valuePatternValidatorType	rapidjson/schema.h	/^    PatternValidatorType valuePatternValidatorType;$/;"	m	struct:internal::SchemaValidationContext
valueSchema	rapidjson/schema.h	/^    const SchemaType* valueSchema;$/;"	m	struct:internal::SchemaValidationContext
valueUniqueness	rapidjson/schema.h	/^    bool valueUniqueness;$/;"	m	struct:internal::SchemaValidationContext
value_	rapidjson/document.h	/^    ValueType& value_;$/;"	m	class:GenericArray
value_	rapidjson/document.h	/^    ValueType& value_;$/;"	m	class:GenericObject
version	http/HttpRequest.cpp	/^double HttpRequest::version() const$/;"	f	class:HttpRequest
version_	http/HttpRequest.cpp	/^    double       version_;$/;"	m	class:HttpRequest::Impl	file:
version_	http/HttpResponse.cpp	/^    double version_;$/;"	m	class:HttpResponse::Impl	file:
wait	Condition.cpp	/^void Condition::wait()$/;"	f	class:Condition
wakeup	EventLoop.cpp	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeupChannel_	EventLoop.h	/^    std::unique_ptr<Channel> wakeupChannel_;$/;"	m	class:EventLoop
wakeupFd_	EventLoop.h	/^    int wakeupFd_;$/;"	m	class:EventLoop
wcstoimax	rapidjson/msinttypes/inttypes.h	311;"	d
wcstoumax	rapidjson/msinttypes/inttypes.h	312;"	d
weight	cppjieba/KeywordExtractor.hpp	/^    double weight;$/;"	m	struct:cppjieba::KeywordExtractor::Word
weight	cppjieba/TextRankExtractor.hpp	/^    typedef struct _Word {string word;vector<size_t> offsets;double weight;}    Word; \/\/ struct Word$/;"	m	struct:cppjieba::TextRankExtractor::_Word
weight	cppjieba/Trie.hpp	/^  double weight;$/;"	m	struct:cppjieba::Dag
weight	cppjieba/Trie.hpp	/^  double weight;$/;"	m	struct:cppjieba::DictUnit
word	cppjieba/Jieba.hpp	/^    string word;$/;"	m	struct:cppjieba::Jieba::LocWord
word	cppjieba/KeywordExtractor.hpp	/^    string word;$/;"	m	struct:cppjieba::KeywordExtractor::Word
word	cppjieba/TextRankExtractor.hpp	/^    typedef struct _Word {string word;vector<size_t> offsets;double weight;}    Word; \/\/ struct Word$/;"	m	struct:cppjieba::TextRankExtractor::_Word
word	cppjieba/Trie.hpp	/^  Unicode word;$/;"	m	struct:cppjieba::DictUnit
word	cppjieba/Unicode.hpp	/^  string word;$/;"	m	struct:cppjieba::Word
writableBytes	Buffer.h	/^    int writableBytes() { return buffer_.size() - writerIndex; }$/;"	f	class:Buffer
writeCallBack_	Channel.h	/^    EventCallBack writeCallBack_;$/;"	m	class:Channel
writerIndex	Buffer.h	/^    int writerIndex;$/;"	m	class:Buffer
~Acceptor	Acceptor.cpp	/^Acceptor::~Acceptor()$/;"	f	class:Acceptor
~Buffer	Buffer.cpp	/^Buffer::~Buffer()$/;"	f	class:Buffer
~Channel	Channel.cpp	/^Channel::~Channel()$/;"	f	class:Channel
~ClearStackOnExit	rapidjson/document.h	/^        ~ClearStackOnExit() { d_.ClearStack(); }$/;"	f	struct:GenericDocument::ClearStackOnExit
~ClearStackOnExit	rapidjson/reader.h	/^        ~ClearStackOnExit() { r_.ClearStack(); }$/;"	f	struct:GenericReader::ClearStackOnExit
~Condition	Condition.cpp	/^Condition::~Condition()$/;"	f	class:Condition
~DataBase	database/DataBase.cpp	/^DataBase::~DataBase()$/;"	f	class:DataBase
~DataBase	http/DataBase.cpp	/^DataBase::~DataBase()$/;"	f	class:DataBase
~DictTrie	cppjieba/DictTrie.hpp	/^  ~DictTrie() {$/;"	f	class:cppjieba::DictTrie
~EPollPoller	EPollPoller.cpp	/^EPollPoller::~EPollPoller()$/;"	f	class:EPollPoller
~EchoServer	server.cpp	/^    ~EchoServer() {  }$/;"	f	class:EchoServer
~EventLoop	EventLoop.cpp	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoopThread	EventLoopThread.cpp	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThreadPool	EventLoopThreadPool.cpp	/^EventLoopThreadPool::~EventLoopThreadPool()$/;"	f	class:EventLoopThreadPool
~FullSegment	cppjieba/FullSegment.hpp	/^  ~FullSegment() {$/;"	f	class:cppjieba::FullSegment
~GenericArray	rapidjson/document.h	/^    ~GenericArray() {}$/;"	f	class:GenericArray
~GenericDocument	rapidjson/document.h	/^    ~GenericDocument() {$/;"	f	class:GenericDocument
~GenericObject	rapidjson/document.h	/^    ~GenericObject() {}$/;"	f	class:GenericObject
~GenericPointer	rapidjson/pointer.h	/^    ~GenericPointer() {$/;"	f	class:GenericPointer
~GenericRegex	rapidjson/internal/regex.h	/^    ~GenericRegex() {}$/;"	f	class:internal::GenericRegex
~GenericRegexSearch	rapidjson/internal/regex.h	/^    ~GenericRegexSearch() {$/;"	f	class:internal::GenericRegexSearch
~GenericSchemaDocument	rapidjson/schema.h	/^    ~GenericSchemaDocument() {$/;"	f	class:GenericSchemaDocument
~GenericSchemaValidator	rapidjson/schema.h	/^    ~GenericSchemaValidator() {$/;"	f	class:GenericSchemaValidator
~GenericValue	rapidjson/document.h	/^    ~GenericValue() {$/;"	f	class:GenericValue
~HMMModel	cppjieba/HMMModel.hpp	/^  ~HMMModel() {$/;"	f	struct:cppjieba::HMMModel
~HMMSegment	cppjieba/HMMSegment.hpp	/^  ~HMMSegment() {$/;"	f	class:cppjieba::HMMSegment
~HttpRequest	http/HttpRequest.cpp	/^HttpRequest::~HttpRequest()$/;"	f	class:HttpRequest
~HttpResponse	http/HttpResponse.cpp	/^HttpResponse::~HttpResponse()$/;"	f	class:HttpResponse
~HttpServer	http/HttpServer.cpp	/^HttpServer::~HttpServer()$/;"	f	class:HttpServer
~IGenericRemoteSchemaDocumentProvider	rapidjson/schema.h	/^    virtual ~IGenericRemoteSchemaDocumentProvider() {}$/;"	f	class:IGenericRemoteSchemaDocumentProvider
~ISchemaStateFactory	rapidjson/schema.h	/^    virtual ~ISchemaStateFactory() {}$/;"	f	class:internal::ISchemaStateFactory
~ISchemaValidator	rapidjson/schema.h	/^    virtual ~ISchemaValidator() {}$/;"	f	class:internal::ISchemaValidator
~Impl	Logging.cpp	/^Logger::Impl::~Impl()$/;"	f	class:Logger::Impl
~Impl	http/HttpRequest.cpp	/^HttpRequest::Impl::~Impl()$/;"	f	class:HttpRequest::Impl
~Impl	http/HttpResponse.cpp	/^HttpResponse::Impl::~Impl()$/;"	f	class:HttpResponse::Impl
~InetAddress	InetAddress.cpp	/^InetAddress::~InetAddress()$/;"	f	class:InetAddress
~Jieba	cppjieba/Jieba.hpp	/^  ~Jieba() {$/;"	f	class:cppjieba::Jieba
~KeywordExtractor	cppjieba/KeywordExtractor.hpp	/^  ~KeywordExtractor() {$/;"	f	class:cppjieba::KeywordExtractor
~Logger	Logging.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~MPSegment	cppjieba/MPSegment.hpp	/^  ~MPSegment() {$/;"	f	class:cppjieba::MPSegment
~MemoryPoolAllocator	rapidjson/allocators.h	/^    ~MemoryPoolAllocator() {$/;"	f	class:MemoryPoolAllocator
~MixSegment	cppjieba/MixSegment.hpp	/^  ~MixSegment() {$/;"	f	class:cppjieba::MixSegment
~MutexLock	MutexLock.cpp	/^MutexLock::~MutexLock()$/;"	f	class:MutexLock
~MutexLockGuard	MutexLockGuard.h	/^    ~MutexLockGuard()$/;"	f	class:MutexLockGuard
~PatternProperty	rapidjson/schema.h	/^        ~PatternProperty() { $/;"	f	struct:internal::Schema::PatternProperty
~Poller	Poller.h	/^    virtual ~Poller() {}$/;"	f	class:Poller
~PosTagger	cppjieba/PosTagger.hpp	/^  ~PosTagger() {$/;"	f	class:cppjieba::PosTagger
~PreFilter	cppjieba/PreFilter.hpp	/^  ~PreFilter() {$/;"	f	class:cppjieba::PreFilter
~Property	rapidjson/schema.h	/^        ~Property() { AllocatorType::Free(dependencies); }$/;"	f	struct:internal::Schema::Property
~QuerySegment	cppjieba/QuerySegment.hpp	/^  ~QuerySegment() {$/;"	f	class:cppjieba::QuerySegment
~Question	http/Question.h	/^    ~Question() {}$/;"	f	class:Question
~Schema	rapidjson/schema.h	/^    ~Schema() {$/;"	f	class:internal::Schema
~SchemaArray	rapidjson/schema.h	/^        ~SchemaArray() { AllocatorType::Free(schemas); }$/;"	f	struct:internal::Schema::SchemaArray
~SchemaEntry	rapidjson/schema.h	/^        ~SchemaEntry() {$/;"	f	struct:GenericSchemaDocument::SchemaEntry
~SchemaValidationContext	rapidjson/schema.h	/^    ~SchemaValidationContext() {$/;"	f	struct:internal::SchemaValidationContext
~SegmentBase	cppjieba/SegmentBase.hpp	/^  virtual ~SegmentBase() {$/;"	f	class:cppjieba::SegmentBase
~SegmentTagged	cppjieba/SegmentTagged.hpp	/^  virtual ~SegmentTagged() {$/;"	f	class:cppjieba::SegmentTagged
~Socket	Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
~Stack	rapidjson/internal/stack.h	/^    ~Stack() {$/;"	f	class:internal::Stack
~StreamLocalCopy	rapidjson/reader.h	/^    ~StreamLocalCopy() { original_ = s; }$/;"	f	class:internal::StreamLocalCopy
~TcpConnection	TcpConnection.cpp	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpServer	TcpServer.cpp	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TextRankExtractor	cppjieba/TextRankExtractor.hpp	/^    ~TextRankExtractor() {$/;"	f	class:cppjieba::TextRankExtractor
~Thread	Thread.cpp	/^Thread::~Thread()$/;"	f	class:Thread
~Trie	cppjieba/Trie.hpp	/^  ~Trie() {$/;"	f	class:cppjieba::Trie
